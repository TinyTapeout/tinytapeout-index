{
  "version": 3,
  "id": "tt04",
  "name": "Tiny Tapeout 4",
  "repo": "https://github.com/TinyTapeout/tinytapeout-04",
  "commit": "cf48ca5946af0f2fcad9fb479c2624144048a31b",
  "projects": [
    {
      "macro": "tt_um_4_LUT_Baungarten",
      "address": 209,
      "title": "LFMPDM (Lightning Fast Matrix Programmable Design Module)",
      "author": "Emilio Baungarten",
      "description": "8xLUTs 4-input",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Baungarten-CINVESTAV/tt04-submission-4-LUT",
      "commit": "8b2252cea0d1b9cacfbeea8d43b504730ee39dda",
      "pinout": {
        "ui_in[0]": "i_addr_load_data[0]",
        "ui_in[1]": "i_addr_load_data[1]",
        "ui_in[2]": "i_addr_load_data[2]",
        "ui_in[3]": "i_addr_load_data[3]",
        "ui_in[4]": "i_Data",
        "ui_in[5]": "i_config_enable",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "o_Data",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "i_LUT [0]",
        "uio[1]": "i_LUT [1]",
        "uio[2]": "i_LUT [2]",
        "uio[3]": "i_LUT [3]",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ALU_NicolasOrcasitas",
      "address": 228,
      "title": "8-bit ALU",
      "author": "Nicolas Orcasitas Garcia",
      "description": "8-bit ALU with 8 operations",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NicolasOrcasitas/tt04-submission-8bit-ALU",
      "commit": "a683d97a9fec413e89ec15f2a0bfbea7e699b5f6",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_BounceFSM_RSX92",
      "address": 327,
      "title": "Password FSM",
      "author": "Francisco Javier Rodriguez Navarrete",
      "description": "Project for the Password FSM",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RSX92/tt04-submission-fsmlock",
      "commit": "f441858372ef3327313a2d73e37a619a3df7c9c3",
      "pinout": {
        "ui_in[0]": "iv_data[3]",
        "ui_in[1]": "iv_data[2]",
        "ui_in[2]": "iv_data[1]",
        "ui_in[3]": "iv_data[0]",
        "ui_in[4]": "N/C",
        "ui_in[5]": "N/C",
        "ui_in[6]": "i_send_data",
        "ui_in[7]": "i_CE",
        "uo_out[0]": "o_acknowledge[7]",
        "uo_out[1]": "o_acknowledge[6]",
        "uo_out[2]": "o_acknowledge[5]",
        "uo_out[3]": "o_acknowledge[4]",
        "uo_out[4]": "o_acknowledge[3]",
        "uo_out[5]": "o_acknowledge[2]",
        "uo_out[6]": "o_acknowledge[1]",
        "uo_out[7]": "o_acknowledge[0]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_CPU",
      "address": 277,
      "title": "CPU 8 bit",
      "author": "Daniel Arevalos, Patricio Carrasco, Mario Romero, Benjamin Villegas",
      "description": "Simple CPU of 8 bit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/P-coryan/Risc-V-TinyTapeout04",
      "commit": "241ec3f5e2dcd3bbb0b3cf869c28374537e75458",
      "pinout": {
        "ui_in[0]": "data_in[0]",
        "ui_in[1]": "data_in[1]",
        "ui_in[2]": "data_in[2]",
        "ui_in[3]": "data_in[3]",
        "ui_in[4]": "data_in[4]",
        "ui_in[5]": "data_in[5]",
        "ui_in[6]": "data_in[6]",
        "ui_in[7]": "data_in[7]",
        "uo_out[0]": "data_out[0]",
        "uo_out[1]": "data_out[1]",
        "uo_out[2]": "data_out[2]",
        "uo_out[3]": "data_out[3]",
        "uo_out[4]": "data_out[4]",
        "uo_out[5]": "data_out[5]",
        "uo_out[6]": "data_out[6]",
        "uo_out[7]": "data_out[7]",
        "uio[0]": "write",
        "uio[1]": "address[0]",
        "uio[2]": "address[1]",
        "uio[3]": "address[2]",
        "uio[4]": "address[3]",
        "uio[5]": "address[4]",
        "uio[6]": "address[5]",
        "uio[7]": "address[6]"
      }
    },
    {
      "macro": "tt_um_FSM",
      "address": 274,
      "title": "Microrobotics FSM",
      "author": "Lucas Irribarra, Felipe Rifo",
      "description": "Simple FSM for Micro-srobots",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/FRifoM99/tt04_MicroRobotics_FSM",
      "commit": "21a310cdd2507c01e76b02b0bec67f87d02e13ab",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "Front sensor",
        "ui_in[6]": "Left sensor",
        "ui_in[7]": "Rigt sensor",
        "uo_out[0]": "motor B left",
        "uo_out[1]": "motor B Right",
        "uo_out[2]": "motor A Left",
        "uo_out[3]": "motor A Right",
        "uo_out[4]": "0",
        "uo_out[5]": "0",
        "uo_out[6]": "0",
        "uo_out[7]": "pwm signal",
        "uio[0]": "pwm resolution bit 0",
        "uio[1]": "pwm resolution bit 1",
        "uio[2]": "pwm resolution bit 2",
        "uio[3]": "pwm resolution bit 3",
        "uio[4]": "pwm resolution bit 4",
        "uio[5]": "pwm resolution bit 5",
        "uio[6]": "pwm resolution bit 6",
        "uio[7]": "pwm resolution bit 7"
      }
    },
    {
      "macro": "tt_um_FreqMeter_Juan_Garcial",
      "address": 337,
      "title": "frecuencimeter",
      "author": "Juan Carlos Garcia Lopez and Emilio Isaac Baungarten Leon",
      "description": "frecuencimeter",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Juan-garcial2/tt04-submission-template",
      "commit": "5a1432f5c72ab9d5d5153db17dba97e5d4be4bea",
      "pinout": {
        "ui_in[0]": "data_in",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segments_",
        "uo_out[1]": "disp_select_",
        "uo_out[2]": "segment_select_",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_LEOGLM_hamming_code_top",
      "address": 256,
      "title": "(11,7) hamming code encoder and decoder with UART",
      "author": "LEOGLM",
      "description": "(11,7) hamming code encoder and decoder using UART Protocol",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/LEOGLM0312/tt04-submission-hamming_code",
      "commit": "7db5142563f4a9767d41da2c1f524f39346f2ae2",
      "pinout": {
        "ui_in[0]": "encoder and decoder switching",
        "ui_in[1]": "encoder_enable",
        "ui_in[2]": "decoder_input",
        "ui_in[3]": "encoder_input",
        "ui_in[4]": "encoder_input",
        "ui_in[5]": "encoder_input",
        "ui_in[6]": "encoder_input",
        "ui_in[7]": "encoder_input",
        "uo_out[0]": "state",
        "uo_out[1]": "encoder_output",
        "uo_out[2]": "decoder_output",
        "uo_out[3]": "decoder_output",
        "uo_out[4]": "decoder_output",
        "uo_out[5]": "decoder_output",
        "uo_out[6]": "decoder_output",
        "uo_out[7]": "decoder_output",
        "uio[0]": "encoder_input/decoder_output",
        "uio[1]": "encoder_input/decoder_output",
        "uio[2]": "encoder_input/decoder_output",
        "uio[3]": "encoder_input/decoder_output",
        "uio[4]": "encoder_input/decoder_output",
        "uio[5]": "encoder_input",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_MichaelBell_nanoV",
      "address": 100,
      "title": "Risc-V Nano V",
      "author": "Michael Bell",
      "description": "RV32E bit serial processor",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/MichaelBell/tt04-nanoV",
      "commit": "76f850a4d73398e16c32a3e790d24bd27d845318",
      "pinout": {
        "ui_in[0]": "General purpose input 0",
        "ui_in[1]": "General purpose input 1",
        "ui_in[2]": "General purpose input 2",
        "ui_in[3]": "General purpose input 3",
        "ui_in[4]": "General purpose input 4",
        "ui_in[5]": "General purpose input 5",
        "ui_in[6]": "General purpose input 6",
        "ui_in[7]": "General purpose input 7",
        "uo_out[0]": "segment a / GP output 0",
        "uo_out[1]": "segment b / GP output 1",
        "uo_out[2]": "segment c / GP output 2",
        "uo_out[3]": "segment d / GP output 3",
        "uo_out[4]": "segment e / GP output 4",
        "uo_out[5]": "segment f / GP output 5",
        "uo_out[6]": "segment g / GP output 6",
        "uo_out[7]": "dot / GP output 7",
        "uio[0]": "SPI RAM MOSI",
        "uio[1]": "SPI RAM CSn",
        "uio[2]": "SPI RAM SCK",
        "uio[3]": "SPI RAM MISO",
        "uio[4]": "UART RX",
        "uio[5]": "UART TX",
        "uio[6]": "UART RTS",
        "uio[7]": "SPI RAM ~Hold"
      }
    },
    {
      "macro": "tt_um_MultiPatternLEDSequencer_RSYO3000",
      "address": 211,
      "title": "Multi Pattern LED Sequencer",
      "author": "Francisco Javier Rodriguez Navarrete",
      "description": "Project for the MPLS LED lights",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RSYO3000/tt04-submission-mpls",
      "commit": "26d7367bb4eb712eaeb0e418da98110f86b31751",
      "pinout": {
        "ui_in[0]": "N/C",
        "ui_in[1]": "pattern_sel[4]",
        "ui_in[2]": "pattern_sel[3]",
        "ui_in[3]": "pattern_sel[2]",
        "ui_in[4]": "pattern_sel[1]",
        "ui_in[5]": "pattern_sel[0]",
        "ui_in[6]": "clk_selector[1]",
        "ui_in[7]": "clk_selector[0]",
        "uo_out[0]": "LED[7]",
        "uo_out[1]": "LED[6]",
        "uo_out[2]": "LED[5]",
        "uo_out[3]": "LED[4]",
        "uo_out[4]": "LED[3]",
        "uo_out[5]": "LED[2]",
        "uo_out[6]": "LED[1]",
        "uo_out[7]": "LED[0]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_RELOG_10M_Juan_Garcial",
      "address": 210,
      "title": "7 SEGMENTS CLOCK",
      "author": "Juan Carlos Garcia Lopez",
      "description": "7 SEGMENTS CLOCK",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Juan-Garcial/tt04_jcgarcia",
      "commit": "5238d217df90032695323392c244d7b2fc9c8fb0",
      "pinout": {
        "ui_in[0]": "disp_type",
        "ui_in[1]": "fmt",
        "ui_in[2]": "prog",
        "ui_in[3]": "adjust",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "ampm",
        "uo_out[1]": "segments_",
        "uo_out[2]": "disp_select_",
        "uo_out[3]": "segment_select_",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_RS_Vfreq",
      "address": 225,
      "title": "CLK Frequency Divider",
      "author": "Ramon Sarmiento",
      "description": "Generates several frequency clock signals from a user-selected M module",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RamonSsc/tt04-submission-Vfreq",
      "commit": "11b78c583042f76badc6388dee4d69f548066c4e",
      "pinout": {
        "ui_in[0]": "Modulo[0]",
        "ui_in[1]": "Modulo[1]",
        "ui_in[2]": "Modulo[2]",
        "ui_in[3]": "Modulo[3]",
        "ui_in[4]": "Modulo[4]",
        "ui_in[5]": "Modulo[5]",
        "ui_in[6]": "Modulo[6]",
        "ui_in[7]": "Modulo[7]",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "CLK 1/2",
        "uio[1]": "CLK 1/4",
        "uio[2]": "CLK 1/8",
        "uio[3]": "CLK 1/16",
        "uio[4]": "CLK 1/32",
        "uio[5]": "CLK 1/64",
        "uio[6]": "CLK 1/128",
        "uio[7]": "Modulo M signal"
      }
    },
    {
      "macro": "tt_um_USM_temp_sens_hyst",
      "address": 273,
      "title": "RO-based temperature sensor with hysteresis",
      "author": "Francisco Aguirre, Francisca Donoso, based on design by Daniel Arevalos and Jorge Mar\u00edn",
      "description": "Ring oscillator whose frequency depends on temperature, with a hysteresis module for temperature detection.",
      "clock_hz": 1000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Grimrist/tt04_usm_ro-based_tempsens-hyst",
      "commit": "042913721bba12a14eb9f17c2c0e1b3166598e78",
      "pinout": {
        "ui_in[0]": "clk_internal",
        "ui_in[1]": "clk_sel",
        "ui_in[2]": "enable_inv_osc",
        "ui_in[3]": "enable_nand_osc",
        "ui_in[4]": "rx",
        "ui_in[5]": "osc_sel",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "tx",
        "uo_out[1]": "temp_warn",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "counter[0]",
        "uio[1]": "counter[1]",
        "uio[2]": "counter[2]",
        "uio[3]": "counter[3]",
        "uio[4]": "counter[4]",
        "uio[5]": "counter[5]",
        "uio[6]": "counter[6]",
        "uio[7]": "counter[7]"
      }
    },
    {
      "macro": "tt_um_adder_NestorMatajira",
      "address": 227,
      "title": "4 bit adder ",
      "author": "Nestor Matajira",
      "description": "Add two 4 bit numbers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NestorMatajira/tt04-submission-sumador",
      "commit": "d76a889a01d50a824eab141f0aae0e715b73f75c",
      "pinout": {
        "ui_in[0]": "A[0]",
        "ui_in[1]": "A[1]",
        "ui_in[2]": "A[2]",
        "ui_in[3]": "A[3]",
        "ui_in[4]": "B[0]",
        "ui_in[5]": "B[1]",
        "ui_in[6]": "B[2]",
        "ui_in[7]": "B[3]",
        "uo_out[0]": "S[0]",
        "uo_out[1]": "S[1]",
        "uo_out[2]": "S[2]",
        "uo_out[3]": "S[3]",
        "uo_out[4]": "S[4]",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_adriannovosel_top",
      "address": 257,
      "title": "Multi-channel pulse counter with serial output, v01b",
      "author": "Adrian Novosel, Dinko Oletic",
      "description": "Counts number of digital pulses occuring within a time interval across four input channels, and periodically outputs the values out using serial output. Verilog HDL implementation.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DinkoOletic/tt04-HDL_unizgfer_multich_pulse_counter_v01b",
      "commit": "625610fd9db48129b830ebdcd11fe7bae105e3a9",
      "pinout": {
        "ui_in[0]": "ch1",
        "ui_in[1]": "ch2",
        "ui_in[2]": "ch3",
        "ui_in[3]": "ch4",
        "ui_in[4]": "RTC",
        "ui_in[5]": "clk",
        "ui_in[6]": "reset",
        "ui_in[7]": "",
        "uo_out[0]": "serial_out",
        "uo_out[1]": "ovf_global",
        "uo_out[2]": "a0_out",
        "uo_out[3]": "a1_out",
        "uo_out[4]": "a2_out",
        "uo_out[5]": "SL_out",
        "uo_out[6]": "ovf_RTC_out",
        "uo_out[7]": "ovf_ch_out",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_algofoogle_raybox_zero",
      "address": 33,
      "title": "raybox-zero",
      "author": "algofoogle (Anton Maurovic)",
      "description": "Simple VGA ray caster game demo",
      "clock_hz": 25000000,
      "tiles": "4x2",
      "analog_pins": [],
      "repo": "https://github.com/algofoogle/tt04-raybox-zero",
      "commit": "d6ab74c93b3e098356549392840495d5ada5d6fd",
      "pinout": {
        "ui_in[0]": "SPI in: sclk",
        "ui_in[1]": "SPI in: mosi",
        "ui_in[2]": "SPI in: ss_n",
        "ui_in[3]": "debug",
        "ui_in[4]": "inc_px",
        "ui_in[5]": "inc_py",
        "ui_in[6]": "reg",
        "ui_in[7]": "",
        "uo_out[0]": "hsync_n",
        "uo_out[1]": "vsync_n",
        "uo_out[2]": "red[0]",
        "uo_out[3]": "red[1]",
        "uo_out[4]": "green[0]",
        "uo_out[5]": "green[1]",
        "uo_out[6]": "blue[0]",
        "uo_out[7]": "blue[1]",
        "uio[0]": "Out: o_hblank",
        "uio[1]": "Out: o_vblank",
        "uio[2]": "SPI2 in: reg_sclk",
        "uio[3]": "SPI2 in: reg_mosi",
        "uio[4]": "SPI2 in: reg_ss_n",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_alu",
      "address": 246,
      "title": "4-bit-alu",
      "author": "Angelo Machorro",
      "description": "4 bit alu ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Angardo18/tt04-submission-angardo-alu",
      "commit": "2a07909aca4b3fdd0da059867f29099b4044abde",
      "pinout": {
        "ui_in[0]": "A3",
        "ui_in[1]": "A2",
        "ui_in[2]": "A1",
        "ui_in[3]": "A0",
        "ui_in[4]": "B3",
        "ui_in[5]": "B2",
        "ui_in[6]": "B1",
        "ui_in[7]": "B0",
        "uo_out[0]": "R7",
        "uo_out[1]": "R6",
        "uo_out[2]": "R5",
        "uo_out[3]": "R4",
        "uo_out[4]": "R3",
        "uo_out[5]": "R2",
        "uo_out[6]": "R1",
        "uo_out[7]": "R0",
        "uio[0]": "S0",
        "uio[1]": "S1",
        "uio[2]": "S2",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_alu4_alonso59",
      "address": 306,
      "title": "4-bits 1-channel PWM and ALU 4 bits",
      "author": "Alonso",
      "description": "This is a 4-bits and 1-channel PWM module",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alonso59/tt04-submission-alu4",
      "commit": "53b0963e85c28a8b4c2edc9c1e85ab6881e90855",
      "pinout": {
        "ui_in[0]": "ui_in[7]",
        "ui_in[1]": "ui_in[6]",
        "ui_in[2]": "ui_in[5]",
        "ui_in[3]": "ui_in[4]",
        "ui_in[4]": "ui_in[3]",
        "ui_in[5]": "ui_in[2]",
        "ui_in[6]": "ui_in[1]",
        "ui_in[7]": "ui_in[0]",
        "uo_out[0]": "uo_out[4]",
        "uo_out[1]": "uo_out[3]",
        "uo_out[2]": "uo_out[2]",
        "uo_out[3]": "uo_out[1]",
        "uo_out[4]": "uo_out[0]",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ashleyjr_delay_line",
      "address": 164,
      "title": "Delay Line",
      "author": "Ashley J. Robinson",
      "description": "A simple delay line with instrumentation",
      "clock_hz": 50000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ashleyjr/tt04-delay-line",
      "commit": "bb9e255e0a3bf4ba53d0d5a7ffdc4bc7174f1623",
      "pinout": {
        "ui_in[0]": "UART Rx",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "UART Tx",
        "uo_out[1]": "Tied Low",
        "uo_out[2]": "Tied Low",
        "uo_out[3]": "Tied Low",
        "uo_out[4]": "Tied Low",
        "uo_out[5]": "Tied Low",
        "uo_out[6]": "Tied Low",
        "uo_out[7]": "Tied Low",
        "uio[0]": "Tied Low",
        "uio[1]": "Tied Low",
        "uio[2]": "Tied Low",
        "uio[3]": "Tied Low",
        "uio[4]": "Tied Low",
        "uio[5]": "Tied Low",
        "uio[6]": "Tied Low",
        "uio[7]": "Tied Low"
      }
    },
    {
      "macro": "tt_um_biased_trng",
      "address": 260,
      "title": "Variable Duty-Cycle TRNG",
      "author": "Thomas Pluck",
      "description": "Generates a random bit with a given probability with a special ring oscillator",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThomasPluck/tt04-biased-trng",
      "commit": "e192163eb222b2dbb13b36f31834ca18d6295d72",
      "pinout": {
        "ui_in[0]": "signal",
        "ui_in[1]": "control 1",
        "ui_in[2]": "control 2",
        "ui_in[3]": "control 3",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "sample",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_bulls_and_cows",
      "address": 6,
      "title": "The Bulls and Cows game",
      "author": "Giorgos Dimitrakopoulos",
      "description": "An implementation of the Bulls and Cows game",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gdimitrak/Bulls-and-Cows",
      "commit": "a14d74fcb2ef5fcd7f412b1276fea23d88f316f4",
      "pinout": {
        "ui_in[0]": "I0/Number1[0]",
        "ui_in[1]": "I1/Number1[1]",
        "ui_in[2]": "I2/Number1[2]",
        "ui_in[3]": "I3/Number2[0]",
        "ui_in[4]": "I4/Number2[1]",
        "ui_in[5]": "I5/Number2[2]",
        "ui_in[6]": "I6/Save the secret number",
        "ui_in[7]": "",
        "uo_out[0]": "O0/bulls[1]/segment a",
        "uo_out[1]": "O1/bulls[2]/segment b",
        "uo_out[2]": "O2/cows[0]/segment c",
        "uo_out[3]": "O3/cows[1]/segment d",
        "uo_out[4]": "O4/cows[2]/segment e",
        "uo_out[5]": "O5/bulls[0]/segment f",
        "uo_out[6]": "O6/bulls[3]/segment g",
        "uo_out[7]": "O7/cows[3]/dot",
        "uio[0]": "I7/Number3[0]",
        "uio[1]": "I8/Number3[1]",
        "uio[2]": "I9/Number3[2]",
        "uio[3]": "I10/Number4[0]",
        "uio[4]": "I11/Number4[1]",
        "uio[5]": "I12/Number4[2]",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ccollatz_SergioOliveros",
      "address": 229,
      "title": "Collatz Conjecture",
      "author": "Sergio Sebastian Oliveros Sepulveda",
      "description": "A circuit that computes the Collatz orbit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Sergio-Oliveros/tt04-submission-Collatz",
      "commit": "1b52ef1f59e64265941d1febfadc56836f6d2fa9",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "ena",
        "ui_in[2]": "rst_n",
        "ui_in[3]": "Number to test",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "Process indicator (busy bit)",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "Number of iterations to reach 1 (8 bits number)",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chip_SP_Soy_de_Zacapa",
      "address": 214,
      "title": "ASCII Text Printer Circuit",
      "author": "Noel Prado, Daniel Mundo, Angel Orellana and Julio Lopez.",
      "description": "A circuit that is able to print two different texts. It utilizes 8 output pins, each character is printed as the ASCII character described in 8 bits.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NoelFPB/Soy_de_Zacapa",
      "commit": "32511838179bc2b43ff8474e2c64cecf0f73f4f6",
      "pinout": {
        "ui_in[0]": "select bit 0",
        "ui_in[1]": "select bit 1",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "Bit 0",
        "uo_out[1]": "Bit 1",
        "uo_out[2]": "Bit 2",
        "uo_out[3]": "Bit 3",
        "uo_out[4]": "Bit 4",
        "uo_out[5]": "Bit 5",
        "uo_out[6]": "Bit 6",
        "uo_out[7]": "Bit 7",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chip_SP_measure_delay",
      "address": 213,
      "title": "Multi stage path for delay measurements.",
      "author": "Daniel Mundo, Noel Prado, Victor Vanegas",
      "description": "Verilog coding for cascaded not gates connected as a ring oscillator. After running the flow it is observed that the synthesizer does not support combinatorial feedback and that it collapsed several cascaded not gates into buffers. The original purpose for the ring oscillator will not be achieved but it is observed that synthesized circuit is still useful for measuring some gate delays that can be compared to theoretical calculations for educational purposes.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mun19508/tt04-measure_delay",
      "commit": "3f86c8aecc82df76d71cf85b2fc654489ad44b2a",
      "pinout": {
        "ui_in[0]": "EN (ui_in[0])",
        "ui_in[1]": "EN_2 (ui_in[1])",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "Tap 1 (uo_out[0])",
        "uo_out[1]": "Tap 2 (uo_out[1])",
        "uo_out[2]": "Tap 3 (uo_out[2])",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chip_rom",
      "address": 0,
      "title": "Chip ROM",
      "author": "Uri Shaked",
      "description": "ROM with information about the chip",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt-chip-rom",
      "commit": "a3b2f09878d66b03ba70130cf9389eb3c0ea957f",
      "pinout": {
        "ui_in[0]": "addr[0]",
        "ui_in[1]": "addr[1]",
        "ui_in[2]": "addr[2]",
        "ui_in[3]": "addr[3]",
        "ui_in[4]": "addr[4]",
        "ui_in[5]": "addr[5]",
        "ui_in[6]": "addr[6]",
        "ui_in[7]": "addr[7]",
        "uo_out[0]": "data[0]",
        "uo_out[1]": "data[1]",
        "uo_out[2]": "data[2]",
        "uo_out[3]": "data[3]",
        "uo_out[4]": "data[4]",
        "uo_out[5]": "data[5]",
        "uo_out[6]": "data[6]",
        "uo_out[7]": "data[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chiplet_jtag",
      "address": 357,
      "title": "Poor Person's Boundary Scan",
      "author": "Verneri Hirvonen",
      "description": "JTAG test logic with a 8-bit TDR for 'external' boundary scan",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/chiplet/tt04-jtag",
      "commit": "8b18aa0a14114f1a1d2bc4524e0863363344e462",
      "pinout": {
        "ui_in[0]": "boundary_scan input 0",
        "ui_in[1]": "boundary_scan input 1",
        "ui_in[2]": "boundary_scan input 2",
        "ui_in[3]": "boundary_scan input 3",
        "ui_in[4]": "boundary_scan input 4",
        "ui_in[5]": "boundary_scan input 5",
        "ui_in[6]": "boundary_scan input 6",
        "ui_in[7]": "boundary_scan input 7",
        "uo_out[0]": "boundary_scan output 0",
        "uo_out[1]": "boundary_scan output 1",
        "uo_out[2]": "boundary_scan output 2",
        "uo_out[3]": "boundary_scan output 3",
        "uo_out[4]": "boundary_scan output 4",
        "uo_out[5]": "boundary_scan output 5",
        "uo_out[6]": "boundary_scan output 6",
        "uo_out[7]": "boundary_scan output 7",
        "uio[0]": "JTAG TCK (hardcoded input)",
        "uio[1]": "JTAG TMS (hardcoded input)",
        "uio[2]": "JTAG TDI (hardcoded input)",
        "uio[3]": "JTAG TRSTn (hardcoded input)",
        "uio[4]": "JTAG TDO (hardcoded output)",
        "uio[5]": "JTAG state machine in state Test-Logic Reset (hardcoded output)",
        "uio[6]": "Blink pin 0 (bidirectional)",
        "uio[7]": "Blink pin 1 (bidirectional)"
      }
    },
    {
      "macro": "tt_um_ciro",
      "address": 308,
      "title": "Later",
      "author": "Ciro Bermudez",
      "description": "Later",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cirofabianbermudez/tt04-submission-template_ciro",
      "commit": "f270d1da6e8c388c643d4f4dd171e767762dc6b0",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_control",
      "address": 309,
      "title": "Contador con carga",
      "author": "Cristian Torres",
      "description": "Es un contador del 0 al 16 con carga",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cristiantorresg21/tt04-submission-Ucontrol",
      "commit": "31e241c393ffa78d468c66db301a19508b6a7a9f",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "rst",
        "ui_in[2]": "ini",
        "ui_in[3]": "ent",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "sal",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_currymottled",
      "address": 20,
      "title": "Configurable PID Block",
      "author": "Maxim Vasic",
      "description": "It was meant to be a final project, but that was undercut.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/currymottled/tt04-pidcontroller-currymottled",
      "commit": "a6ace278bb2b25e59239cdb4df67ea319d364c69",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "Error/Control",
        "uio[1]": "Error/Control",
        "uio[2]": "Error/Control",
        "uio[3]": "Error/Control",
        "uio[4]": "Error/Control",
        "uio[5]": "Error/Control",
        "uio[6]": "SDA",
        "uio[7]": "SCL"
      }
    },
    {
      "macro": "tt_um_dandy_dance",
      "address": 96,
      "title": "Dandy VGA",
      "author": "Blaise Saunders",
      "description": "Serial vector graphics adapter",
      "clock_hz": 10000000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/DavidoRotho/tt04-davidroth-dandy-vga",
      "commit": "d3ce7431b142ba8ea9007b37121f8ac9d029a00d",
      "pinout": {
        "ui_in[0]": "UART RX input, 921600 baud input. Tested with Teensy 4.1",
        "ui_in[1]": "Safe/Unsafe mode toggle, unsafe high. Whether or not to wait while",
        "ui_in[2]": "binary graphics clock divider for compensating for slow DAC drive speed [2:7]",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "binary X axis output [7:0]",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "binary Y axis output [7:0]",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_darkfsegura_collatz",
      "address": 292,
      "title": "uDATAPATH_Collatz",
      "author": "CMUA F.Segura-Quijano, J.S.Moya",
      "description": "uDATAPATH_Collatz",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/darkfsegura/tt04-verilog-cmua-uDATAPATH_Collatz",
      "commit": "daa909aa6d6a593d189138ced9c6a59d7b310cdb",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "rst_n",
        "ui_in[2]": "BB_SYSTEM_data_InBUS[0]",
        "ui_in[3]": "BB_SYSTEM_data_InBUS[1]",
        "ui_in[4]": "BB_SYSTEM_data_InBUS[2]",
        "ui_in[5]": "BB_SYSTEM_data_InBUS[3]",
        "ui_in[6]": "BB_SYSTEM_data_InBUS[4]",
        "ui_in[7]": "BB_SYSTEM_data_InBUS[5]",
        "uo_out[0]": "BB_SYSTEM_data_OutBUS[0]",
        "uo_out[1]": "BB_SYSTEM_data_OutBUS[1]",
        "uo_out[2]": "BB_SYSTEM_data_OutBUS[2]",
        "uo_out[3]": "BB_SYSTEM_data_OutBUS[3]",
        "uo_out[4]": "BB_SYSTEM_data_OutBUS[4]",
        "uo_out[5]": "BB_SYSTEM_data_OutBUS[5]",
        "uo_out[6]": "BB_SYSTEM_data_OutBUS[6]",
        "uo_out[7]": "BB_SYSTEM_data_OutBUS[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_db_PWM",
      "address": 224,
      "title": "Simple PWM Generator",
      "author": "Daniel Barrios",
      "description": "Generates a PWM signal with a duty cycle that can be varied with inputs pins",
      "clock_hz": 5000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DanielBarrios2190/tt04-submission-pwmgen",
      "commit": "c0e5e71ff6a88d25d9a27905dc62f4b1579a6d28",
      "pinout": {
        "ui_in[0]": "Duty[0]",
        "ui_in[1]": "Duty[1]",
        "ui_in[2]": "Duty[2]",
        "ui_in[3]": "Duty[3]",
        "ui_in[4]": "Duty[4]",
        "ui_in[5]": "Duty[5]",
        "ui_in[6]": "Duty[6]",
        "ui_in[7]": "Duty[7]",
        "uo_out[0]": "PWM output",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "Bit selector [0]",
        "uio[1]": "Bit selector [1]",
        "uio[2]": "Bit selector [2]",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_dcb277_ALU",
      "address": 22,
      "title": "4-bit ALU",
      "author": "David Bertuch",
      "description": "",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DavidDavidDavidDavidDavidDavidDavid/tt04-verilog",
      "commit": "c82f54c8fc35815ca2c38528cc21bbb240d813d6",
      "pinout": {
        "ui_in[0]": "compare bit 11",
        "ui_in[1]": "compare bit 12",
        "ui_in[2]": "compare bit 13",
        "ui_in[3]": "compare bit 14",
        "ui_in[4]": "compare bit 15",
        "ui_in[5]": "compare bit 16",
        "ui_in[6]": "compare bit 17",
        "ui_in[7]": "compare bit 18",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_devinatkin_arduino_vga",
      "address": 16,
      "title": "VGA Output for Arduino",
      "author": "Devin Atkin",
      "description": "The final goal of this project is to create an arduino VGA driver. Currently it's nothing",
      "clock_hz": 25175000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/devinatkin/tt04-arduino-gpu-vga",
      "commit": "efa9cc7b21f7e541114130dd2a897eaf659c3354",
      "pinout": {
        "ui_in[0]": "SPI MOSI",
        "ui_in[1]": "SPI CLK",
        "ui_in[2]": "SPI CS",
        "ui_in[3]": "",
        "ui_in[4]": "btn_up",
        "ui_in[5]": "btn_down",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "VGA HSync",
        "uo_out[1]": "VGA VSync",
        "uo_out[2]": "VGA Red 0",
        "uo_out[3]": "VGA Red 1",
        "uo_out[4]": "VGA Green 0",
        "uo_out[5]": "VGA Green 1",
        "uo_out[6]": "VGA Blue 0",
        "uo_out[7]": "VGA Blue 1",
        "uio[0]": "SPI MISO",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_divider_urielcho",
      "address": 320,
      "title": "clock divider",
      "author": "Uriel jaramillo",
      "description": "divide the clock ",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/urielcho/tt04-submission-divider",
      "commit": "1edfff7c8fd3cb916f664691aa1a429bb50a9324",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "cout1",
        "uo_out[1]": "cout2",
        "uo_out[2]": "cout3",
        "uo_out[3]": "cout4",
        "uo_out[4]": "cout5",
        "uo_out[5]": "cout6",
        "uo_out[6]": "cout7",
        "uo_out[7]": "cout8",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_dlmiles_muldiv4",
      "address": 325,
      "title": "MULDIV unit (4-bit signed/unsigned)",
      "author": "Darryl Miles",
      "description": "Combinational Multiply and Divide Unit (signed and unsigned)",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dlmiles/tt04-muldiv4",
      "commit": "1be4eb1afe68dd31b53dc008477c6746e870d557",
      "pinout": {
        "ui_in[0]": "MUL A[0], DIV Dend[0]",
        "ui_in[1]": "MUL A[1], DIV Dend[1]",
        "ui_in[2]": "MUL A[2], DIV Dend[2]",
        "ui_in[3]": "MUL A[3], DIV Dend[3]",
        "ui_in[4]": "MUL B[0], DIV Dsor[0]",
        "ui_in[5]": "MUL B[1], DIV Dsor[1]",
        "ui_in[6]": "MUL B[2], DIV Dsor[2]",
        "ui_in[7]": "MUL B[3], DIV Dsor[3]",
        "uo_out[0]": "MUL P[0], DIV Q[0]",
        "uo_out[1]": "MUL P[1], DIV Q[1]",
        "uo_out[2]": "MUL P[2], DIV Q[2]",
        "uo_out[3]": "MUL P[3], DIV Q[3]",
        "uo_out[4]": "MUL P[4], DIV R[0]",
        "uo_out[5]": "MUL P[5], DIV R[1]",
        "uo_out[6]": "MUL P[6], DIV R[2]",
        "uo_out[7]": "MUL P[7], DIV R[3]",
        "uio[0]": "(unused)",
        "uio[1]": "(unused)",
        "uio[2]": "(unused)",
        "uio[3]": "(unused)",
        "uio[4]": "DIV error overflow (output only)",
        "uio[5]": "DIV error divide-by-zero (output only)",
        "uio[6]": "OPSIGNED mode (input only)",
        "uio[7]": "MULDIV mode (input only)"
      }
    },
    {
      "macro": "tt_um_dlmiles_tt04_poc_usbdev",
      "address": 54,
      "title": "USB Device",
      "author": "Darryl Miles",
      "description": "USB FullSpeed/LowSpeed device (proof-of-concept)",
      "clock_hz": 48000000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/dlmiles/tt04-poc-usbdev",
      "commit": "164c63492f1533656d58531545f0934cfb2c02d6",
      "pinout": {
        "ui_in[0]": "tt2wb input bit0",
        "ui_in[1]": "tt2wb input bit1",
        "ui_in[2]": "tt2wb input bit2",
        "ui_in[3]": "tt2wb input bit3",
        "ui_in[4]": "tt2wb input bit4",
        "ui_in[5]": "tt2wb input bit5",
        "ui_in[6]": "tt2wb input bit6",
        "ui_in[7]": "tt2wb input bit7",
        "uo_out[0]": "tt2wb output bit0",
        "uo_out[1]": "tt2wb output bit1",
        "uo_out[2]": "tt2wb output bit2",
        "uo_out[3]": "tt2wb output bit3",
        "uo_out[4]": "tt2wb output bit4",
        "uo_out[5]": "tt2wb output bit5",
        "uo_out[6]": "tt2wb output bit6",
        "uo_out[7]": "tt2wb output bit7",
        "uio[0]": "USB D+ (bidi)",
        "uio[1]": "USB D- (bidi)",
        "uio[2]": "Interrupt (output only)",
        "uio[3]": "Phy Clock 48MHz (input only)",
        "uio[4]": "tt2wb control ACK (output only)",
        "uio[5]": "tt2wb control CMD bit0 (input only)",
        "uio[6]": "tt2wb control CMD bit1 (input only)",
        "uio[7]": "tt2wb control CMD bit2 (input only)"
      }
    },
    {
      "macro": "tt_um_eldritch_pwm_peripheral",
      "address": 48,
      "title": "OpenSource PWM Peripheral",
      "author": "Medinceanu Paul-Catalin",
      "description": "The purpose of this project is to develop an Opensource PWM Peripheral with advanced functions and configurations. These capabilities are needed mostly in Power Electronics, where fine tuning of the control signals is crucial. The two standout functions that I have implemented are the deadband and the synchronization between counters.",
      "clock_hz": 10000000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/EldritchIHC/tt04-pwm-peripheral",
      "commit": "cd634bb3f2686c8bede5ee8a03a5fb96420a1c2f",
      "pinout": {
        "ui_in[0]": "i_address[5]",
        "ui_in[1]": "i_address[4]",
        "ui_in[2]": "i_address[3]",
        "ui_in[3]": "i_address[2]",
        "ui_in[4]": "i_address[1]",
        "ui_in[5]": "i_address[0]",
        "ui_in[6]": "",
        "ui_in[7]": "i_write_en",
        "uo_out[0]": "",
        "uo_out[1]": "",
        "uo_out[2]": "o_pwm1A",
        "uo_out[3]": "o_pwm1B",
        "uo_out[4]": "o_pwm2A",
        "uo_out[5]": "o_pwm2B",
        "uo_out[6]": "o_pwm3A",
        "uo_out[7]": "o_pwm3B",
        "uio[0]": "io_data[7]",
        "uio[1]": "io_data[6]",
        "uio[2]": "io_data[5]",
        "uio[3]": "io_data[4]",
        "uio[4]": "io_data[3]",
        "uio[5]": "io_data[2]",
        "uio[6]": "io_data[1]",
        "uio[7]": "io_data[0]"
      }
    },
    {
      "macro": "tt_um_f_hal_fft",
      "address": 103,
      "title": "fft-4-tt",
      "author": "Foivos Chaloftis",
      "description": "A simple FFT Calculator downscaled for deployment with the Tiny Tapeout 04 Physical PCB",
      "clock_hz": 1000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/f-hal/fft-4-tt",
      "commit": "4bf2cc0b615fc95e25e5aa4f390351f4f41613d0",
      "pinout": {
        "ui_in[0]": "imaginary_in[0]",
        "ui_in[1]": "imaginary_in[1]",
        "ui_in[2]": "imaginary_in[2]",
        "ui_in[3]": "imaginary_in[3]",
        "ui_in[4]": "real_in[0]",
        "ui_in[5]": "real_in[1]",
        "ui_in[6]": "real_in[2]",
        "ui_in[7]": "real_in[3]",
        "uo_out[0]": "segment a/imaginary_out[0]",
        "uo_out[1]": "segment b/imaginary_out[1]",
        "uo_out[2]": "segment c/imaginary_out[2]",
        "uo_out[3]": "segment d/imaginary_out[3]",
        "uo_out[4]": "segment e/real_out[0]",
        "uo_out[5]": "segment f/real_out[1]",
        "uo_out[6]": "segment g/real_out[2]",
        "uo_out[7]": "dot/real_out[3]",
        "uio[0]": "mode_change",
        "uio[1]": "enter",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_fabian",
      "address": 322,
      "title": "Later",
      "author": "Fabian",
      "description": "Later",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cirofabianbermudezmarquez/tt04-submission-template_fabian",
      "commit": "2458bacc47a4b7471335bda6d5281d83634b2c2e",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_factory_test",
      "address": 1,
      "title": "TinyTapeout 04 Factory Test",
      "author": "Sylvain Munaut",
      "description": "Factory test module",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt04-factory-test",
      "commit": "4196cf3a76a48d2132e11cc5f77c2482f0e1cf62",
      "pinout": {
        "ui_in[0]": "sel / data_i[0]",
        "ui_in[1]": "data_i[1]",
        "ui_in[2]": "data_i[2]",
        "ui_in[3]": "data_i[3]",
        "ui_in[4]": "data_i[4]",
        "ui_in[5]": "data_i[5]",
        "ui_in[6]": "data_i[6]",
        "ui_in[7]": "data_i[7]",
        "uo_out[0]": "data_o[0] (when sel=0) / counter_o[0] (when sel=1)",
        "uo_out[1]": "data_o[1] (when sel=0) / counter_o[1] (when sel=1)",
        "uo_out[2]": "data_o[2] (when sel=0) / counter_o[2] (when sel=1)",
        "uo_out[3]": "data_o[3] (when sel=0) / counter_o[3] (when sel=1)",
        "uo_out[4]": "data_o[4] (when sel=0) / counter_o[4] (when sel=1)",
        "uo_out[5]": "data_o[5] (when sel=0) / counter_o[5] (when sel=1)",
        "uo_out[6]": "data_o[6] (when sel=0) / counter_o[6] (when sel=1)",
        "uo_out[7]": "data_o[7] (when sel=0) / counter_o[7] (when sel=1)",
        "uio[0]": "counter_o[0]",
        "uio[1]": "counter_o[1]",
        "uio[2]": "counter_o[2]",
        "uio[3]": "counter_o[3]",
        "uio[4]": "counter_o[4]",
        "uio[5]": "counter_o[5]",
        "uio[6]": "counter_o[6]",
        "uio[7]": "counter_o[7]"
      }
    },
    {
      "macro": "tt_um_fifo_stevej",
      "address": 177,
      "title": "8-bit FIFO with depth 16.",
      "author": "Steve Jenson",
      "description": "8-bit FIFO with depth 16 and FWFT read operation",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/stevej/tt04-fifo-stevej",
      "commit": "0b4ead45fb7adf762f8cf830af0af1bc399713c5",
      "pinout": {
        "ui_in[0]": "item[0]",
        "ui_in[1]": "item[1]",
        "ui_in[2]": "item[2]",
        "ui_in[3]": "item[3]",
        "ui_in[4]": "item[4]",
        "ui_in[5]": "item[5]",
        "ui_in[6]": "item[6]",
        "ui_in[7]": "item[7]",
        "uo_out[0]": "item[0]",
        "uo_out[1]": "item[1]",
        "uo_out[2]": "item[2]",
        "uo_out[3]": "item[3]",
        "uo_out[4]": "item[4]",
        "uo_out[5]": "item[5]",
        "uo_out[6]": "item[6]",
        "uo_out[7]": "item[7]",
        "uio[0]": "empty (read-only)",
        "uio[1]": "full (read-only)",
        "uio[2]": "underflow (read-only)",
        "uio[3]": "overflow (read-only)",
        "uio[4]": "almost_empty (read-only)",
        "uio[5]": "almost_full (read-only)",
        "uio[6]": "write_enable (set this high to write a value)",
        "uio[7]": "read_enable (set this high to read the latest entry from the FIFO)"
      }
    },
    {
      "macro": "tt_um_fing_synchronizer_hga",
      "address": 215,
      "title": "Clock synchronizer",
      "author": "Mateo Guerrero Gonzalo Hernandez Cesar Azambuya Francisco Veirano",
      "description": "Testing different ways of clock synchronizers to avoid metastability problems.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/pacoveirano/tt04-synchronizer",
      "commit": "93995bb0afee626cb8a735ed4a443f6c9224abc9",
      "pinout": {
        "ui_in[0]": "clk, clock of the first clock domain.",
        "ui_in[1]": "clk_2 connected to ui_in[0]. This is the second clock domain.",
        "ui_in[2]": "sel connected to ui_in[3:1]. This the selector tu select the different output between the different blocks.",
        "ui_in[3]": "stb connected ui_in[4]. This is the pulse needed to synchronize with the second block.",
        "ui_in[4]": "pulse_in connected to ui_in[5]. This is the pulse needed to synchronize with the third block.",
        "ui_in[5]": "rst_n. Reset of the system.",
        "ui_in[6]": "ena. Will go high when the design is enabled.",
        "ui_in[7]": "enable_block connected to ui_in[6]. This signal is used to enable all subblocks.",
        "uo_out[0]": "data_out connected to uo_out. This is the data output of the different block depending of the value of sel.",
        "uo_out[1]": "When the input sel = 0 you will see the output of the first FF (triggered by CLK1).",
        "uo_out[2]": "When the input sel = 1 you will see the output of the second FF (triggered by CLK2).",
        "uo_out[3]": "When the input sel = 2 you will see the first block using to synchronize (triggered by CLK2).",
        "uo_out[4]": "When the input sel = 3 you will see the second block using to synchronize (triggered by CLK1 and CLK2).",
        "uo_out[5]": "When the input sel = 4 you will see the third block using to synchronize (triggered by CLK1 and CLK2).",
        "uo_out[6]": "When the input sel = 5 you will see the output {stb_in, ctrl, stb_out, A, B1, B2, B3, pulse_out}, the intermediate signals of the different blocks.",
        "uo_out[7]": "When the input sel = 6 you will see the output {0, 0, ena_A, ena_1, ena_2, ena_3, done} the enables of the different blocks.",
        "uio[0]": "data_in connected to uio_in, set as input. This is the data input to be synchronized.",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_fir_top",
      "address": 199,
      "title": "FIR Filter",
      "author": "Daniel Gonz\u00e1lez",
      "description": "FIR Filter with 4 coefficients",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DanielG1010/verilog-template",
      "commit": "885950f857aa10cab86a02537d415d36be6525d8",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_fm_transmitter",
      "address": 195,
      "title": "FM Transmitter",
      "author": "Jan Kral (<jan.kral@vut.cz>), Ondrej Kolar (<ondrej.kolar@vut.cz>)",
      "description": "FM transmitter with I2S input",
      "clock_hz": 50000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jankralx/tt04-fm-transmitter",
      "commit": "c8411b9087fa8cc9aa896b9406c062e76f66e0ff",
      "pinout": {
        "ui_in[0]": "i2s_clk",
        "ui_in[1]": "i2s_din",
        "ui_in[2]": "i2s_ws",
        "ui_in[3]": "i2s_ws_align_pin",
        "ui_in[4]": "audio_chan_sel_pin",
        "ui_in[5]": "multiply_sel_pin",
        "ui_in[6]": "dith_disable_pin",
        "ui_in[7]": "",
        "uo_out[0]": "dac[0] (LSB)",
        "uo_out[1]": "dac[1]",
        "uo_out[2]": "dac[2]",
        "uo_out[3]": "dac[3] (MSB)",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "spi_clk (in)",
        "uio[5]": "spi_csn (in)",
        "uio[6]": "spi_mosi (in)",
        "uio[7]": "spi_miso (inout)"
      }
    },
    {
      "macro": "tt_um_htfab_rotfpga2",
      "address": 197,
      "title": "ROTFPGA v2",
      "author": "htfab",
      "description": "A reconfigurable logic circuit made of identical rotatable tiles",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/htfab/rotfpga2",
      "commit": "369dae341d4d6d73c76958e78849efbda5640ebd",
      "pinout": {
        "ui_in[0]": "tile(0,0) left in",
        "ui_in[1]": "tile(0,1) left in",
        "ui_in[2]": "tile(0,2) left in",
        "ui_in[3]": "tile(0,3) left in",
        "ui_in[4]": "tile(0,4) left in",
        "ui_in[5]": "tile(0,5) left in",
        "ui_in[6]": "tile(0,6) left in",
        "ui_in[7]": "tile(0,7) left in",
        "uo_out[0]": "tile(7,0) right out",
        "uo_out[1]": "tile(7,1) right out",
        "uo_out[2]": "tile(7,2) right out",
        "uo_out[3]": "tile(7,3) right out",
        "uo_out[4]": "tile(7,4) right out",
        "uo_out[5]": "tile(7,5) right out",
        "uo_out[6]": "tile(7,6) right out",
        "uo_out[7]": "tile(7,7) right out",
        "uio[0]": "_scan enable_ input",
        "uio[1]": "_scan chain_ input",
        "uio[2]": "_configuration_ input bit 0",
        "uio[3]": "_configuration_ input bit 1",
        "uio[4]": "_loop breaker enable_ input",
        "uio[5]": "_loop breaker class_ input bit 0",
        "uio[6]": "_loop breaker class_ input bit 1",
        "uio[7]": "_scan chain_ output"
      }
    },
    {
      "macro": "tt_um_i2c",
      "address": 339,
      "title": "i2c_6 bits",
      "author": "Sergio Alejandro Rosales Nu\u00f1ez",
      "description": "i2c address 0x04",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/sergio7000/tt04-submission-template",
      "commit": "f98385f594e422a9d539d7bf4f4c254d75db02ee",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "rst",
        "ui_in[2]": "scl",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "data_from_master[0]",
        "uo_out[1]": "data_from_master[1]",
        "uo_out[2]": "data_from_master[2]",
        "uo_out[3]": "data_from_master[3]",
        "uo_out[4]": "data_from_master[4]",
        "uo_out[5]": "data_from_master[5]",
        "uo_out[6]": "ctrl",
        "uo_out[7]": "",
        "uio[0]": "sda_in",
        "uio[1]": "sda_out",
        "uio[2]": "data_to_master[0]",
        "uio[3]": "data_to_master[1]",
        "uio[4]": "data_to_master[2]",
        "uio[5]": "data_to_master[3]",
        "uio[6]": "data_to_master[4]",
        "uio[7]": "data_to_master[5]"
      }
    },
    {
      "macro": "tt_um_ja_TrafficLight",
      "address": 226,
      "title": "UIS Traffic Light",
      "author": "Jorge Eduardo Angarita P\u00e9rez",
      "description": "Traffic light control for LatinPractice Bootcamp at UIS",
      "clock_hz": 32768,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Gior-gio/tt04-submission-TrafficLight",
      "commit": "6791f441c6b55779ce311911ade50ed35fd41776",
      "pinout": {
        "ui_in[0]": "Start",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "Green Light",
        "uo_out[1]": "Yellow Light",
        "uo_out[2]": "Red Light",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_jayraj4021_SAP1_cpu",
      "address": 162,
      "title": "SAP-1 CPU",
      "author": "Jayraj Desai",
      "description": "Implementaion of Simple As Possible (SAP-1) CPU based on the book Digital Computer Electronics by Albert Paul Malvino and Jerald A. Brown ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jayraj4021/tt04-submission-jayraj4021-SAP1",
      "commit": "877044ec879dc2409f1d86ca5819b6bb13f97555",
      "pinout": {
        "ui_in[0]": "clk = input clock",
        "ui_in[1]": "rst_n = active low reset",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "uo_out[0]",
        "uo_out[1]": "uo_out[1]",
        "uo_out[2]": "uo_out[2]",
        "uo_out[3]": "uo_out[3]",
        "uo_out[4]": "uo_out[4]",
        "uo_out[5]": "uo_out[5]",
        "uo_out[6]": "uo_out[6]",
        "uo_out[7]": "uo_out[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_jk2102",
      "address": 161,
      "title": "Pulsed Plasma Thruster (PPT) Controller",
      "author": "Jurica Kundrata",
      "description": "Controller module which generates triggering pulses for a Pulse Plasma Thruster, configurable via I2C interface.",
      "clock_hz": 32768,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jk2102/tt04-submission-ppt-controller",
      "commit": "dba447263d971c3bc2cc275553e92de117611732",
      "pinout": {
        "ui_in[0]": "I2C address bit 0",
        "ui_in[1]": "I2C address bit 1",
        "ui_in[2]": "I2C address bit 2",
        "ui_in[3]": "I2C address bit 3",
        "ui_in[4]": "run_override",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "ON if pulse train HIGH",
        "uo_out[1]": "ON if pulse train HIGH",
        "uo_out[2]": "ON if pulse train HIGH",
        "uo_out[3]": "ON if pulse train HIGH",
        "uo_out[4]": "ON if pulse train HIGH",
        "uo_out[5]": "ON if pulse train HIGH",
        "uo_out[6]": "OFF if pulse train HIGH",
        "uo_out[7]": "div_clk",
        "uio[0]": "I2C SCL bus line",
        "uio[1]": "I2C SDA bus line",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_kpwebb_adder",
      "address": 368,
      "title": "rusty_adder",
      "author": "Kevin Webb",
      "description": "A (tiny) 8 bit adder built using RustHDL",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kpwebb/tt04-kpwebb-tinycan",
      "commit": "a997c084cca4557a896c348e7c80359b0eef66b6",
      "pinout": {
        "ui_in[0]": "input a bit 0",
        "ui_in[1]": "input a bit 1",
        "ui_in[2]": "input a bit 2",
        "ui_in[3]": "input a bit 3",
        "ui_in[4]": "input a bit 4",
        "ui_in[5]": "input a bit 5",
        "ui_in[6]": "input a bit 6",
        "ui_in[7]": "input a bit 7",
        "uo_out[0]": "a + b bit 0",
        "uo_out[1]": "a + b bit 1",
        "uo_out[2]": "a + b bit 2",
        "uo_out[3]": "a + b bit 3",
        "uo_out[4]": "a + b bit 4",
        "uo_out[5]": "a + b bit 5",
        "uo_out[6]": "a + b bit 6",
        "uo_out[7]": "a + b bit 7",
        "uio[0]": "input b bit 0",
        "uio[1]": "input b bit 1",
        "uio[2]": "input b bit 2",
        "uio[3]": "input b bit 3",
        "uio[4]": "input b bit 4",
        "uio[5]": "input b bit 5",
        "uio[6]": "input b bit 6",
        "uio[7]": "input b bit 7"
      }
    },
    {
      "macro": "tt_um_ks_pyamnihc",
      "address": 52,
      "title": "Karplus-Strong String Synthesis",
      "author": "Chinmay Patil",
      "description": "Plucked string sound synthesizer",
      "clock_hz": 256000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/pyamnihc/tt04-um-ks-pyamnihc",
      "commit": "400c09bf89a44b6aa30819eb9c1ab44f034740b1",
      "pinout": {
        "ui_in[0]": "~rst_n_prbs_15, ~rst_n_prbs_7",
        "ui_in[1]": "load_prbs_15, load_prbs_7",
        "ui_in[2]": "freeze_prbs_15",
        "ui_in[3]": "freeze_prbs_7",
        "ui_in[4]": "i2s_noise_sel",
        "ui_in[5]": "~rst_n_ks_string",
        "ui_in[6]": "pluck",
        "ui_in[7]": "NOT CONNECTED",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "sck_i",
        "uio[1]": "sdi_i",
        "uio[2]": "sdo_o",
        "uio[3]": "cs_ni",
        "uio[4]": "i2s_sck_o",
        "uio[5]": "i2s_ws_o",
        "uio[6]": "i2s_sd_o",
        "uio[7]": "prbs_15"
      }
    },
    {
      "macro": "tt_um_led_multiplexer_display",
      "address": 167,
      "title": "Led Multiplexer Display",
      "author": "Baciu Florin-George | BFG-e",
      "description": "Stores 4 characters and displays them on a 16x4 led matrix",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bfgelectronics/tt04-project",
      "commit": "4c4393dc8addfcbdb74a3a38cc918e9d3c9adcf6",
      "pinout": {
        "ui_in[0]": "input data 0",
        "ui_in[1]": "input data 1",
        "ui_in[2]": "input data 2",
        "ui_in[3]": "input data 3",
        "ui_in[4]": "input char position 0",
        "ui_in[5]": "input char position 1",
        "ui_in[6]": "load",
        "ui_in[7]": "",
        "uo_out[0]": "active column number 0",
        "uo_out[1]": "active column number 1",
        "uo_out[2]": "active column number 2",
        "uo_out[3]": "active column number 3",
        "uo_out[4]": "line output 0",
        "uo_out[5]": "line output 1",
        "uo_out[6]": "line output 2",
        "uo_out[7]": "line output 3",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_loopback",
      "address": 32,
      "title": "TinyTapeout 04 Loopback Test Module",
      "author": "Sylvain Munaut",
      "description": "Loopback test module",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt04-loopback",
      "commit": "013d60b94e330aedbe8622d331bd7caf1925ba77",
      "pinout": {
        "ui_in[0]": "in0",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "in4",
        "ui_in[5]": "in5",
        "ui_in[6]": "in6",
        "ui_in[7]": "in7",
        "uo_out[0]": "mirrors in0",
        "uo_out[1]": "mirrors in0",
        "uo_out[2]": "mirrors in0",
        "uo_out[3]": "mirrors in0",
        "uo_out[4]": "mirrors in0",
        "uo_out[5]": "mirrors in0",
        "uo_out[6]": "mirrors in0",
        "uo_out[7]": "the value of in4 & in5 & in6 & in7",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_losaias",
      "address": 198,
      "title": "Arithmetic logic unit of four operations between two 8-bit numbers",
      "author": "Alejandro Araya, Mar\u00eda Bogantes, Isa\u00edas Gonz\u00e1lez",
      "description": "Calculates addition, multiplication, logical xor and shift left operations between two numbers.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Iosaias/VLSI_Bootcamp",
      "commit": "ba0e4b0b34da54081fa68c0d0ff436728b2cf17d",
      "pinout": {
        "ui_in[0]": "op [1:0] (selects operation)",
        "ui_in[1]": "add_s [3:2]",
        "ui_in[2]": "add_op1 [5:4] (defines first operand direction)",
        "ui_in[3]": "add_op2 [7:6] (defines second operand direction)",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "alu_r [7:0] (operation result)",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "matrix_in [0:3] (keyboard data)",
        "uio[1]": "en_reg (if active, saves kayboard data in the register bank)",
        "uio[2]": "2bc [1:0] (two bit counter)",
        "uio[3]": "z (zero flag)",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_machinaut_systolic",
      "address": 119,
      "title": "AI Decelerator",
      "author": "machinaut",
      "description": "Systolic array for matrix multiplication",
      "clock_hz": 50000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/machinaut/tt04-machinaut-systolic",
      "commit": "3f0d3ce81b65f2706ee330c126fa9814df0a9266",
      "pinout": {
        "ui_in[0]": "Row Data In 0",
        "ui_in[1]": "Row Data In 1",
        "ui_in[2]": "Row Data In 2",
        "ui_in[3]": "Row Data In 3",
        "ui_in[4]": "Column Data In 0",
        "ui_in[5]": "Column Data In 1",
        "ui_in[6]": "Column Data In 2",
        "ui_in[7]": "Column Data In 3",
        "uo_out[0]": "Row Data Out 0",
        "uo_out[1]": "Row Data Out 1",
        "uo_out[2]": "Row Data Out 2",
        "uo_out[3]": "Row Data Out 3",
        "uo_out[4]": "Column Data Out 0",
        "uo_out[5]": "Column Data Out 1",
        "uo_out[6]": "Column Data Out 2",
        "uo_out[7]": "Column Data Out 3",
        "uio[0]": "Row Control Out",
        "uio[1]": "Col Control Out",
        "uio[2]": "Row Control In",
        "uio[3]": "Col Control In",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_marno_factorize",
      "address": 4,
      "title": "Number Factorizer",
      "author": "Marno van der Maas",
      "description": "Takes the input and computes its factors",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/marnovandermaas/tiny-factorizer",
      "commit": "dd5af897531e5ecd155423cbeb55b02ae1c91c31",
      "pinout": {
        "ui_in[0]": "Fist bit of number to factor",
        "ui_in[1]": "Second bit of number to factor",
        "ui_in[2]": "Third bit of number to factor",
        "ui_in[3]": "Fourth bit of number to factor",
        "ui_in[4]": "Fifth bit of number to factor",
        "ui_in[5]": "Sixth bit of number to factor",
        "ui_in[6]": "Seventh bit of number to factor",
        "ui_in[7]": "Eigth bit of number to factor",
        "uo_out[0]": "Segment a (hex)",
        "uo_out[1]": "Segment b (hex)",
        "uo_out[2]": "Segment c (hex)",
        "uo_out[3]": "Segment d (hex)",
        "uo_out[4]": "Segment e (hex)",
        "uo_out[5]": "Segment f (hex)",
        "uo_out[6]": "Segment g (hex)",
        "uo_out[7]": "Segment dot (is prime)",
        "uio[0]": "Is  2 a factor?",
        "uio[1]": "Is  3 a factor?",
        "uio[2]": "Is  5 a factor?",
        "uio[3]": "Is  7 a factor?",
        "uio[4]": "Is 11 a factor?",
        "uio[5]": "Is 13 a factor?",
        "uio[6]": "Is 17 a factor?",
        "uio[7]": "Is 19 a factor?"
      }
    },
    {
      "macro": "tt_um_mgyenik_bfcpu",
      "address": 118,
      "title": "BFCPU",
      "author": "Michael Yenik",
      "description": "Hardware BF CPU",
      "clock_hz": 50000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/mgyenik/tt04-mgyenik-bfcpu",
      "commit": "ba6aa28727eefaaac4d09d8af3940d3193943f3b",
      "pinout": {
        "ui_in[0]": "bus en",
        "ui_in[1]": "bus ack",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "bus rdy",
        "uo_out[1]": "bus ctrl bit 0",
        "uo_out[2]": "bus ctrl bit 1",
        "uo_out[3]": "bus type bit 0",
        "uo_out[4]": "bus type bit 1",
        "uo_out[5]": "bus type bit 2",
        "uo_out[6]": "halted",
        "uo_out[7]": "",
        "uio[0]": "bus bit 0",
        "uio[1]": "bus bit 1",
        "uio[2]": "bus bit 2",
        "uio[3]": "bus bit 3",
        "uio[4]": "bus bit 4",
        "uio[5]": "bus bit 5",
        "uio[6]": "bus bit 6",
        "uio[7]": "bus bit 7"
      }
    },
    {
      "macro": "tt_um_mjbella_led_matrix_driver",
      "address": 176,
      "title": "LED Matrix Driver",
      "author": "Michael Bella",
      "description": "Serial data input 8x8 common anode led matrix driver.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mjbella/tt04-led-matrix-driver",
      "commit": "f0f9c1eeb3ecfd3dd33b7f81892d7482ea83a1c4",
      "pinout": {
        "ui_in[0]": "compare bit 11",
        "ui_in[1]": "compare bit 12",
        "ui_in[2]": "compare bit 13",
        "ui_in[3]": "compare bit 14",
        "ui_in[4]": "compare bit 15",
        "ui_in[5]": "compare bit 16",
        "ui_in[6]": "compare bit 17",
        "ui_in[7]": "compare bit 18",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_mod_u_cnt_BCD",
      "address": 307,
      "title": "up-down counter with parallel load and BCD output",
      "author": "Diego Hern\u00e1n Gayt\u00e1n Rivas",
      "description": "This device is an up-down counter for numbers ranging from zero to fifteen, with options for enable, clear count, and parallel loading. The count updates at a rate of one second per increment or decrement.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DgaytanR/tt04-submission-template",
      "commit": "d5c4f94f7d3298546eb534d0a6fd24e97b158ea8",
      "pinout": {
        "ui_in[0]": "data in bit 0",
        "ui_in[1]": "data in bit 1",
        "ui_in[2]": "data in bit 2",
        "ui_in[3]": "data in bit 3",
        "ui_in[4]": "enable",
        "ui_in[5]": "syn_clear",
        "ui_in[6]": "up",
        "ui_in[7]": "load",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_morningjava_top",
      "address": 37,
      "title": "ChipTune",
      "author": "Wallace Everest",
      "description": "Vintage 8-bit sound generator",
      "clock_hz": 1789773,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/WallieEverest/tt04",
      "commit": "3a96e34ebd6c26e85b939d9ec51664e0690e3065",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "RX",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "Blink",
        "uo_out[1]": "Link",
        "uo_out[2]": "TX",
        "uo_out[3]": "PWM",
        "uo_out[4]": "Square1",
        "uo_out[5]": "Square2",
        "uo_out[6]": "Triangle",
        "uo_out[7]": "Noise",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_noritsuna_8bitcounter_AI",
      "address": 194,
      "title": "8bits Counter by AI",
      "author": "Noritsuna Imamura",
      "description": "This verilog code is generated by LLaMa2 on PC.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/noritsuna/tt04-tt_um_8bitcounter_AI",
      "commit": "4ddd8a76d8494e81572ab11bed7b73bfd7f7b1ed",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "counter bit 0",
        "uo_out[1]": "counter bit 1",
        "uo_out[2]": "counter bit 2",
        "uo_out[3]": "counter bit 3",
        "uo_out[4]": "counter bit 4",
        "uo_out[5]": "counter bit 5",
        "uo_out[6]": "counter bit 6",
        "uo_out[7]": "counter bit 7",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_onehot",
      "address": 310,
      "title": "onehot_decoder",
      "author": "Martin Gonzalez",
      "description": "this module is a 3bits onehot decoder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MartinGonzalez-N/tt04-onehot-MartinGonzalez-N",
      "commit": "98faa41e568725b9fb0877eed15fea4c70f487b4",
      "pinout": {
        "ui_in[0]": "in[0]",
        "ui_in[1]": "in[1]",
        "ui_in[2]": "in[2]",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "out[0]",
        "uo_out[1]": "out[1]",
        "uo_out[2]": "out[2]",
        "uo_out[3]": "out[3]",
        "uo_out[4]": "out[4]",
        "uo_out[5]": "out[5]",
        "uo_out[6]": "out[6]",
        "uo_out[7]": "out[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_phansel_laplace_lut",
      "address": 50,
      "title": "Experiment Number Six: Laplace LUT",
      "author": "Paul Hansel",
      "description": "ASCII ROM encoding the LaTeX characters needed to typeset the Laplace transforms of a few specialized functions.",
      "clock_hz": 1,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/phansel/tt04-experiment-number-six",
      "commit": "a36f7cbd6f7cf142ab073abec894d5a0f4e84a60",
      "pinout": {
        "ui_in[0]": "Address bit 0",
        "ui_in[1]": "Address bit 1",
        "ui_in[2]": "Address bit 2",
        "ui_in[3]": "Address bit 3",
        "ui_in[4]": "Address bit 4",
        "ui_in[5]": "Address bit 5",
        "ui_in[6]": "Character output enable",
        "ui_in[7]": "Clock divider disable",
        "uo_out[0]": "RHS_BIT_0",
        "uo_out[1]": "RHS_BIT_1",
        "uo_out[2]": "RHS_BIT_2",
        "uo_out[3]": "RHS_BIT_3",
        "uo_out[4]": "RHS_BIT_4",
        "uo_out[5]": "RHS_BIT_5",
        "uo_out[6]": "RHS_BIT_6",
        "uo_out[7]": "RHS_BIT_7",
        "uio[0]": "LHS_BIT_0",
        "uio[1]": "LHS_BIT_1",
        "uio[2]": "LHS_BIT_2",
        "uio[3]": "LHS_BIT_3",
        "uio[4]": "LHS_BIT_4",
        "uio[5]": "LHS_BIT_5",
        "uio[6]": "LHS_BIT_6",
        "uio[7]": "LHS_BIT_7"
      }
    },
    {
      "macro": "tt_um_pong_neopixel",
      "address": 247,
      "title": "Angardo's pong",
      "author": "Angel Orellana",
      "description": "Is a pong game",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Julio18211/tt04-pong",
      "commit": "59442d31131b691b6488e76d514f40c34234d8d8",
      "pinout": {
        "ui_in[0]": "start",
        "ui_in[1]": "p1_up",
        "ui_in[2]": "p1_down",
        "ui_in[3]": "p2_up",
        "ui_in[4]": "p2_down",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "driver_neopixel",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_priority_decoder_Juan_Garcial",
      "address": 336,
      "title": "Priority e",
      "author": "Juan Carlos Garcia Lopez",
      "description": "7 SEGMENTS CLOCK",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JUAN-GALO/tt04-submission-template",
      "commit": "8b35a1243f0592d4a455955a136616cf0ac36a53",
      "pinout": {
        "ui_in[0]": "data_in",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "data_out",
        "uo_out[1]": "Valid",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_pwl_RaulprTech",
      "address": 321,
      "title": "reciprocal",
      "author": "raul pacheco rodriguez",
      "description": "module reciprocal ",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RaulprTech/tt04-submission-pwl",
      "commit": "be05a657b365919885d484045ce893328a090450",
      "pinout": {
        "ui_in[0]": "in",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "out",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_pwm",
      "address": 212,
      "title": "Generador de PWM",
      "author": "Rodrigo Garcia",
      "description": "This is PWM generator",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gar19085/tt04-PWM",
      "commit": "24dd22f1f59573bd9fae7b9a3c841da1bdfa5d69",
      "pinout": {
        "ui_in[0]": "increase_duty",
        "ui_in[1]": "decrease_duty",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "out_pwm",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_quardinlyttle_top",
      "address": 355,
      "title": "AQALU",
      "author": "Artin Ghanaatpisheh-Sanani and Quardin Lyttle ",
      "description": "2 bit ALU with 4 Bit Opcode",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/quardinlyttle/tt04-AQALU",
      "commit": "fc72fa81a9384e9668a7ae334a9fbb669ce4ac14",
      "pinout": {
        "ui_in[0]": "OpCode 0",
        "ui_in[1]": "OpCode 1",
        "ui_in[2]": "OpCode 2",
        "ui_in[3]": "OpCode 3",
        "ui_in[4]": "B 0",
        "ui_in[5]": "B 1",
        "ui_in[6]": "A 0",
        "ui_in[7]": "A 1",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "Output bit 0",
        "uio[1]": "Output bit 1",
        "uio[2]": "Output bit 2",
        "uio[3]": "Output bit 3",
        "uio[4]": "Output bit 4",
        "uio[5]": "Output bit 5",
        "uio[6]": "Output bit 6",
        "uio[7]": "Output bit 7"
      }
    },
    {
      "macro": "tt_um_rebot449_lingret_ALU_Top",
      "address": 343,
      "title": "Simple ALU",
      "author": "Rebot449",
      "description": "A simple ALU with only 6 instructions",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Rebot449/tt04-submission-template",
      "commit": "5f4e321dca821b7561ab6314e88e9eeb442fcb3f",
      "pinout": {
        "ui_in[0]": "i_instruction //ALU instruction, 8 bit wide input",
        "ui_in[1]": "i_data_0 // Data input 0, 8 bit wide input",
        "ui_in[2]": "i_data_1 // Data input 1, 8 bit wide input",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "o_result //ALU data output, 8 bit wide",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rejunity_telluride2023_neuron",
      "address": 359,
      "title": "LIF Neuron, Telluride 2023",
      "author": "Paola Vitolo, Andrew Wabnitz, ReJ aka Renaldas Zioma",
      "description": "Standalone test for a Binarized Leaky Integrate and Fire neuron that is part of the larger experimental design from Telluride Neuromorphic Workshop 2023",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt04-LIF-neuron-telluride2023",
      "commit": "e7b473e67a3e38cf5c82f6efed2d37a1e7f7ea39",
      "pinout": {
        "ui_in[0]": "input1 / weight1",
        "ui_in[1]": "input2 / weight2",
        "ui_in[2]": "input3 / weight3",
        "ui_in[3]": "input4 / weight4",
        "ui_in[4]": "input5 / weight5",
        "ui_in[5]": "input6 / weight6",
        "ui_in[6]": "input7 / weight7",
        "ui_in[7]": "input8 / weight8",
        "uo_out[0]": "spike",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rgb_mixer",
      "address": 23,
      "title": "RGB Mixer",
      "author": "Matt Venn",
      "description": "Use 3 rotary encoder to control 3 PWM generators",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt04-rgb-mixer",
      "commit": "b30370a9b7b1421112cd8c3c1d44dcf9c65429ee",
      "pinout": {
        "ui_in[0]": "encoder 0 pin a",
        "ui_in[1]": "encoder 0 pin b",
        "ui_in[2]": "encoder 1 pin a",
        "ui_in[3]": "encoder 1 pin b",
        "ui_in[4]": "encoder 2 pin a",
        "ui_in[5]": "encoder 2 pin b",
        "ui_in[6]": "n/a",
        "ui_in[7]": "n/a",
        "uo_out[0]": "pwm 0",
        "uo_out[1]": "pwm 1",
        "uo_out[2]": "pwm 2",
        "uo_out[3]": "n/a",
        "uo_out[4]": "n/a",
        "uo_out[5]": "n/a",
        "uo_out[6]": "n/a",
        "uo_out[7]": "n/a",
        "uio[0]": "n/a",
        "uio[1]": "n/a",
        "uio[2]": "n/a",
        "uio[3]": "n/a",
        "uio[4]": "n/a",
        "uio[5]": "n/a",
        "uio[6]": "n/a",
        "uio[7]": "n/a"
      }
    },
    {
      "macro": "tt_um_riceshelley_tinyFPGA",
      "address": 117,
      "title": "Grain-Flex-FPGA",
      "author": "Rice Shelley",
      "description": "FPGA designed in SpinalHDL.",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/RiceShelley/tt04-grain-flex",
      "commit": "1f03af7ae45163693a33eae6935f53259e73c22c",
      "pinout": {
        "ui_in[0]": "Scan chain clock",
        "ui_in[1]": "Scan chain active high reset",
        "ui_in[2]": "Scan chain enable",
        "ui_in[3]": "Scan chain data in (sampled on rising edge of scan chain clock)",
        "ui_in[4]": "NA",
        "ui_in[5]": "NA",
        "ui_in[6]": "NA",
        "ui_in[7]": "NA",
        "uo_out[0]": "Scan chain data out",
        "uo_out[1]": "NA",
        "uo_out[2]": "NA",
        "uo_out[3]": "NA",
        "uo_out[4]": "NA",
        "uo_out[5]": "NA",
        "uo_out[6]": "NA",
        "uo_out[7]": "dot",
        "uio[0]": "FPGA IO Buffer",
        "uio[1]": "FPGA IO Buffer",
        "uio[2]": "FPGA IO Buffer",
        "uio[3]": "FPGA IO Buffer",
        "uio[4]": "FPGA IO Buffer",
        "uio[5]": "FPGA IO Buffer",
        "uio[6]": "FPGA IO Buffer",
        "uio[7]": "FPGA IO Buffer"
      }
    },
    {
      "macro": "tt_um_robojan_pong_top",
      "address": 178,
      "title": "Pong",
      "author": "Robbert-Jan de Jager",
      "description": "This is a small pong game implemented in HDL. It uses a VGA connector to output the video signal. The game is controlled with 3 buttons per player. The left button moves the paddle to the left, the right button moves the paddle to the right and the action button starts the game. The game is over when one player is out of lives.",
      "clock_hz": 25175000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/robojan/tt04-pong",
      "commit": "63cd03d58c611ec0017b8bcfd74143d2426683c9",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "Button P2 left",
        "ui_in[3]": "Button P2 right",
        "ui_in[4]": "Button P2 action",
        "ui_in[5]": "Button P1 left",
        "ui_in[6]": "Button P1 right",
        "ui_in[7]": "Button P1 action",
        "uo_out[0]": "HSync",
        "uo_out[1]": "VSync",
        "uo_out[2]": "Red output bit 0",
        "uo_out[3]": "Red output bit 1",
        "uo_out[4]": "Green output bit 0",
        "uo_out[5]": "Green output bit 1",
        "uo_out[6]": "Blue output bit 0",
        "uo_out[7]": "Blue output bit 1",
        "uio[0]": "",
        "uio[1]": "HBlank",
        "uio[2]": "VBlank",
        "uio[3]": "sound output. Connect to a speaker with amplifier.",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_robojan_top",
      "address": 98,
      "title": "Tiny Breakout",
      "author": "Robbert-Jan de Jager",
      "description": "This is a small breakout game implemented in HDL. It uses a VGA connector to output the video signal. The game is controlled by 3 buttons. The left button moves the paddle to the left, the right button moves the paddle to the right and the action button starts the game. The game is over when all blocks are destroyed or when the ball hits the bottom of the screen.",
      "clock_hz": 25175000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/robojan/tt04-breakout-submission",
      "commit": "19bec184c8db4208729cbac44f92abc956d84f39",
      "pinout": {
        "ui_in[0]": "MOSI",
        "ui_in[1]": "SCK",
        "ui_in[2]": "slave select",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "Button left",
        "ui_in[6]": "Button right",
        "ui_in[7]": "Button action",
        "uo_out[0]": "HSync",
        "uo_out[1]": "VSync",
        "uo_out[2]": "Red output bit 0",
        "uo_out[3]": "Red output bit 1",
        "uo_out[4]": "Green output bit 0",
        "uo_out[5]": "Green output bit 1",
        "uo_out[6]": "Blue output bit 0",
        "uo_out[7]": "Blue output bit 1",
        "uio[0]": "MISO",
        "uio[1]": "HBlank",
        "uio[2]": "VBlank",
        "uio[3]": "sound output. Connect to a speaker with amplifier.",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rodrigomunoz1_rotempsensor_top",
      "address": 272,
      "title": "another ring oscillator based temperature sensor",
      "author": "Rodrigo Munoz (UCH)",
      "description": "4 differents Ring oscillator whose frecuency depends on temperature. It project is based on https://github.com/JorgeMarinN/tt03_ac3e-usm_ro-based_tempsens",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rodrigomunoz1/tt04-verilog-ro-temperature-sensor",
      "commit": "0c7ebc8fe7325c060496dff992484b67d3f6786f",
      "pinout": {
        "ui_in[0]": "ui_in[0] = clk_external",
        "ui_in[1]": "ui_in[1] = clk_sel (select the system clock input)",
        "ui_in[2]": "ui_in[4:2] = sum_sel (number of oscillator counts added (sum_sel+1)*4)",
        "ui_in[3]": "ui_in[5] = rx (UART RX)",
        "ui_in[4]": "ui_in[7:6] = osc_sel (select one of 4 ring oscillators)",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "uo_out[0] = tx (UART tx)",
        "uo_out[1]": "uo_out[7:1] = oscillator counter bits 7 to 1",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rs_write_decodifier_fjrn_cinvestav",
      "address": 326,
      "title": "RS Write Decodifier",
      "author": "Francisco Javier Rodriguez Navarrete",
      "description": "Project for the 12 bit reservation station decodifier",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/fjrn-cinvestav/tt04-submission-rsdeco",
      "commit": "16ea103fca9eecd90bfb7ac92ed609bb768bfd28",
      "pinout": {
        "ui_in[0]": "in_rs_write[7]",
        "ui_in[1]": "in_rs_write[6]",
        "ui_in[2]": "in_rs_write[5]",
        "ui_in[3]": "in_rs_write[4]",
        "ui_in[4]": "in_rs_write[3]",
        "ui_in[5]": "in_rs_write[2]",
        "ui_in[6]": "in_rs_write[1]",
        "ui_in[7]": "in_rs_write[0]",
        "uo_out[0]": "out_rs_write[7]",
        "uo_out[1]": "out_rs_write[6]",
        "uo_out[2]": "out_rs_write[5]",
        "uo_out[3]": "out_rs_write[4]",
        "uo_out[4]": "out_rs_write[3]",
        "uo_out[5]": "out_rs_write[2]",
        "uo_out[6]": "out_rs_write[1]",
        "uo_out[7]": "out_rs_write[0]",
        "uio[0]": "in_rs_write[11]",
        "uio[1]": "in_rs_write[10]",
        "uio[2]": "in_rs_write[9]",
        "uio[3]": "in_rs_write[8]",
        "uio[4]": "out_rs_write[11]",
        "uio[5]": "out_rs_write[10]",
        "uio[6]": "out_rs_write[9]",
        "uio[7]": "out_rs_write[8]"
      }
    },
    {
      "macro": "tt_um_sahrdayalfsr",
      "address": 338,
      "title": "lfsr random number generator",
      "author": "Arun A V",
      "description": "4-bit Linear Feedback Shift Register with configurable feedback polynomials based on the `mod` input, and it resets to the initial state when `reset` is asserted.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/arunav321/tt04-sahrdaya-prng",
      "commit": "f7b5c7194ae4102976c09cfa571fa0b121b03728",
      "pinout": {
        "ui_in[0]": "compare bit 11",
        "ui_in[1]": "compare bit 12",
        "ui_in[2]": "compare bit 13",
        "ui_in[3]": "compare bit 14",
        "ui_in[4]": "compare bit 15",
        "ui_in[5]": "compare bit 16",
        "ui_in[6]": "compare bit 17",
        "ui_in[7]": "compare bit 18",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_santacrc_tamagotchi",
      "address": 208,
      "title": "Tamagotchi",
      "author": "Fabian Alvarez",
      "description": "Simple Console Tamagotchi",
      "clock_hz": 27000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SantaCRC/tamagotchi",
      "commit": "c64563990c746de45d25006f21a1c0afeae21755",
      "pinout": {
        "ui_in[0]": "rx",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "tx",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_santiago",
      "address": 311,
      "title": "CDMA Transmitter/Receiver",
      "author": "Santiago Robledo Acosta",
      "description": "This is a CDMA Transmitter/Reciever to academically study the Spread-Spectrum effect while sending singals and to observe pseudonoise",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Santiago-Robledo/tt04-submission-template_santiago",
      "commit": "b43116f97142d4cd1c074a8e06ebe60dd8b67935",
      "pinout": {
        "ui_in[0]": "signal_i",
        "ui_in[1]": "seed_i[0]",
        "ui_in[2]": "seed_i[1]",
        "ui_in[3]": "seed_i[2]",
        "ui_in[4]": "seed_i[3]",
        "ui_in[5]": "seed_i[4]",
        "ui_in[6]": "receptor_i",
        "ui_in[7]": "load_i",
        "uo_out[0]": "cdma_o",
        "uo_out[1]": "gold_o",
        "uo_out[2]": "receptor_o",
        "uo_out[3]": "led_o",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_seven_segment_seconds",
      "address": 3,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt04-verilog-demo",
      "commit": "663055456e875934666ab6e2eb1e40cc0ca3cc37",
      "pinout": {
        "ui_in[0]": "compare bit 11",
        "ui_in[1]": "compare bit 12",
        "ui_in[2]": "compare bit 13",
        "ui_in[3]": "compare bit 14",
        "ui_in[4]": "compare bit 15",
        "ui_in[5]": "compare bit 16",
        "ui_in[6]": "compare bit 17",
        "ui_in[7]": "compare bit 18",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_shift",
      "address": 305,
      "title": "serializer",
      "author": "Sergio Alejandro Rosales Nu\u00f1ez",
      "description": "shift register",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/srosales700/tt04-submission-template_sergio",
      "commit": "a45a7963c20ea6019eccc5968587a074a65cd77e",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "rst",
        "ui_in[2]": "D[0]",
        "ui_in[3]": "D[1]",
        "ui_in[4]": "D[2]",
        "ui_in[5]": "D[3]",
        "ui_in[6]": "D[4]",
        "ui_in[7]": "D[5]",
        "uo_out[0]": "Q",
        "uo_out[1]": "eos",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_silva",
      "address": 304,
      "title": "Later",
      "author": "Alejandro Silva",
      "description": "Later",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/asilvaj1/tt04-submission-template_silva",
      "commit": "624b47ebfd02769ca1557518b701098290422a84",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_simple_processor_pablopabota",
      "address": 278,
      "title": "A Risc-V Instruction memory i2c programmer",
      "author": "Pablo Alonso",
      "description": "This proyect implements an i2c port capable of programing memory of a RISC-V processor",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Pablopabota/tt04-submission-demo_design",
      "commit": "93a0dcd4c6a26e1ae4b651515d71cdbce7e3bdf8",
      "pinout": {
        "ui_in[0]": "ext_sda_in",
        "ui_in[1]": "ext_scl_in",
        "ui_in[2]": "ext_i2c_rst",
        "ui_in[3]": "i2c_cs",
        "ui_in[4]": "pc_src",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "sda_oe",
        "uo_out[0]": "ext_sda_out",
        "uo_out[1]": "ext_scl_out",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_simplepiano",
      "address": 165,
      "title": "Simple Piano",
      "author": "Sarthak Raheja and Bittu N",
      "description": "An eight octave twelve key piano with two inbuilt songs. The design can be customized and incorporated as per user requirement in multiple use cases.\n",
      "clock_hz": 1000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diadatp/vlsi-iisc-tt4",
      "commit": "fc8b684ef446404e1eb8031e63395b1086f1066a",
      "pinout": {
        "ui_in[0]": "Note E",
        "ui_in[1]": "Note F",
        "ui_in[2]": "Note F#",
        "ui_in[3]": "Note G",
        "ui_in[4]": "Note G#",
        "ui_in[5]": "Note A",
        "ui_in[6]": "Note A#",
        "ui_in[7]": "Note B",
        "uo_out[0]": "LED bar [6]",
        "uo_out[1]": "LED bar [5]",
        "uo_out[2]": "LED bar [4]",
        "uo_out[3]": "LED bar [3]",
        "uo_out[4]": "LED bar [2]",
        "uo_out[5]": "LED bar [1]",
        "uo_out[6]": "LED bar [0]",
        "uo_out[7]": "Audio out",
        "uio[0]": "Mode piano = 0 & demo = 1",
        "uio[1]": "Octave [3]",
        "uio[2]": "Octave [2]",
        "uio[3]": "Octave [1]",
        "uio[4]": "Note C",
        "uio[5]": "Note C#",
        "uio[6]": "Note D",
        "uio[7]": "Note D#"
      }
    },
    {
      "macro": "tt_um_sorter",
      "address": 5,
      "title": "Odd even sorter",
      "author": "Vasileios Titopoulos",
      "description": "An odd even sorter of four 2-bit values",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Vasitito/Odd_even_sorter",
      "commit": "2f92d7f5585d755f6bb6671378d47f233cf71ed0",
      "pinout": {
        "ui_in[0]": "I0/In1[0]",
        "ui_in[1]": "I1/In1[1]",
        "ui_in[2]": "I2/In2[0]",
        "ui_in[3]": "I3/In2[1]",
        "ui_in[4]": "I4/In3[0]",
        "ui_in[5]": "I5/In3[1]",
        "ui_in[6]": "I6/In4[0]",
        "ui_in[7]": "I7/In4[1]",
        "uo_out[0]": "O0/Out1[0]/segment a",
        "uo_out[1]": "O1/Out1[1]/segment b",
        "uo_out[2]": "O2/Out2[0]/segment c",
        "uo_out[3]": "O3/Out2[1]/segment d",
        "uo_out[4]": "O4/Out3[0]/segment e",
        "uo_out[5]": "O5/Out3[1]/segment f",
        "uo_out[6]": "O6/Out4[0]/segment g",
        "uo_out[7]": "O7/Out4[1]/dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ternaryPC_radixconvert",
      "address": 291,
      "title": "4-trit balanced ternary program counter and convertor",
      "author": "Steven bos",
      "description": "A 4-trit synchronous balanced ternary (BT) program counter allowing tri-directional counting (up, down, hold) and jump/load the program counter. The other part is a 3-trit asyncronous BT radix converter.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt04-balanced-ternary-counter-and-radix-convertor",
      "commit": "bd02002bba82cb25292bd8294d4ea2df502d367c",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "reset",
        "ui_in[2]": "ui_in[7] data2 MST (most significant trit)",
        "ui_in[3]": "ui_in[6] data2",
        "ui_in[4]": "ui_in[5] data1 MST",
        "ui_in[5]": "ui_in[4] data1",
        "ui_in[6]": "ui_in[3] data0 MST",
        "ui_in[7]": "ui_in[2] data0",
        "uo_out[0]": "uo_out[7] PC data3 MST",
        "uo_out[1]": "uo_out[6] PC data3",
        "uo_out[2]": "uo_out[5] PC data2 MST",
        "uo_out[3]": "uo_out[4] PC data2",
        "uo_out[4]": "uo_out[3] PC data1 MST",
        "uo_out[5]": "uo_out[2] PC data1",
        "uo_out[6]": "uo_out[1] PC data0 MST",
        "uo_out[7]": "uo_out[0] PC data0",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_thezoq2_tmng",
      "address": 323,
      "title": "Time Multiplexed Nand-gate",
      "author": "Frans Skarman",
      "description": "The furthest you can go in the time/space tradeoff",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TheZoq2/tt04-time-multiplexed-nand-gate",
      "commit": "4b581b2f9ddeb5640d5e0df55b4aab5d9cec8e34",
      "pinout": {
        "ui_in[0]": "compare bit 11",
        "ui_in[1]": "compare bit 12",
        "ui_in[2]": "compare bit 13",
        "ui_in[3]": "compare bit 14",
        "ui_in[4]": "compare bit 15",
        "ui_in[5]": "compare bit 16",
        "ui_in[6]": "compare bit 17",
        "ui_in[7]": "compare bit 18",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_thorkn_pwmaudio",
      "address": 64,
      "title": "Audio-PWM-Synth",
      "author": "Thorsten Knoll",
      "description": "Generate Audio with a PWM output.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tt04-audio-pwm-synth",
      "commit": "89414738f4e86cd5ed1373aee4596d3a36c14543",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "pwm_audio_low",
        "uo_out[1]": "pwm_audio_high",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_tiny_processor",
      "address": 102,
      "title": "Tiny processor",
      "author": "Kosmas Alexandridis",
      "description": "An 8-bit processor",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/kosmalex/tiny_processor",
      "commit": "cfc21292eb71f6dd663f1bbff1eb31aad1fcb2d8",
      "pinout": {
        "ui_in[0]": "Display on/off",
        "ui_in[1]": "Most Significant Bits",
        "ui_in[2]": "RS_addr[0]",
        "ui_in[3]": "RS_addr[1]",
        "ui_in[4]": "RS_addr[2]",
        "ui_in[5]": "RS_addr[3]",
        "ui_in[6]": "View select",
        "ui_in[7]": "Animation on/off",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "Driver_ctrl[0] (I)",
        "uio[1]": "Driver_ctrl[1] (I)",
        "uio[2]": "Done executing (O)",
        "uio[3]": "Serial clock   (O)",
        "uio[4]": "MISO           (I)",
        "uio[5]": "MOSI           (O)",
        "uio[6]": "Chip select    (O)",
        "uio[7]": "Sync           (O)"
      }
    },
    {
      "macro": "tt_um_tomkeddie_a",
      "address": 112,
      "title": "LED Panel Driver",
      "author": "Tom Keddie",
      "description": "Drives a 16x16 P10 LED panel",
      "clock_hz": 12000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2023-tt04a",
      "commit": "df73c3f8094abf4ecb063267088f9f45ac119e36",
      "pinout": {
        "ui_in[0]": "uart",
        "ui_in[1]": "mode",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "red0",
        "uo_out[1]": "blue0",
        "uo_out[2]": "b",
        "uo_out[3]": "blank",
        "uo_out[4]": "green0",
        "uo_out[5]": "a",
        "uo_out[6]": "clk",
        "uo_out[7]": "latch",
        "uio[0]": "red1",
        "uio[1]": "blue1",
        "uio[2]": "green1",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_top",
      "address": 261,
      "title": "Pseudo Random Number Generator",
      "author": "International Hellenic University - Department of Information and Electronic Engineering",
      "description": "This project implements a pseudo-random number generator using Verilog. It generates pseudo-random numbers and outputs them to drive two 7-segment displays.",
      "clock_hz": 50000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/IIntzes/tt4_prng",
      "commit": "f6c6a499c04b92c587d302e7d81c602189999162",
      "pinout": {
        "ui_in[0]": "clk",
        "ui_in[1]": "en",
        "ui_in[2]": "rst_n",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment0 a",
        "uo_out[1]": "segment0 b",
        "uo_out[2]": "segment0 c",
        "uo_out[3]": "segment0 d",
        "uo_out[4]": "segment0 e",
        "uo_out[5]": "segment0 f",
        "uo_out[6]": "segment0 g",
        "uo_out[7]": "segment1 a",
        "uio[0]": "segment1 b",
        "uio[1]": "segment1 c",
        "uio[2]": "segment1 d",
        "uio[3]": "segment1 e",
        "uio[4]": "segment1 f",
        "uio[5]": "segment1 g",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_uninorte",
      "address": 324,
      "title": "Octal classifier",
      "author": "Eduardo Zurek, Margarita Narducci, Diana Rueda",
      "description": "Classifies images of numbers from 0 to 7 using the 16 most significant pixels",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mnarducci80/tt04-verilog-demouninorte",
      "commit": "8ac5d1a4ffe268ac9622b26a9fd87070b7c6bd2e",
      "pinout": {
        "ui_in[0]": "feature_10 = ui_in[0];",
        "ui_in[1]": "feature_13 = ui_in[1];",
        "ui_in[2]": "feature_18 = ui_in[2];",
        "ui_in[3]": "feature_19 = ui_in[3];",
        "ui_in[4]": "feature_20 = ui_in[4];",
        "ui_in[5]": "feature_21 = ui_in[5];",
        "ui_in[6]": "feature_26 = ui_in[6];",
        "ui_in[7]": "feature_27 = ui_in[7];",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "feature_28 = uio_in[0];",
        "uio[1]": "feature_34 = uio_in[1];",
        "uio[2]": "feature_36 = uio_in[2];",
        "uio[3]": "feature_42 = uio_in[3];",
        "uio[4]": "feature_43 = uio_in[4];",
        "uio[5]": "feature_45 = uio_in[5];",
        "uio[6]": "feature_60 = uio_in[6];",
        "uio[7]": "feature_61 = uio_in[7];"
      }
    },
    {
      "macro": "tt_um_urish_simon",
      "address": 18,
      "title": "Simon Says game",
      "author": "Uri Shaked",
      "description": "A simple memory game",
      "clock_hz": 50000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/urish/tt04-simon-game",
      "commit": "0b7bbd095039e237b1975d7aa294ea0d686e6712",
      "pinout": {
        "ui_in[0]": "btn1",
        "ui_in[1]": "btn2",
        "ui_in[2]": "btn3",
        "ui_in[3]": "btn4",
        "ui_in[4]": "seginv",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "led1",
        "uo_out[1]": "led2",
        "uo_out[2]": "led3",
        "uo_out[3]": "led4",
        "uo_out[4]": "speaker",
        "uo_out[5]": "dig1",
        "uo_out[6]": "dig2",
        "uo_out[7]": "",
        "uio[0]": "seg_a",
        "uio[1]": "seg_b",
        "uio[2]": "seg_c",
        "uio[3]": "seg_d",
        "uio[4]": "seg_e",
        "uio[5]": "seg_f",
        "uio[6]": "seg_g",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_urish_usb_cdc",
      "address": 101,
      "title": "USB CDC (Serial)",
      "author": "Uri Shaked",
      "description": "USB to Serial bridge",
      "clock_hz": 48000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt04-usbcdc",
      "commit": "91b374368fe50a87ca772199ca287de41c83f9ea",
      "pinout": {
        "ui_in[0]": "tx[0]",
        "ui_in[1]": "tx[1]",
        "ui_in[2]": "tx[2]",
        "ui_in[3]": "tx[3]",
        "ui_in[4]": "tx[4]",
        "ui_in[5]": "tx[5]",
        "ui_in[6]": "tx[6]",
        "ui_in[7]": "tx[7]",
        "uo_out[0]": "rx[0]",
        "uo_out[1]": "rx[1]",
        "uo_out[2]": "rx[2]",
        "uo_out[3]": "rx[3]",
        "uo_out[4]": "rx[4]",
        "uo_out[5]": "rx[5]",
        "uo_out[6]": "rx[6]",
        "uo_out[7]": "rx[7]",
        "uio[0]": "usb_p",
        "uio[1]": "usb_n",
        "uio[2]": "tx_valid",
        "uio[3]": "tx_ready",
        "uio[4]": "rx_valid",
        "uio[5]": "rx_ready",
        "uio[6]": "dp_pu_o",
        "uio[7]": "configured"
      }
    },
    {
      "macro": "tt_um_vc_cpu",
      "address": 99,
      "title": "VC 16-bit CPU",
      "author": "Paul Campbell",
      "description": "VC 16-bit CPU - RISV-C cpu",
      "clock_hz": 10000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/MoonbaseOtago/tt04-vc",
      "commit": "d5cab8527a9e822913731af5ac9c917cd1f855d0",
      "pinout": {
        "ui_in[0]": "ReadData0",
        "ui_in[1]": "ReadData1",
        "ui_in[2]": "ReadData2",
        "ui_in[3]": "ReadData3",
        "ui_in[4]": "ReadData4",
        "ui_in[5]": "ReadData5",
        "ui_in[6]": "ReadData6",
        "ui_in[7]": "ReadData7",
        "uo_out[0]": "AddressData0",
        "uo_out[1]": "AddressData1",
        "uo_out[2]": "AddressData2",
        "uo_out[3]": "AddressData3",
        "uo_out[4]": "AddressData4",
        "uo_out[5]": "AddressData5",
        "uo_out[6]": "AddressData6",
        "uo_out[7]": "AddressData7",
        "uio[0]": "AddressLSB",
        "uio[1]": "WriteStrobe",
        "uio[2]": "AddressLatchHi",
        "uio[3]": "AddressLatchLo",
        "uio[4]": "unused4",
        "uio[5]": "unused5",
        "uio[6]": "unused6",
        "uio[7]": "InterruptIn"
      }
    },
    {
      "macro": "tt_um_vga_clock",
      "address": 2,
      "title": "VGA clock",
      "author": "Matt Venn",
      "description": "Shows the time on a VGA screen",
      "clock_hz": 31500000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt04-vga-clock",
      "commit": "344e4c23ac9a7371be944a15487d16d4cf8958ee",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "reset",
        "ui_in[2]": "adjust hours",
        "ui_in[3]": "adjust minutes",
        "ui_in[4]": "adjust seconds",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "hsync",
        "uo_out[1]": "vsync",
        "uo_out[2]": "r0",
        "uo_out[3]": "r1",
        "uo_out[4]": "g0",
        "uo_out[5]": "g1",
        "uo_out[6]": "b0",
        "uo_out[7]": "b1",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_347140425276981843",
      "address": 192,
      "title": "UART character tx",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This circuit will output a string of characters (\u2019tiny tapeout\u2019) to the uart.\n",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt04-UARTcharacter",
      "commit": "194927b6877c84c993bc43f53a76d0495d99a35f",
      "pinout": {
        "ui_in[0]": "n/a",
        "ui_in[1]": "bit 0",
        "ui_in[2]": "bit 1",
        "ui_in[3]": "bit 2",
        "ui_in[4]": "bit 3",
        "ui_in[5]": "bit 4",
        "ui_in[6]": "load/tx",
        "ui_in[7]": "output enable",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "N/A",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_347144898258928211",
      "address": 182,
      "title": "Customizable UART string tx",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "Customizable UART Transmitter\nSupports sending multiple ASCII characters over UART.\nEach column of flip flops stores a single ASCII character. To modify a character, change bits 6-0 by modifying whether the respective multiplex is set to VCC or GND. \n\nTo add characters, copy and paste a column. Connect the output of the new column (Q port of the upper-most D-flip flop) to the input of the stage to the left (bottom-left most multiplexer port). Remember to connect the multiplexer select signal and the clock to the new column as well.\n\nLastly, delete the the output of the first column (Q port of the upper-most D-flip flop) and create a new connection to the to the input of the new stage you've added (bottom-left most multiplexer port).\n",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt04-UARTstring",
      "commit": "05bdb32806820c17449206ddb0d3c17f0c766b76",
      "pinout": {
        "ui_in[0]": "N/A",
        "ui_in[1]": "N/A",
        "ui_in[2]": "N/A",
        "ui_in[3]": "N/A",
        "ui_in[4]": "N/A",
        "ui_in[5]": "N/A",
        "ui_in[6]": "load/tx",
        "ui_in[7]": "output enable",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "N/A",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_347417602591556180",
      "address": 193,
      "title": "Padlock",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "Set a code for your precious safe",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt04-padlock",
      "commit": "8e33d80cd66376678f578dfecb162df05cc2399e",
      "pinout": {
        "ui_in[0]": "N/A",
        "ui_in[1]": "N/A",
        "ui_in[2]": "Code 0",
        "ui_in[3]": "Code 1",
        "ui_in[4]": "Code 2",
        "ui_in[5]": "N/A",
        "ui_in[6]": "N/A",
        "ui_in[7]": "Set Code",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_347497504164545108",
      "address": 183,
      "title": "7-Seg 'Tiny Tapeout' Display",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This circuit will output a string of characters (\u2019tiny tapeout\u2019) to the 7-segment display.\n",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt04-7segstringdisplay",
      "commit": "0534c0e22099b5db72101679637ba892c7181e65",
      "pinout": {
        "ui_in[0]": "N/A",
        "ui_in[1]": "N/A",
        "ui_in[2]": "N/A",
        "ui_in[3]": "Clock Disable (Test Mode)",
        "ui_in[4]": "Test Logic A",
        "ui_in[5]": "Test Logic B",
        "ui_in[6]": "Test Logic C",
        "ui_in[7]": "Test Logic D",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "N/A",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_369864099838656513",
      "address": 196,
      "title": "Test 4x4 memory",
      "author": "Marchand Nicolas",
      "description": "A 4x4 memory adapted from :https://www.researchgate.net/figure/Structure-of-SRAM-Cell-The-design-of-SRAM-usually-involves-edge-triggered-flip-flops-The_fig3_324963843",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MCH-NI/tt04-Test",
      "commit": "a377d53e0d8dbf3a0e518b9544aa977c00ac51dd",
      "pinout": {
        "ui_in[0]": "in 0 - updates the value of bit0 of the selected line with in4 and in5",
        "ui_in[1]": "in 1 - updates the value of bit1 of the selected line with in4 and in5",
        "ui_in[2]": "in 2 - updates the value of bit2 of the selected line with in4 and in5",
        "ui_in[3]": "in 3 - updates the value of bit3 of the selected line with in4 and in5",
        "ui_in[4]": "in 4 - selects the line with in5",
        "ui_in[5]": "in 5 - selects the line with in4",
        "ui_in[6]": "clk/step push-button to select write or read operation or can be automated on the clock",
        "ui_in[7]": "in 7 - chip select, allways ON (1) to wrok",
        "uo_out[0]": "out 0 - segment a - value of bit0 of the selected line with in4 and in5",
        "uo_out[1]": "out 1 - segment b - value of bit1 of the selected line with in4 and in5",
        "uo_out[2]": "out 2 - segment c - value of bit2 of the selected line with in4 and in5",
        "uo_out[3]": "out 3 - segment d - value of bit3 of the selected line with in4 and in5",
        "uo_out[4]": "out 4 - segment e - control of bit0 of the first line (value Q-)",
        "uo_out[5]": "out 5 - segment f - control of bit1 of the first line (value Q-)",
        "uo_out[6]": "out 6 - segment g - control of bit2 of the first line (value Q-)",
        "uo_out[7]": "out 7 - dot - control of bit3 of the first line (value Q-)",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370011087462055937",
      "address": 230,
      "title": "8 bit 4 data sorting network",
      "author": "Emmanuel D\u00edaz Mar\u00edn",
      "description": "The circuit orders the 4 input numbers according to their value, with the highest number at output 0",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ManuDamar/tt04-8-bit-sorting-network",
      "commit": "fbfdf146e1582fc4a31fbacf78a6b5d75a1f20aa",
      "pinout": {
        "ui_in[0]": "Number 1",
        "ui_in[1]": "Number 2",
        "ui_in[2]": "Number 3",
        "ui_in[3]": "Number 4",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "Control",
        "uo_out[0]": "Highest number",
        "uo_out[1]": "Second highest number",
        "uo_out[2]": "Third highest number",
        "uo_out[3]": "Fourth highest number",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370533670565165057",
      "address": 163,
      "title": "Multi-channel pulse counter with serial output, v01a",
      "author": "Adrian Novosel, Dinko Oletic",
      "description": "Counts number of digital pulses occuring within a time interval across four input channels, and periodically outputs the values out using serial output. Wokwi implementation.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DinkoOletic/tt04-wokwi_unizgfer_multich_pulse_counter_v01a",
      "commit": "cb70212bc7d55cf784f1c9b8f85047ec9a7eb808",
      "pinout": {
        "ui_in[0]": "reset",
        "ui_in[1]": "ch1",
        "ui_in[2]": "ch2",
        "ui_in[3]": "ch3",
        "ui_in[4]": "ch4",
        "ui_in[5]": "clk",
        "ui_in[6]": "RTC",
        "ui_in[7]": "",
        "uo_out[0]": "serial_out",
        "uo_out[1]": "ovf_global",
        "uo_out[2]": "a0_out",
        "uo_out[3]": "a1_out",
        "uo_out[4]": "a2_out",
        "uo_out[5]": "SL_out",
        "uo_out[6]": "ovf_RTC_out",
        "uo_out[7]": "ovf_ch_out",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370690644715216897",
      "address": 180,
      "title": "Traffic Light",
      "author": "Courtney",
      "description": "Lights",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/Traffic-Light-2",
      "commit": "db7ffa488c3af645fe52a5d78843a96722c54edd",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370709383347782657",
      "address": 115,
      "title": "Traffic light",
      "author": "Guvanch Gulmyradov",
      "description": "OSU RET training ",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/ggulmyradov/Guvanch-Trafficlight",
      "commit": "0a47da7395997c0221a7eba408aab3f41730a474",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370722051572189185",
      "address": 113,
      "title": "OSU Counter",
      "author": "Mehmet Aksoy",
      "description": "flip flop counter",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/maksoy1/tt04-submission-circuit",
      "commit": "aa35b2a4b89f76a982337e0feb9c2c689b395dae",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_370796071922577409",
      "address": 114,
      "title": "Even digits",
      "author": "Ibrahim Eskikurt",
      "description": "Even digits",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/ieskikurt/TinytapeoutIE",
      "commit": "46e1c6bda43e37f18f93d53625dac5ed8b454579",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_371425977920989185",
      "address": 116,
      "title": "Tutorial4",
      "author": "Delwar",
      "description": "Tutorial4",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/hossaind/tt04-submission-template",
      "commit": "0bebf52fdee10d7cf7fbc95b390b5a4994c993c4",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_371604537887211521",
      "address": 17,
      "title": "Digital Cipher & Interlock System",
      "author": "Eric German MKME Lab",
      "description": "Digital Cipher with 256 combinations & one solution which sets output to high",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MKme/tt04-submission-template",
      "commit": "1cbdace0b020372b4ff1d9b36dec5b3acea9f29e",
      "pinout": {
        "ui_in[0]": "HIGH",
        "ui_in[1]": "LOW",
        "ui_in[2]": "HIGH",
        "ui_in[3]": "HIGH",
        "ui_in[4]": "LOW",
        "ui_in[5]": "HIGH",
        "ui_in[6]": "LOW",
        "ui_in[7]": "HIGH",
        "uo_out[0]": "HIGH All Chain Unlocked",
        "uo_out[1]": "FB1 Feedback signal",
        "uo_out[2]": "FB2 Feedback signal",
        "uo_out[3]": "FB3 Feedback signal",
        "uo_out[4]": "FB4 Feedback signal",
        "uo_out[5]": "FB5 Feedback signal",
        "uo_out[6]": "FB6 Feedback signal",
        "uo_out[7]": "FB7 Feedback signal",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_372184284115580929",
      "address": 19,
      "title": "YKM 7-seg driver",
      "author": "Yeo Kheng Meng",
      "description": "Shows the string ykM_1St_CHIP character by character",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yeokm1/tt4-ykm-7-seg",
      "commit": "720bf5e02148529b0ba21ccabef855ad4d673b09",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "Disable counter. This is active-high.",
        "ui_in[5]": "Driven by BCD or counter. High for BCD, Low for counter.",
        "ui_in[6]": "BCD bit 3",
        "ui_in[7]": "BCD bit 2",
        "uo_out[0]": "7-segment a",
        "uo_out[1]": "7-segment b",
        "uo_out[2]": "7-segment c",
        "uo_out[3]": "7-segment d",
        "uo_out[4]": "7-segment e",
        "uo_out[5]": "7-segment f",
        "uo_out[6]": "7-segment g",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_372347167704674305",
      "address": 262,
      "title": "SAR ADC Backend",
      "author": "Hugo Frisk",
      "description": "A digital backend of a successive approximation digital to analog converter (SAR ADC) featuring two interfaces: I2C or an 11-bit parallel bus.",
      "clock_hz": 100000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/PepperoniPingu/tt04-submission-SAR-ADC-Backend",
      "commit": "b82f970eff49de9a07284d1959dfd72423025923",
      "pinout": {
        "ui_in[0]": "CMPR",
        "ui_in[1]": "PRECSEL",
        "ui_in[2]": "ADRSEL",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "S0",
        "uo_out[1]": "S1",
        "uo_out[2]": "S2",
        "uo_out[3]": "S3",
        "uo_out[4]": "S4",
        "uo_out[5]": "S5",
        "uo_out[6]": "S6",
        "uo_out[7]": "S7",
        "uio[0]": "START/BUSY",
        "uio[1]": "SCL",
        "uio[2]": "SDA",
        "uio[3]": "S8",
        "uio[4]": "S9",
        "uio[5]": "S10",
        "uio[6]": "INCTRL",
        "uio[7]": "GNDCTRL"
      }
    },
    {
      "macro": "tt_um_wokwi_374029622762967041",
      "address": 71,
      "title": "German Traffic Light",
      "author": "Paul Knoll",
      "description": "Simulation of a german traffic light",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BigPull/tt04PaulKnoll",
      "commit": "02af3ee5102c394fccf72eb14388da95845a55b2",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "red LED",
        "uo_out[1]": "yellow LED",
        "uo_out[2]": "green LED",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374140166551523329",
      "address": 160,
      "title": "Tiny (3-bit) LFSR",
      "author": "Thomas Klassert",
      "description": "Tiny (3-bit) LFSR",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tomatsch87/tt04-submission-tiny-lfsr",
      "commit": "ca8791aec1411951cca91b1f9c44ea03e9b049be",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "random bit 0",
        "uo_out[1]": "random bit 1",
        "uo_out[2]": "random bit 2",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374292646686728193",
      "address": 166,
      "title": "Ripple-Carry Adder",
      "author": "Yannick Rei\u00df",
      "description": "Add two bytes.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yannickreiss/tt04-ripple-carry-adder",
      "commit": "c889fbca51693bf43b0b9d8e836e16f737d25ea0",
      "pinout": {
        "ui_in[0]": "MSB Byte 1",
        "ui_in[1]": "6",
        "ui_in[2]": "5",
        "ui_in[3]": "4",
        "ui_in[4]": "3",
        "ui_in[5]": "2",
        "ui_in[6]": "1",
        "ui_in[7]": "LSB Byte 1",
        "uo_out[0]": "MSB Result",
        "uo_out[1]": "6",
        "uo_out[2]": "5",
        "uo_out[3]": "4",
        "uo_out[4]": "3",
        "uo_out[5]": "2",
        "uo_out[6]": "1",
        "uo_out[7]": "LSB Result",
        "uio[0]": "MSB Byte 2",
        "uio[1]": "6",
        "uio[2]": "5",
        "uio[3]": "4",
        "uio[4]": "3",
        "uio[5]": "2",
        "uio[6]": "1",
        "uio[7]": "LSB Byte 2"
      }
    },
    {
      "macro": "tt_um_wokwi_374494377414857729",
      "address": 181,
      "title": "Model Railway turntable polarity controller",
      "author": "Joop aan den Toorn",
      "description": "A controller that automatically switches the polarity of DC-type turntables",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jooptoorn/tt04-model_railway_turntable_polarity_controller",
      "commit": "9e08c1723b5b2f754e412687e651446a6fefd9fb",
      "pinout": {
        "ui_in[0]": "IN0: trigger signal to change polarity",
        "ui_in[1]": "IN1: trigger signal to change polarity",
        "ui_in[2]": "IN2: trigger signal to change polarity",
        "ui_in[3]": "IN3: trigger signal to change polarity",
        "ui_in[4]": "IN4: trigger signal to change polarity",
        "ui_in[5]": "IN5: trigger signal to change polarity",
        "ui_in[6]": "IN6: trigger signal to change polarity",
        "ui_in[7]": "IN7: trigger signal to change polarity",
        "uo_out[0]": "OUT0: counter signal",
        "uo_out[1]": "OUT1: counter signal",
        "uo_out[2]": "OUT2: full bridge control signal for polarity A",
        "uo_out[3]": "OUT3: full bridge control signal for polarity B",
        "uo_out[4]": "OUT4: indicates a polarity switch trigger is active on one of the inputs",
        "uo_out[5]": "OUT5: VCC",
        "uo_out[6]": "OUT6: counter enabled signal",
        "uo_out[7]": "OUT7: active error signal",
        "uio[0]": "D0: error input. Use to activate an error and disable outputs.",
        "uio[1]": "D1: trigger signal to change polarity",
        "uio[2]": "D2: trigger signal to change polarity",
        "uio[3]": "D3: trigger signal to change polarity",
        "uio[4]": "D4: trigger signal to change polarity",
        "uio[5]": "D5: not used",
        "uio[6]": "D6: oscillator input",
        "uio[7]": "D7: oscillator output"
      }
    },
    {
      "macro": "tt_um_wokwi_374515580784897025",
      "address": 244,
      "title": "Hardware Lock",
      "author": "Lautiux",
      "description": "A simple hardware pin made with a shift register formed by joining various flip-flops.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/lautitux/tt04-submission-ucu-microchip",
      "commit": "1914980facce94d84b5005f89b9656da9f2ae658",
      "pinout": {
        "ui_in[0]": "PIN INPUT",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374636462642973697",
      "address": 290,
      "title": "Full_adder_carry_juang_garzons",
      "author": "Juan Guillermo Garz\u00f3n S\u00e1nchez",
      "description": "Es un sumador de 4 bits con carril el cual muestra el resultado mediante una pantalla de 7 segmentos, teniendo la limitaci\u00f3n de que solo podr\u00e1 mostrar resultados menores a 4 bits por lo tanto hasta 15 en decimal, ya que despu\u00e9s de este tama\u00f1o estar\u00e1 en overflow , los dos n\u00fameros de entrada se introducen en los interruptores, el primer n\u00famero va de los interruptores del 4 al 1 y el segundo n\u00famero del 8 al 5",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/juangarzon04/full_adder_juang_garzons",
      "commit": "cd05afa1517573dc53d45cc5ee774d4ccb70dfba",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374778387606763521",
      "address": 276,
      "title": "PWM Quisquilloso",
      "author": "Rebeca Orellana, Abigail Alarcon",
      "description": "Regulates the power or velocity at which a device functions. This PWM was designed to work with an extern clock of 12.5 KHz so the exit has a frequency of 50 Hz and it can control a servomotor.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ChipUSM/ac3e-usm-VLSICamp-PWM",
      "commit": "b475f0da1887ba9449a552b6f862336a2779fb3b",
      "pinout": {
        "ui_in[0]": "IN0",
        "ui_in[1]": "IN1",
        "ui_in[2]": "IN2",
        "ui_in[3]": "IN3",
        "ui_in[4]": "IN4",
        "ui_in[5]": "IN5",
        "ui_in[6]": "IN6",
        "ui_in[7]": "IN7",
        "uo_out[0]": "OUTC0",
        "uo_out[1]": "OUTC1",
        "uo_out[2]": "OUTC2",
        "uo_out[3]": "OUTC3",
        "uo_out[4]": "OUTC4",
        "uo_out[5]": "OUTC5",
        "uo_out[6]": "OUTC6",
        "uo_out[7]": "OUTC7",
        "uio[0]": "PWM",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374815911155542017",
      "address": 242,
      "title": "Demultiplexor NAND",
      "author": "Mauricio Caballero Hern\u00e1ndez - Alejandro Duran Morales - Marvin Yahir Salamanca Ramirez - Kevin Ortiz Sarate",
      "description": "Demultiplexor de 3 entradas independientes y 3 entradas de direcci\u00f3n que arrojan valore logicos de 0 y 1 en 8 salidas diferentes, constituido por compuertas NAND y NOT, imitando el comportamiento de un LS138",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Anjouri/tt04-submission-template",
      "commit": "d1c7fb54b462b03dbb464b23c7b7b24917dde411",
      "pinout": {
        "ui_in[0]": "E0 (Entrada de direcci\u00f3n)",
        "ui_in[1]": "E1 (Entrada de direcci\u00f3n)",
        "ui_in[2]": "E2 (Entrada de direcci\u00f3n)",
        "ui_in[3]": "A0 (Entrada independiente)",
        "ui_in[4]": "A1 (Entrada independiente)",
        "ui_in[5]": "A2 (Entrada independiente)",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374903567624066049",
      "address": 243,
      "title": "Sumador/Sustractor de 3 bit con acarreo y prestamo",
      "author": "ONIX-M50",
      "description": "Este es un peque\u00f1o proyecto para la iniciativa VLSI, el cual consta de un circuito que realiza tanto la suma como la sustracci\u00f3n de dos numeros de 3 bits, los cuales pueden venir acompa\u00f1ados de un bit de acarreo o prestamo respectivamente.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ONIX-M50/DesdeWokwi",
      "commit": "04396a2975dce7a106ea6cf5f982f78ccbac6145",
      "pinout": {
        "ui_in[0]": "A0",
        "ui_in[1]": "A1",
        "ui_in[2]": "A2",
        "ui_in[3]": "carry",
        "ui_in[4]": "B0",
        "ui_in[5]": "B1",
        "ui_in[6]": "B2",
        "ui_in[7]": "borrow",
        "uo_out[0]": "X0",
        "uo_out[1]": "X1",
        "uo_out[2]": "X2",
        "uo_out[3]": "carry",
        "uo_out[4]": "Y0",
        "uo_out[5]": "Y1",
        "uo_out[6]": "Y2",
        "uo_out[7]": "borrow",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374909346558831617",
      "address": 245,
      "title": "Custom falling and rising edge detection",
      "author": "Kelvin Kung",
      "description": "Build a custom edge detection circuit using flip-flop",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kelvinutp/TinyTapeOut-circuits",
      "commit": "630c68064b0c091276bcfc4e4f6da9c8718229c8",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374962052813090817",
      "address": 179,
      "title": "8 panel display\"\"",
      "author": "Jimmy Hartford",
      "description": "4 different patterns displaying 8 panels on the 7-seg display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/hartford_tt04",
      "commit": "382b6cd0c9839c8114febfc528ff49d75794b2e7",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374967675785369601",
      "address": 240,
      "title": "4 bit full adder",
      "author": "Hugo Jes\u00fas Navarro Hern\u00e1ndez, David Mora Mendez, Nadia Fernanda Barradas Solis, Juan Giovani Landa Cervantes",
      "description": "A full adder of binary numbers with logic gates",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Nadiadoki/tt04-4-bit-full-adder",
      "commit": "b73c2af960e324fa5a9c033b1bc700d63588c970",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374968111036708865",
      "address": 231,
      "title": "BCD to 7 segments",
      "author": "Josue Marcelo Castillo Acosta, Kaylee Michelle Diaz Rodriguez, Juliana Hernandez Hernandez",
      "description": "un decodificador de binario a decimal",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Pinging78/tt04-submission-demo",
      "commit": "f29c5d1739cca603156c6c76542fb49dd69addb1",
      "pinout": {
        "ui_in[0]": "bit 0",
        "ui_in[1]": "bit 1",
        "ui_in[2]": "bit 2",
        "ui_in[3]": "bit 3",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_374969806854695937",
      "address": 258,
      "title": "State machine of an impulse counter",
      "author": "Adrian Novosel",
      "description": "This design is not meant to be a standalone circuit. It is a state machine of my bachelor's thesis project which was also submitted to Tiny Tapeout. This submittal will be used for debugging and will give a better insight into the working principle of its source design. (https://github.com/DinkoOletic/tt04-wokwi_unizgfer_multich_pulse_counter_v01a)",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/adriannovosel/tt04-state-machine",
      "commit": "df007a31c9e8cb0b9d796484160d47c88f94eea4",
      "pinout": {
        "ui_in[0]": "reset",
        "ui_in[1]": "ovf",
        "ui_in[2]": "clk",
        "ui_in[3]": "bi oe",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "counter flop1",
        "uo_out[1]": "counter flop2",
        "uo_out[2]": "counter flop3",
        "uo_out[3]": "counter flop4",
        "uo_out[4]": "zero",
        "uo_out[5]": "one",
        "uo_out[6]": "global reset",
        "uo_out[7]": "ovf",
        "uio[0]": "a2",
        "uio[1]": "a1",
        "uio[2]": "a0",
        "uio[3]": "shift/load",
        "uio[4]": "sm flop1",
        "uio[5]": "sm flop 2",
        "uio[6]": "sm flop 3",
        "uio[7]": "sm flop 4"
      }
    },
    {
      "macro": "tt_um_wokwi_374974793636964353",
      "address": 241,
      "title": "Circuito Religioso",
      "author": "Eunice Husai Garcia Javier, Axel Daniel Luna Carmona, Aneesa Miranda Peredo Garc\u00eda, Daniel Alberto Gil Martinez",
      "description": "Un circuito BCD  display 7 segmentos que despliega caracteres para formar una palabra",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/husaigarciajavier/tt04-circuito-creyente",
      "commit": "88539ef5295b4e811ebd96f7c3a3696d4872355f",
      "pinout": {
        "ui_in[0]": "bit 3",
        "ui_in[1]": "bit 2",
        "ui_in[2]": "bit 1",
        "ui_in[3]": "bit 0",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "control",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375042398768251905",
      "address": 275,
      "title": "MINI ALU",
      "author": "Vicente Martinez, Cristobal Sanchez, Mauricio Pinto, Antar Derpich",
      "description": "This project is a Mini Alu with 4 bits, 2 bidirectionals used as inputs that indicates which operation is the Alu doing between XOR, OR, AND & addition",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ChipUSM/ac3e-usm-VLSICamp-MiniAlu",
      "commit": "a4e6734a823ef1594fd06df0764a3fca4b5e5687",
      "pinout": {
        "ui_in[0]": "A0",
        "ui_in[1]": "A1",
        "ui_in[2]": "A2",
        "ui_in[3]": "A3",
        "ui_in[4]": "B0",
        "ui_in[5]": "B1",
        "ui_in[6]": "B2",
        "ui_in[7]": "B3",
        "uo_out[0]": "O0",
        "uo_out[1]": "O1",
        "uo_out[2]": "O2",
        "uo_out[3]": "O3",
        "uo_out[4]": "Carry",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "S0",
        "uio[1]": "S1",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375061599421794305",
      "address": 259,
      "title": "Logic Circuit 1",
      "author": "Patryk Warnke MY REMOTE IOT",
      "description": "Logic Circuit Timing Test. Serial 1",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MyRemoteI0T/tt04-submission",
      "commit": "29627eaaeb482d5cef236abe029dace89947e216",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375163050120587265",
      "address": 294,
      "title": "Binary to 7 segment",
      "author": "Juan S Moya & Fredy Segura",
      "description": "A simple binary to 7-segment decoder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JuanSebastianMoya7/tt04-wokwi-cmua-bin_to_7seg",
      "commit": "179ea524aca33278f232b4a39c3bbf85485b93e1",
      "pinout": {
        "ui_in[0]": "IN3",
        "ui_in[1]": "IN2",
        "ui_in[2]": "IN1",
        "ui_in[3]": "IN0",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "OUT0 (segment a)",
        "uo_out[1]": "OUT1 (segment b)",
        "uo_out[2]": "OUT2 (segment c)",
        "uo_out[3]": "OUT3 (segment d)",
        "uo_out[4]": "OUT4 (segment e)",
        "uo_out[5]": "OUT5 (segment f)",
        "uo_out[6]": "OUT6 (segment g)",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375165100039571457",
      "address": 295,
      "title": "Neuron",
      "author": "David Leonardo Caro Estepa",
      "description": "Artificial Neuron with 2 inputs of 2 bits",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dlcaro1004/tt04-wokwi-cmua-Neuron",
      "commit": "ae6cd4454cb7996bfd1ad2269b2c48e6d03112e5",
      "pinout": {
        "ui_in[0]": "X0",
        "ui_in[1]": "X1",
        "ui_in[2]": "Y0",
        "ui_in[3]": "Y1",
        "ui_in[4]": "WX0",
        "ui_in[5]": "WX1",
        "ui_in[6]": "WY0",
        "ui_in[7]": "XY1",
        "uo_out[0]": "Y",
        "uo_out[1]": "",
        "uo_out[2]": "",
        "uo_out[3]": "",
        "uo_out[4]": "",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375174630101280769",
      "address": 293,
      "title": "Adder",
      "author": "Juan David Prieto Garzon",
      "description": "4-bit Adder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JuanPriet0/tt04-wokwi-cmua-Adder",
      "commit": "f35c2ae1a8ea67f49f751270e3d77386f3484bb1",
      "pinout": {
        "ui_in[0]": "X0",
        "ui_in[1]": "X1",
        "ui_in[2]": "X2",
        "ui_in[3]": "X3",
        "ui_in[4]": "Y0",
        "ui_in[5]": "Y1",
        "ui_in[6]": "Y2",
        "ui_in[7]": "Y3",
        "uo_out[0]": "S0",
        "uo_out[1]": "S1",
        "uo_out[2]": "S2",
        "uo_out[3]": "S3",
        "uo_out[4]": "S4",
        "uo_out[5]": "",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375176944142127105",
      "address": 263,
      "title": "FCFM 7-segment display",
      "author": "Diego Sanz",
      "description": "Displays UCHILE-FCFM- into the 7-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DiegoSanzB/tinytapeout_submission",
      "commit": "50fc9e4eca536304b33b63de9f3764328ff11d5f",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "reset",
        "ui_in[2]": "",
        "ui_in[3]": "counter_disable",
        "ui_in[4]": "A (most significant bit of the counter)",
        "ui_in[5]": "B",
        "ui_in[6]": "C",
        "ui_in[7]": "D (least significant bit of the counter)",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "segment g",
        "uo_out[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375217288209912833",
      "address": 288,
      "title": "Randomizer and status checker",
      "author": "Thomas Linden, Karla Gabrielly Viana Nascimento, Maria Eduarda Amelco, Arthur Hasse",
      "description": "it randomizes a number between 0 and 3, a corresponding led will light up. After that will compare with a button pressed by the user and say if it was true or false",
      "clock_hz": 64,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/karla-gabrielly/tt04-submission-Randomizer-and-Status-Checker",
      "commit": "e4bae70d3f243dff925d43ab92089393c722a63e",
      "pinout": {
        "ui_in[0]": "clock",
        "ui_in[1]": "on/off",
        "ui_in[2]": "button 0",
        "ui_in[3]": "button 1",
        "ui_in[4]": "button 2",
        "ui_in[5]": "button 3",
        "ui_in[6]": "button 4",
        "ui_in[7]": "seletor",
        "uo_out[0]": "LED 1",
        "uo_out[1]": "LED 2",
        "uo_out[2]": "LED 3",
        "uo_out[3]": "LED 4",
        "uo_out[4]": "LED True",
        "uo_out[5]": "LED False",
        "uo_out[6]": "",
        "uo_out[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375227079413963777",
      "address": 340,
      "title": "Fastest Finger",
      "author": "Chris Burton",
      "description": "Shows which button was pressed first",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/burtyb/tt04-fastest-finger",
      "commit": "10ffbd40966cb5b89f089a8398342e4f76280cc0",
      "pinout": {
        "ui_in[0]": "Button 0",
        "ui_in[1]": "Button 1",
        "ui_in[2]": "Button 2",
        "ui_in[3]": "Button 3",
        "ui_in[4]": "Button 4",
        "ui_in[5]": "Button 5",
        "ui_in[6]": "Button 6",
        "ui_in[7]": "Button 7",
        "uo_out[0]": "LED 0 / segment a",
        "uo_out[1]": "LED 1 / segment b",
        "uo_out[2]": "LED 2 / segment c",
        "uo_out[3]": "LED 3 / segment d",
        "uo_out[4]": "LED 4 / segment e",
        "uo_out[5]": "LED 5 / segment f",
        "uo_out[6]": "LED 6 / segment g",
        "uo_out[7]": "LED 7 / dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375245713375900673",
      "address": 289,
      "title": "Simulador de cruzamento de sem\u00e1foro",
      "author": "Gabriel Marcio Vieira, Renan Rosa Ferreira, Francisco Eduardo Gon\u00e7alves, Dayane Cassuriaga",
      "description": "Simulator of a traffic light at a two-way intersection with a pedestrian crosswalk.",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/GabrielVieiraa18/ProjetoSemaforo",
      "commit": "b1a2b8951171f95de0af9bcebf028a050654b28f",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "",
        "ui_in[3]": "",
        "ui_in[4]": "",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "S1 Vermelho",
        "uo_out[1]": "S1 Amarelo",
        "uo_out[2]": "S1 Verde",
        "uo_out[3]": "S2 Vermelho",
        "uo_out[4]": "S2 Amarelo",
        "uo_out[5]": "S2 Verde",
        "uo_out[6]": "Pedestres (PD) Vermelho",
        "uo_out[7]": "Pedestres (PD) Verde",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375246321309880321",
      "address": 279,
      "title": "IFSC 6-bit Locker",
      "author": "Gabriel Mota, Luis Davi Kenig Paganella and Vin\u00edcius Westphal de Paula",
      "description": "A lock that receives a 6-bit entry combination.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/viniwestphal/tt04-submission-IFSC-Locker",
      "commit": "96b29e572718d7e3370f07ea477c3522f8c6ffb9",
      "pinout": {
        "ui_in[0]": "Step Button",
        "ui_in[1]": "Reset Button",
        "ui_in[2]": "Switch Entry 1",
        "ui_in[3]": "Switch Entry 2",
        "ui_in[4]": "Switch Entry 3",
        "ui_in[5]": "Switch Entry 4",
        "ui_in[6]": "Switch Entry 5",
        "ui_in[7]": "Switch Entry 6",
        "uo_out[0]": "Lock Exit State",
        "uo_out[1]": "Lock Exit State",
        "uo_out[2]": "Lock Exit State",
        "uo_out[3]": "Lock Exit State",
        "uo_out[4]": "Lock Exit State",
        "uo_out[5]": "Lock Exit State",
        "uo_out[6]": "Lock Exit State",
        "uo_out[7]": "Lock Exit State",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375248885704300545",
      "address": 358,
      "title": "Probador de l\u00f3gica b\u00e1sico",
      "author": "Felipe R. Serrano Dom\u00ednguez",
      "description": "It allows to validate the operation of basic logic devices; gates and flip-flops individually ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/felipe-SD/tt04-submission-template-2",
      "commit": "4215300adc62c212be2c9857d4104bfe9f512c85",
      "pinout": {
        "ui_in[0]": "CLK (FLIP FLOPS)",
        "ui_in[1]": "RST (FLIP FLOPS)",
        "ui_in[2]": "INO (INPUT A GATE)",
        "ui_in[3]": "IN1 (INPUT B GATE)",
        "ui_in[4]": "IN2 (INPUT J FLIP FLOP)",
        "ui_in[5]": "IN3 (INPUT K FLIP FLOP)",
        "ui_in[6]": "IN4 (SET FLIP FLOP)",
        "ui_in[7]": "IN5 (D FLIP FLOP)",
        "uo_out[0]": "OUT 0 (GATE AND)",
        "uo_out[1]": "OUT 1 (GATE NAND)",
        "uo_out[2]": "OUT 2 (GATE OR)",
        "uo_out[3]": "OUT 3 (GATE NOR)",
        "uo_out[4]": "OUT 4 (GATE NOT)",
        "uo_out[5]": "OUT 5 (GATE XOR)",
        "uo_out[6]": "OUT 6 (FLIP FLOP Q)",
        "uo_out[7]": "OUT 7 (FLIP FLOP Q')",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375288605206694913",
      "address": 353,
      "title": "Adjustable Frequency LED Chaser",
      "author": "Daniel Teal",
      "description": "Animates a seven-segment display given any clock",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dteal/tt04-led-chaser",
      "commit": "9a5df22e8d46ed9d9b05c7b6607209cc00f6195b",
      "pinout": {
        "ui_in[0]": "enable 2x ($2^1$) divider",
        "ui_in[1]": "enable 4x ($2^2$) divider",
        "ui_in[2]": "enable 16x ($2^4$) divider",
        "ui_in[3]": "enable 256x ($2^8$) divider",
        "ui_in[4]": "enable 65536x ($2^{16}$) divider",
        "ui_in[5]": "n/c",
        "ui_in[6]": "n/c",
        "ui_in[7]": "n/c",
        "uo_out[0]": "segment a",
        "uo_out[1]": "segment b",
        "uo_out[2]": "segment c",
        "uo_out[3]": "segment d",
        "uo_out[4]": "segment e",
        "uo_out[5]": "segment f",
        "uo_out[6]": "n/c",
        "uo_out[7]": "n/c",
        "uio[0]": "n/c",
        "uio[1]": "n/c",
        "uio[2]": "n/c",
        "uio[3]": "n/c",
        "uio[4]": "n/c",
        "uio[5]": "n/c",
        "uio[6]": "n/c",
        "uio[7]": "n/c"
      }
    },
    {
      "macro": "tt_um_wokwi_375300958229329921",
      "address": 341,
      "title": "Fastest Finger (Clocked)",
      "author": "Chris Burton",
      "description": "Shows which button was pressed first",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/burtyb/tt04-fastest-finger-clocked",
      "commit": "7bf8887abcb3ba1c321282f613c7d75d6da330dd",
      "pinout": {
        "ui_in[0]": "Button 0",
        "ui_in[1]": "Button 1",
        "ui_in[2]": "Button 2",
        "ui_in[3]": "Button 3",
        "ui_in[4]": "Button 4",
        "ui_in[5]": "Button 5",
        "ui_in[6]": "Button 6",
        "ui_in[7]": "Button 7",
        "uo_out[0]": "LED 0 / segment a",
        "uo_out[1]": "LED 1 / segment b",
        "uo_out[2]": "LED 2 / segment c",
        "uo_out[3]": "LED 3 / segment d",
        "uo_out[4]": "LED 4 / segment e",
        "uo_out[5]": "LED 5 / segment f",
        "uo_out[6]": "LED 6 / segment g",
        "uo_out[7]": "LED 7 / dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_375310871188385793",
      "address": 354,
      "title": "Simple QSPI DAC",
      "author": "Piotr Kuligowski",
      "description": "Simple implementation of 8-bit R-2R DAC using QSPI interface + bi-directional port test breakout.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/pkuligowski/tt04-simple-qspi-dac",
      "commit": "d2a9910d6a337e9cc2d8131ea72452dbe1c36c81",
      "pinout": {
        "ui_in[0]": "DATA0",
        "ui_in[1]": "DATA1",
        "ui_in[2]": "DATA2",
        "ui_in[3]": "DATA3",
        "ui_in[4]": "nCS",
        "ui_in[5]": "",
        "ui_in[6]": "",
        "ui_in[7]": "",
        "uo_out[0]": "OUT0",
        "uo_out[1]": "OUT1",
        "uo_out[2]": "OUT2",
        "uo_out[3]": "OUT3",
        "uo_out[4]": "OUT4",
        "uo_out[5]": "OUT5",
        "uo_out[6]": "OUT6",
        "uo_out[7]": "OUT7",
        "uio[0]": "INTERMEDIATE0",
        "uio[1]": "INTERMEDIATE1",
        "uio[2]": "INTERMEDIATE2",
        "uio[3]": "INTERMEDIATE3",
        "uio[4]": "TESTED_UIO",
        "uio[5]": "TESTED_UIO_IN",
        "uio[6]": "TESTED_UIO_OUT",
        "uio[7]": "TESTED_UIO_OE"
      }
    },
    {
      "macro": "tt_um_wokwi_375326293008530433",
      "address": 356,
      "title": "Simple TMR",
      "author": "Piotr Kuligowski",
      "description": "Simple TMR (triple modular redundancy) voters with error injection option.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/pkuligowski/tt04-simple-tmr",
      "commit": "2172919ce00d50185fb0d37e2083de0701eb20a1",
      "pinout": {
        "ui_in[0]": "FF0_D_SINGLE",
        "ui_in[1]": "FF1_D_TMRed_WITH_INJECTION",
        "ui_in[2]": "FF2_D_TMRed_OR_INJECT_IN0_OF_D1",
        "ui_in[3]": "FF3_D_TMRed_OR_INJECT_IN1_OF_D1",
        "ui_in[4]": "FF4_D_TMRed_OR_INJECT_IN2_OF_D1",
        "ui_in[5]": "FF1_FF2_FF3_FF4_EN",
        "ui_in[6]": "FF1_INJECT",
        "ui_in[7]": "CLK",
        "uo_out[0]": "Q0_SINGLE",
        "uo_out[1]": "FF1_OUT0",
        "uo_out[2]": "FF1_OUT1",
        "uo_out[3]": "FF1_OUT2",
        "uo_out[4]": "FF1_TMRed_OUT",
        "uo_out[5]": "FF2_TMRed_OUT",
        "uo_out[6]": "FF3_TMRed_OUT",
        "uo_out[7]": "FF4_TMRed_OUT",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_yeokm1_pwm_audio",
      "address": 21,
      "title": "PWM audio",
      "author": "Yeo Kheng Meng",
      "description": "Takes in 8-bit audio over a parallel (port) interface then generates an analog audio signal like a Covox Speech Thing.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yeokm1/tt4-pwm-audio",
      "commit": "2711fa818d8e565457995c16f216f966a17c57b5",
      "pinout": {
        "ui_in[0]": "Bit 0 of Parallel port (LSB)",
        "ui_in[1]": "Bit 1 of Parallel port",
        "ui_in[2]": "Bit 2 of Parallel port",
        "ui_in[3]": "Bit 3 of Parallel port",
        "ui_in[4]": "Bit 4 of Parallel port",
        "ui_in[5]": "Bit 5 of Parallel port",
        "ui_in[6]": "Bit 6 of Parallel port",
        "ui_in[7]": "Bit 7 of Parallel port (MSB)",
        "uo_out[0]": "Standard PWM audio output",
        "uo_out[1]": "Sigma-delta modulator output",
        "uo_out[2]": "From ena pin",
        "uo_out[3]": "From clk pin",
        "uo_out[4]": "From rst_n pin",
        "uo_out[5]": "Static 1",
        "uo_out[6]": "Static 0",
        "uo_out[7]": "Static 1",
        "uio[0]": "Direct from input 0",
        "uio[1]": "Direct from input 1",
        "uio[2]": "Direct from input 2",
        "uio[3]": "Direct from input 3",
        "uio[4]": "Direct from input 4",
        "uio[5]": "Direct from input 5",
        "uio[6]": "Direct from input 6",
        "uio[7]": "Direct from input 7"
      }
    },
    {
      "macro": "tt_um_zeptobars",
      "address": 342,
      "title": "Oscillators II",
      "author": "Mikhail Svarichevsky",
      "description": "Free-running oscillators to verify simulation vs reality + TRNG",
      "clock_hz": 1000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BarsMonster/tt04-MicroAsicVII",
      "commit": "08fc3cfdd6a3625cdf2b58f3ae76e756ba2bad06",
      "pinout": {
        "ui_in[0]": "",
        "ui_in[1]": "",
        "ui_in[2]": "shift register clk",
        "ui_in[3]": "shift register data",
        "ui_in[4]": "clock source id_0",
        "ui_in[5]": "clock source id_1",
        "ui_in[6]": "clock source id_2",
        "ui_in[7]": "",
        "uo_out[0]": "generated clock",
        "uo_out[1]": "clock divided by 2^1",
        "uo_out[2]": "clock divided by 2^2",
        "uo_out[3]": "clock divided by 2^3",
        "uo_out[4]": "clock divided by 2^4",
        "uo_out[5]": "clock divided by 2^9",
        "uo_out[6]": "TRNG output",
        "uo_out[7]": "Bit 11 of shift register",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    }
  ]
}