{
  "version": 3,
  "id": "tt03",
  "name": "Tiny Tapeout 3",
  "repo": "https://github.com/TinyTapeout/tinytapeout-03",
  "commit": "dec49015b768c9e742b865eacc01ea930e1fb204",
  "projects": [
    {
      "macro": "AidanMedcalf_pid_controller",
      "address": 165,
      "title": "TinyPID",
      "author": "Aidan Medcalf",
      "description": "Tiny PID controller with SPI configuration channel, SPI ADC and DAC driver",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AidanMedcalf/tt02-pid",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "cfg_clk",
        "io_in[4]": "cfg_mosi",
        "io_in[5]": "",
        "io_in[6]": "cfg_cs",
        "io_in[7]": "pv_in_miso",
        "io_out[0]": "pv_in_clk",
        "io_out[1]": "pv_in_cs",
        "io_out[2]": "out_clk",
        "io_out[3]": "out_mosi",
        "io_out[4]": "out_cs",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "Asma_Mohsin_conv_enc_core",
      "address": 207,
      "title": "channel coding",
      "author": "Asma Mohsin",
      "description": "Convolutional coding is widely used in modern digital communication systems.We often get encoded data by using different polynomials having same constraint lengths (K).",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AsmaMohsin1507/tt02-channel-coding",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "data valid",
        "io_in[3]": "data input",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "encoded data",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "BB_SYSTEM",
      "address": 242,
      "title": "PSRANDOM",
      "author": "CMUA F.Segura-Quijano, J.S.Moya",
      "description": "Pseudo Random generator.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/darkfsegura/tt03-verilog-cmua-psrandom",
      "commit": "",
      "pinout": {
        "io_in[0]": "BB_SYSTEM_CLOCK_50",
        "io_in[1]": "BB_SYSTEM_RESET_InHigh",
        "io_in[2]": "BB_SYSTEM_loadseed_InLow",
        "io_in[3]": "BB_SYSTEM_loaddata_InLow",
        "io_in[4]": "BB_SYSTEM_rand_InLow",
        "io_in[5]": "BB_SYSTEM_data_InBUS[0]",
        "io_in[6]": "BB_SYSTEM_data_InBUS[1]",
        "io_in[7]": "BB_SYSTEM_data_InBUS[2]",
        "io_out[0]": "BB_SYSTEM_data_OutBUS[7]",
        "io_out[1]": "BB_SYSTEM_data_OutBUS[6]",
        "io_out[2]": "BB_SYSTEM_data_OutBUS[5]",
        "io_out[3]": "BB_SYSTEM_data_OutBUS[4]",
        "io_out[4]": "BB_SYSTEM_data_OutBUS[3]",
        "io_out[5]": "BB_SYSTEM_data_OutBUS[2]",
        "io_out[6]": "BB_SYSTEM_data_OutBUS[1]",
        "io_out[7]": "BB_SYSTEM_data_OutBUS[0]"
      }
    },
    {
      "macro": "BenAtUvu_combo",
      "address": 57,
      "title": "Combo lock",
      "author": "Benjamin Collier",
      "description": "set, reset, and check for a combo",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BenAtUvu/tt03-ComboLock",
      "commit": "",
      "pinout": {
        "io_in[0]": "input 0",
        "io_in[1]": "input 1",
        "io_in[2]": "input 2",
        "io_in[3]": "input 3",
        "io_in[4]": "reset",
        "io_in[5]": "master reset",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "unlock",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "FSM_LAT",
      "address": 59,
      "title": "FSM_LAT",
      "author": "Juan Sanchez",
      "description": "FSM look at table",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Juander28/tt03-FSM-LOOK-AT-TABLE-LATAM",
      "commit": "",
      "pinout": {
        "io_in[0]": "oi_in[0]",
        "io_in[1]": "oi_in[1]",
        "io_in[2]": "oi_in[2]",
        "io_in[3]": "oi_in[3]",
        "io_in[4]": "oi_in[4]",
        "io_in[5]": "oi_in[5]",
        "io_in[6]": "oi_in[6]",
        "io_in[7]": "oi_in[7]",
        "io_out[0]": "oi_out[1]",
        "io_out[1]": "oi_out[2]",
        "io_out[2]": "oi_out[3]",
        "io_out[3]": "oi_out[4]",
        "io_out[4]": "oi_out[5]",
        "io_out[5]": "oi_out[6]",
        "io_out[6]": "oi_out[7]",
        "io_out[7]": "oi_out[0]"
      }
    },
    {
      "macro": "HiddenRoom_HiddenCPU",
      "address": 64,
      "title": "HiddenCPU",
      "author": "HiddenRoom",
      "description": "Basic 8 bit CPU.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/HiddenRoom/tt03-hiddenCPU",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "opcode bit zero",
        "io_in[3]": "opcode bit one",
        "io_in[4]": "result reg address bit zero",
        "io_in[5]": "result reg address bit one",
        "io_in[6]": "non result operand reg address bit zero",
        "io_in[7]": "non result operand reg address bit one",
        "io_out[0]": "bit zero of hardwired output reg number at address 11b or pc",
        "io_out[1]": "bit one of hardwired output reg number at address 11b or pc",
        "io_out[2]": "bit two of hardwired output reg number at address 11b or pc",
        "io_out[3]": "bit three of hardwired output reg number at address 11b or pc",
        "io_out[4]": "bit four of hardwired output reg number at address 11b or pc",
        "io_out[5]": "bit five of hardwired output reg number at address 11b or pc",
        "io_out[6]": "bit six of hardwired output reg number at address 11b or pc",
        "io_out[7]": "bit seven of hardwired output reg number at address 11b or pc"
      }
    },
    {
      "macro": "MichaelBell_6bit_fifo",
      "address": 29,
      "title": "6-bit FIFO",
      "author": "Mike Bell",
      "description": "Implementation of a FIFO",
      "clock_hz": 50000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MichaelBell/tt03-fifo",
      "commit": "",
      "pinout": {
        "io_in[0]": "Clock",
        "io_in[1]": "Mode (Write enable)",
        "io_in[2]": "Reset_n / Data 0",
        "io_in[3]": "Pop / Data 1",
        "io_in[4]": "Peek A0 / Data 2",
        "io_in[5]": "Peek A1 / Data 3",
        "io_in[6]": "Unused / Data 4",
        "io_in[7]": "Unused / Data 5",
        "io_out[0]": "Ready",
        "io_out[1]": "Empty_n",
        "io_out[2]": "Data 0",
        "io_out[3]": "Data 1",
        "io_out[4]": "Data 2",
        "io_out[5]": "Data 3",
        "io_out[6]": "Data 4",
        "io_out[7]": "Data 5"
      }
    },
    {
      "macro": "MichaelBell_hovalaag",
      "address": 9,
      "title": "Hovalaag CPU",
      "author": "Mike Bell",
      "description": "Implementation of the CPU from HOVALAAG",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MichaelBell/tt03-hovalaag",
      "commit": "",
      "pinout": {
        "io_in[0]": "Clock",
        "io_in[1]": "Reset disable (resets enabled when low)",
        "io_in[2]": "Input 0 or Reset (when high)",
        "io_in[3]": "Input 1 or Reset subcycle count (when high)",
        "io_in[4]": "Input 2 or enable ROSC (when high and reset enabled)",
        "io_in[5]": "Input 3",
        "io_in[6]": "Input 4",
        "io_in[7]": "Input 5",
        "io_out[0]": "Output 0",
        "io_out[1]": "Output 1",
        "io_out[2]": "Output 2",
        "io_out[3]": "Output 3",
        "io_out[4]": "Output 4",
        "io_out[5]": "Output 5",
        "io_out[6]": "Output 6",
        "io_out[7]": "Output 7"
      }
    },
    {
      "macro": "adamgreig_tt02_adc_dac",
      "address": 189,
      "title": "Sigma-Delta ADC/DAC",
      "author": "Adam Greig",
      "description": "Simple ADC and DAC",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/adamgreig/tt02-adc-dac",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "adc_in",
        "io_in[3]": "uart_in",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "adc_out",
        "io_out[1]": "uart_out",
        "io_out[2]": "dac_out",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "adamgreig_tt02_gps_ca_prn",
      "address": 188,
      "title": "GPS C/A PRN Generator",
      "author": "Adam Greig",
      "description": "Generate the GPS C/A PRN sequences PRN1 through PRN32",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/adamgreig/tt02-gpa-ca-prn",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "prn[0]",
        "io_in[3]": "prn[1]",
        "io_in[4]": "prn[2]",
        "io_in[5]": "prn[3]",
        "io_in[6]": "prn[4]",
        "io_in[7]": "",
        "io_out[0]": "G1",
        "io_out[1]": "G2",
        "io_out[2]": "Selected PRN",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "adder",
      "address": 91,
      "title": "Simple adder used for educational purposes",
      "author": "Francisco Brito Filho",
      "description": "Simple adder used for educational purposes described in VHDL and ported to verilog using ghdl plugin.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/staydh/tt03-verilog-adder4b",
      "commit": "",
      "pinout": {
        "io_in[0]": "i0[3]",
        "io_in[1]": "i0[2]",
        "io_in[2]": "i0[1]",
        "io_in[3]": "i0[0]",
        "io_in[4]": "i1[3]",
        "io_in[5]": "i1[2]",
        "io_in[6]": "i1[1]",
        "io_in[7]": "i1[0]",
        "io_out[0]": "s[3]",
        "io_out[1]": "s[2]",
        "io_out[2]": "s[1]",
        "io_out[3]": "s[0]",
        "io_out[4]": "co",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "afoote_w5s8_tt02_top",
      "address": 214,
      "title": "w5s8: universal turing machine core",
      "author": "Andrew Foote",
      "description": "State transition logic for a 5-state, 8-symbol universal turing machine",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/andars/tt02-universal-turing-machine-w5s8",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "state_in[0]",
        "io_in[2]": "state_in[1]",
        "io_in[3]": "state_in[2]",
        "io_in[4]": "sym_in[0]",
        "io_in[5]": "sym_in[1]",
        "io_in[6]": "sym_in[2]",
        "io_in[7]": "mode",
        "io_out[0]": "",
        "io_out[1]": "next_direction",
        "io_out[2]": "new_sym[0]",
        "io_out[3]": "new_sym[1]",
        "io_out[4]": "new_sym[2]",
        "io_out[5]": "new_state[0]",
        "io_out[6]": "new_state[1]",
        "io_out[7]": "new_state[2]"
      }
    },
    {
      "macro": "aidan_McCoy",
      "address": 98,
      "title": "The McCoy 8-bit Microprocessor",
      "author": "Aidan Good",
      "description": "Custom RISC-V inspired microprocessor capable of simple arithmatic, branching, and jumps through a custom ISA.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AidanGood/tt02-McCoy",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "reset",
        "io_in[2]": "in0",
        "io_in[3]": "in1",
        "io_in[4]": "in2",
        "io_in[5]": "in3",
        "io_in[6]": "in4",
        "io_in[7]": "in5",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "out7"
      }
    },
    {
      "macro": "aidan_mcnay_PrimeDetector",
      "address": 31,
      "title": "31b-PrimeDetector",
      "author": "Aidan McNay",
      "description": "Detects whether a 31-bit number is prime or not",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Aidan-McNay/31b-PrimeDetection",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "SDI",
        "io_in[3]": "SCLK",
        "io_in[4]": "CS",
        "io_in[5]": "ready",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "done",
        "io_out[1]": "is_prime",
        "io_out[2]": "waiting",
        "io_out[3]": "GND",
        "io_out[4]": "GND",
        "io_out[5]": "GND",
        "io_out[6]": "GND",
        "io_out[7]": "GND"
      }
    },
    {
      "macro": "algofoogle_product",
      "address": 24,
      "title": "Simple multiply",
      "author": "Anton Maurovic",
      "description": "Multiply two 8-bit numbers, get a 16-bit result.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/algofoogle/anton1-tt03",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "nibble[0]",
        "io_in[5]": "nibble[1]",
        "io_in[6]": "nibble[2]",
        "io_in[7]": "nibble[3]",
        "io_out[0]": "result[0]",
        "io_out[1]": "result[1]",
        "io_out[2]": "result[2]",
        "io_out[3]": "result[3]",
        "io_out[4]": "result[4]",
        "io_out[5]": "result[5]",
        "io_out[6]": "result[6]",
        "io_out[7]": "result[7]"
      }
    },
    {
      "macro": "alu_top",
      "address": 97,
      "title": "ALU",
      "author": "Ryan Cornateanu",
      "description": "2bit ALU with a ripple carry adder that has the capability to perform 16 different calculations",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ryancor/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "A1",
        "io_in[1]": "A2",
        "io_in[2]": "B1",
        "io_in[3]": "B2",
        "io_in[4]": "ALU_Sel1",
        "io_in[5]": "ALU_Sel2",
        "io_in[6]": "ALU_Sel3",
        "io_in[7]": "ALU_Sel4",
        "io_out[0]": "ALU_Out1",
        "io_out[1]": "ALU_Out2",
        "io_out[2]": "ALU_Out3",
        "io_out[3]": "ALU_Out4",
        "io_out[4]": "ALU_Out5",
        "io_out[5]": "ALU_Out6",
        "io_out[6]": "ALU_Out7",
        "io_out[7]": "CarryOut"
      }
    },
    {
      "macro": "andrewm_parallel_to_uart",
      "address": 25,
      "title": "Parallel Nibble to UART",
      "author": "Andrew M",
      "description": "Loads two half-bytes into registers, then sends over UART",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/andrewmourcos/tt03-verilog-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "data1",
        "io_in[3]": "data2",
        "io_in[4]": "data3",
        "io_in[5]": "data4",
        "io_in[6]": "mode1",
        "io_in[7]": "mode2",
        "io_out[0]": "uart_tx",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "aramsey118_freq_counter",
      "address": 177,
      "title": "Frequency Counter",
      "author": "Andrew Ramsey",
      "description": "Estimates the frequency of an input signal",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ARamsey118/tiny_tapeout_freq_counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "signal",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "signal"
      }
    },
    {
      "macro": "asic_multiplier_wrapper",
      "address": 114,
      "title": "4-bit Multiplier",
      "author": "Fernando Dominguez Pousa",
      "description": "4-bit Multiplier based on single bit full adders",
      "clock_hz": 2500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kuriousd/tt02-4bit-multiplier",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "i_factor_a[0]",
        "io_in[3]": "i_factor_a[1]",
        "io_in[4]": "i_factor_a[2]",
        "io_in[5]": "i_factor_b[3]",
        "io_in[6]": "i_factor_b[4]",
        "io_in[7]": "i_factor_b[5]",
        "io_out[0]": "segment_1 (o_segments[0])",
        "io_out[1]": "segment_2 (o_segments[1])",
        "io_out[2]": "segment_3 (o_segments[2])",
        "io_out[3]": "segment_4 (o_segments[3])",
        "io_out[4]": "segment_5 (o_segments[4])",
        "io_out[5]": "segment_6 (o_segments[5])",
        "io_out[6]": "segment_7 (o_segments[6])",
        "io_out[7]": "segment_dot (o_lsb_digit)"
      }
    },
    {
      "macro": "azdle_binary_clock",
      "address": 99,
      "title": "binary clock",
      "author": "Azdle",
      "description": "A binary clock using multiplexed LEDs",
      "clock_hz": 200,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/azdle/binary-clock-asic",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "pps",
        "io_in[3]": "hours_b1",
        "io_in[4]": "hours_b2",
        "io_in[5]": "hours_b4",
        "io_in[6]": "hours_b8",
        "io_in[7]": "hours_b16",
        "io_out[0]": "col 0",
        "io_out[1]": "col 1",
        "io_out[2]": "col 2",
        "io_out[3]": "col 3",
        "io_out[4]": "row 0",
        "io_out[5]": "row 2",
        "io_out[6]": "row 3",
        "io_out[7]": ""
      }
    },
    {
      "macro": "bat52_pwm_ddpm_top",
      "address": 33,
      "title": "Pulse-Density Modulators",
      "author": "Marco Merlin",
      "description": "An implementation of a DDPM, PWM and Sigma-Delta Pulse-Density Modulators with python libraries myHDL and PuEDA.",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bat52/tt03-ddpm-pwm",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "resetn",
        "io_in[2]": "inval[0]",
        "io_in[3]": "inval[1]",
        "io_in[4]": "inval[2]",
        "io_in[5]": "inval[3]",
        "io_in[6]": "inval[4]",
        "io_in[7]": "inval[5]",
        "io_out[0]": "pwm       / segment a",
        "io_out[1]": "ddpm      / segment b",
        "io_out[2]": "sd        / segment c",
        "io_out[3]": "0'b1      / segment d",
        "io_out[4]": "pwm_sine  / segment e",
        "io_out[5]": "ddpm_sine / segment f",
        "io_out[6]": "sd_sine   / segment g",
        "io_out[7]": "0'b1      / dot"
      }
    },
    {
      "macro": "blueintegral_mat_mult",
      "address": 77,
      "title": "AI Decelerator",
      "author": "Hunter Scott",
      "description": "A 2x2 matrix multiplier, guaranteed to slow down your AI model training.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/blueintegral/tt03-ai-decelerator",
      "commit": "",
      "pinout": {
        "io_in[0]": "7 is Matrix 1, top left",
        "io_in[1]": "6 is Matrix 1, top right",
        "io_in[2]": "5 is Matrix 1, bottom left",
        "io_in[3]": "4 is Matrix 1, bottom right",
        "io_in[4]": "3 is Matrix 2, top left",
        "io_in[5]": "2 is Matrix 2, top right",
        "io_in[6]": "1 is Matrix 2, bottom left",
        "io_in[7]": "0 is Matrix 2, bottom right",
        "io_out[0]": "7 is Result matrix, top left, bit 1",
        "io_out[1]": "6 is Result matrix, top left, bit 0",
        "io_out[2]": "5 is Result matrix, top right, bit 1",
        "io_out[3]": "4 is Result matrix, top right, bit 0",
        "io_out[4]": "3 is Result matrix, bottom left, bit 1",
        "io_out[5]": "2 is Result matrix, bottom left, bit 0",
        "io_out[6]": "1 is Result matrix, bottom right, bit 1",
        "io_out[7]": "0 is Result matrix, bottom right, bit 0"
      }
    },
    {
      "macro": "browndeer_rv8u",
      "address": 196,
      "title": "RV8U - 8-bit RISC-V Microcore Processor",
      "author": "David Richie",
      "description": "8-bit processor based on RISC-V ISA",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/browndeer/rv8u",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "serdes input bit 0",
        "io_in[3]": "serdes input bit 1",
        "io_in[4]": "serdes input bit 2",
        "io_in[5]": "serdes input bit 3",
        "io_in[6]": "serdes input bit 4",
        "io_in[7]": "serdes input bit 5",
        "io_out[0]": "serdes output bit 0",
        "io_out[1]": "serdes output bit 1",
        "io_out[2]": "serdes output bit 2",
        "io_out[3]": "serdes output bit 3",
        "io_out[4]": "serdes output bit 4",
        "io_out[5]": "serdes output bit 5",
        "io_out[6]": "serdes output bit 6",
        "io_out[7]": "serdes output bit 7"
      }
    },
    {
      "macro": "c_TT3_BTCALC8",
      "address": 244,
      "title": "Balanced Ternary Calculator",
      "author": "Steven Bos",
      "description": "A balanced ternary calculator allowing multiplication, addition and subtraction with negative numbers in binary encoded ternary",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt03-balanced-ternary-calculator",
      "commit": "",
      "pinout": {
        "io_in[0]": "x1H",
        "io_in[1]": "x1L",
        "io_in[2]": "x0H",
        "io_in[3]": "x0L",
        "io_in[4]": "Y1H",
        "io_in[5]": "y1L",
        "io_in[6]": "y0H",
        "io_in[7]": "y0L (reused as function selector, eg add/subtract or multiply)",
        "io_out[0]": "s3H",
        "io_out[1]": "s3L",
        "io_out[2]": "s2H",
        "io_out[3]": "s2L",
        "io_out[4]": "s1H",
        "io_out[5]": "s1L",
        "io_out[6]": "s0H",
        "io_out[7]": "s0L"
      }
    },
    {
      "macro": "cchan_fp8_multiplier",
      "address": 149,
      "title": "8-bit (E4M3) Floating Point Multiplier",
      "author": "Clive Chan",
      "description": "8-bit (E4M3) Floating Point Multiplier",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cchan/fp8_mul",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "ctrl0",
        "io_in[2]": "ctrl1",
        "io_in[3]": "ctrl2",
        "io_in[4]": "data0",
        "io_in[5]": "data1",
        "io_in[6]": "data2",
        "io_in[7]": "data3",
        "io_out[0]": "sign",
        "io_out[1]": "exponent",
        "io_out[2]": "exponent",
        "io_out[3]": "exponent",
        "io_out[4]": "exponent",
        "io_out[5]": "mantissa",
        "io_out[6]": "mantissa",
        "io_out[7]": "mantissa"
      }
    },
    {
      "macro": "chase_the_beat",
      "address": 111,
      "title": "chase the beat",
      "author": "Emil J Tywoniak",
      "description": "Tap twice to the beat, the outputs will chase the beat. Or generate some audio noise!",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ekliptik/tt02-chase-the-beat",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "tap",
        "io_in[3]": "mode",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "o_0 - LED or noise output",
        "io_out[1]": "o_1 - LED",
        "io_out[2]": "o_2 - LED",
        "io_out[3]": "o_3 - LED",
        "io_out[4]": "o_4 - LED",
        "io_out[5]": "o_5 - LED",
        "io_out[6]": "o_6 - LED",
        "io_out[7]": "o_7 - LED"
      }
    },
    {
      "macro": "chrisruk_matrix",
      "address": 94,
      "title": "Scrolling Binary Matrix display",
      "author": "Chris",
      "description": "Display scrolling binary data from input pin on 8x8 SK9822 LED matrix display",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/chrisruk/matrixchip",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "digit",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "LED Clock",
        "io_out[1]": "LED Data",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "clemensnasenberg_top",
      "address": 68,
      "title": "I2S reeceiver, data mix and transmitter",
      "author": "Clemens Nasenberg",
      "description": "Mix two I2S streams according to selection",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cnasenbe/tt03-chnasenb-i2s",
      "commit": "",
      "pinout": {
        "io_in[0]": "sck",
        "io_in[1]": "reset",
        "io_in[2]": "ws",
        "io_in[3]": "sd_ch1",
        "io_in[4]": "sd_ch2",
        "io_in[5]": "channel_sel",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "wsd",
        "io_out[1]": "wsp",
        "io_out[2]": "sd_out",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "cpldcpu_MCPU5plus",
      "address": 167,
      "title": "Zinnia+ (MCPU5+) 8 Bit CPU",
      "author": "cpldcpu",
      "description": "A minimal 8 bit CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cpldcpu/tt02-mcpu5plus",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "inst_in[0]",
        "io_in[3]": "inst_in[1]",
        "io_in[4]": "inst_in[2]",
        "io_in[5]": "inst_in[3]",
        "io_in[6]": "inst_in[4]",
        "io_in[7]": "inst_in[5]",
        "io_out[0]": "cpu_out[0]",
        "io_out[1]": "cpu_out[1]",
        "io_out[2]": "cpu_out[2]",
        "io_out[3]": "cpu_out[3]",
        "io_out[4]": "cpu_out[4]",
        "io_out[5]": "cpu_out[5]",
        "io_out[6]": "cpu_out[6]",
        "io_out[7]": "cpu_out[7]"
      }
    },
    {
      "macro": "cpldcpu_TrainLED2top",
      "address": 166,
      "title": "TrainLED2 - RGB-LED driver with 8 bit PWM engine",
      "author": "cpldcpu",
      "description": "A RGB-LED driver using the WS2812 protocol",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cpldcpu/tt02-TrainLED",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "Din Driver A",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "Dout Driver A",
        "io_out[1]": "LED1A",
        "io_out[2]": "LED2A",
        "io_out[3]": "LED3A",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "davidsiaw_stackcalc",
      "address": 169,
      "title": "Stack Calculator",
      "author": "David Siaw",
      "description": "A stack based 4-bit calculator featuring a 4-bit wide 8 entry deep stack and 64 bits of random access memory.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/davidsiaw/tt02-davidsiaw-stackcalc",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "input0",
        "io_in[3]": "input1",
        "io_in[4]": "input2",
        "io_in[5]": "input3",
        "io_in[6]": "mode0",
        "io_in[7]": "mode1",
        "io_out[0]": "output0",
        "io_out[1]": "output1",
        "io_out[2]": "output2",
        "io_out[3]": "output3",
        "io_out[4]": "output4",
        "io_out[5]": "output5",
        "io_out[6]": "output6",
        "io_out[7]": "output7"
      }
    },
    {
      "macro": "diferential_muxpga",
      "address": 17,
      "title": "TinyFPGA attempt for TinyTapeout3",
      "author": "Emilian Miron",
      "description": "FPGA attempt",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diferential/muxpga",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "diferential_rvb1",
      "address": 245,
      "title": "RiscV Scan Chain based CPU -- block 1 -- clocking",
      "author": "Emilian Miron",
      "description": "RiscV Scan Chain based CPU -- block 1 -- clocking",
      "clock_hz": 20000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diferential/sc-rv-tt03-block1",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "diferential_rvb2",
      "address": 246,
      "title": "RiscV Scan Chain based CPU -- block 2 -- instructions",
      "author": "Emilian Miron",
      "description": "RiscV Scan Chain based CPU -- block 2 -- instructions",
      "clock_hz": 20000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diferential/sc-rv-tt03-block2",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "diferential_rvb3",
      "address": 247,
      "title": "RiscV Scan Chain based CPU -- block 3 -- registers",
      "author": "Emilian Miron",
      "description": "RiscV Scan Chain based CPU -- block 3 -- registers",
      "clock_hz": 20000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diferential/sc-rv-tt03-block3",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "diferential_rvb4",
      "address": 248,
      "title": "RiscV Scan Chain based CPU -- block 4 -- ALU",
      "author": "Emilian Miron",
      "description": "RiscV Scan Chain based CPU -- block 4 -- ALU",
      "clock_hz": 20000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diferential/sc-rv-tt03-block4",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "dratini0_fsk_modem_top",
      "address": 62,
      "title": "FSK modem",
      "author": "Balint Kovacs",
      "description": "Very simple FSK modem, comparable to Bell 103",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dratini0/tt03-fsk-modem",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "cs_n",
        "io_in[3]": "sck",
        "io_in[4]": "mosi",
        "io_in[5]": "data_in",
        "io_in[6]": "",
        "io_in[7]": "samples_in",
        "io_out[0]": "data_out",
        "io_out[1]": "valid_out",
        "io_out[2]": "samples_out[0]",
        "io_out[3]": "samples_out[1]",
        "io_out[4]": "samples_out[2]",
        "io_out[5]": "samples_out[3]",
        "io_out[6]": "samples_out[4]",
        "io_out[7]": "samples_out[5]"
      }
    },
    {
      "macro": "dratini0_pov_display_top",
      "address": 40,
      "title": "POV display",
      "author": "Balint Kovacs",
      "description": "Small POV display",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dratini0/tt03-pov-display",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "cs_n",
        "io_in[2]": "sck",
        "io_in[3]": "mosi",
        "io_in[4]": "hall_in",
        "io_in[5]": "hall_invert",
        "io_in[6]": "divider[0]",
        "io_in[7]": "divider[1]",
        "io_out[0]": "led0",
        "io_out[1]": "led1",
        "io_out[2]": "led2",
        "io_out[3]": "led3",
        "io_out[4]": "led4",
        "io_out[5]": "led5",
        "io_out[6]": "led6",
        "io_out[7]": "led7"
      }
    },
    {
      "macro": "dsp_4bits_seq_alu",
      "address": 48,
      "title": "4-bits sequential ALU",
      "author": "Diego Satizabal",
      "description": "A 4-bits sequential ALU that takes operands and opcode seqentially and performs operations and outputs results",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dsatizabal/tt03-dsp-4bits-sequential-alu",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "enabled",
        "io_in[3]": "",
        "io_in[4]": "Opx_opcode_0",
        "io_in[5]": "Opx_opcode_1",
        "io_in[6]": "Opx_opcode_2",
        "io_in[7]": "Opx_opcode_3",
        "io_out[0]": "result_0",
        "io_out[1]": "result_1",
        "io_out[2]": "result_2",
        "io_out[3]": "result_3",
        "io_out[4]": "done_flag",
        "io_out[5]": "carry_flag",
        "io_out[6]": "zero_flag",
        "io_out[7]": "sign_flag"
      }
    },
    {
      "macro": "dwisehart_ring_top",
      "address": 80,
      "title": "Ring oscillator with skew correction",
      "author": "Daniel Wisehart",
      "description": "Fixing the problem of skew in a ring oscillator with a differential clock ring. ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dwisehart/tt03-ring-grey",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "not reset",
        "io_in[2]": "select[5]",
        "io_in[3]": "select[4]",
        "io_in[4]": "select[3]",
        "io_in[5]": "select[2]",
        "io_in[6]": "select[1]",
        "io_in[7]": "select[0]",
        "io_out[0]": "output[7] LED seg a",
        "io_out[1]": "output[6] LED seg b",
        "io_out[2]": "output[5] LED seg c",
        "io_out[3]": "output[4] LED seg e",
        "io_out[4]": "output[3] LED seg f",
        "io_out[5]": "output[2] LED seg g",
        "io_out[6]": "output[1] LED seg h",
        "io_out[7]": "output[0] LED point"
      }
    },
    {
      "macro": "dwisehart_top",
      "address": 42,
      "title": "Base-10 grey counter counts from zero to a trillion",
      "author": "Daniel Wisehart",
      "description": "Change only one output bit per count, but count with decimal digits instead of the usual reverse bit order grey counter.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dwisehart/tt03-submission",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "select[5]",
        "io_in[3]": "select[4]",
        "io_in[4]": "select[3]",
        "io_in[5]": "select[2]",
        "io_in[6]": "select[1]",
        "io_in[7]": "select[0]",
        "io_out[0]": "output[7]",
        "io_out[1]": "output[6]",
        "io_out[2]": "output[5]",
        "io_out[3]": "output[4]",
        "io_out[4]": "output[3]",
        "io_out[5]": "output[2]",
        "io_out[6]": "output[1]",
        "io_out[7]": "output[0]"
      }
    },
    {
      "macro": "ericsmi_speed_test",
      "address": 164,
      "title": "Ring OSC Speed Test",
      "author": "Eric Smith",
      "description": "Make two rings with the same number of stages but measure how their frequency differs.  Measure if they can influence eachother.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ericsmi/tt02-verilog-ring-osc-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "nreset",
        "io_in[2]": "trig",
        "io_in[3]": "sel[0]",
        "io_in[4]": "sel[1]",
        "io_in[5]": "sel[2]",
        "io_in[6]": "ring_en[0]",
        "io_in[7]": "ring_en[1]",
        "io_out[0]": "out[0]",
        "io_out[1]": "out[1]",
        "io_out[2]": "out[2]",
        "io_out[3]": "out[3]",
        "io_out[4]": "out[4]",
        "io_out[5]": "out[5]",
        "io_out[6]": "out[6]",
        "io_out[7]": "out[7]"
      }
    },
    {
      "macro": "femto_top",
      "address": 232,
      "title": "Femto 4-bit CPU",
      "author": "Majdi Abdul Samad, ECE Dept., American University of Beirut (mia42@mail.aub.edu)",
      "description": "Design of a small single-cycle CPU with simple RISC/Accumulator ISA",
      "clock_hz": 5,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/majdiabdulsamad/tt02-Femto",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "opcode[0]",
        "io_in[2]": "opcode[1]",
        "io_in[3]": "opcode[2]",
        "io_in[4]": "reg_dest[0]",
        "io_in[5]": "reg_dest[1]",
        "io_in[6]": "reg_src[0]",
        "io_in[7]": "reg_src[1]",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "flygoat_tt02_play_tune",
      "address": 144,
      "title": "Multiple Tunes on A Piezo Speaker",
      "author": "Jiaxun Yang",
      "description": "Plays multiple Tunes over a Piezo Speaker connected across io_out[1:0]",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/FlyGoat/tt02-play-tune-flygoat",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "tune_sel0",
        "io_in[3]": "tune_sel1",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "ledout_0",
        "io_out[3]": "ledout_1",
        "io_out[4]": "ledout_2",
        "io_out[5]": "ledout_3",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "fraserbc_simon",
      "address": 92,
      "title": "SIMON Cipher",
      "author": "Fraser Price",
      "description": "Simon32/64 Encryption",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Fraserbc/tt02-simon",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "shift",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "data_out[0]",
        "io_out[1]": "data_out[1]",
        "io_out[2]": "data_out[2]",
        "io_out[3]": "data_out[3]",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "frog",
      "address": 203,
      "title": "FROG 4-Bit CPU",
      "author": "ChrisPVille",
      "description": "The FROG is an extremely minimal load-store 4-bit CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ChrisPVille/tt02-FROG4bitCPU",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_p",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "",
        "io_in[7]": "fast - zero wait state memory mode",
        "io_out[0]": "addr[0]",
        "io_out[1]": "addr[1]",
        "io_out[2]": "addr[2]",
        "io_out[3]": "addr[3]",
        "io_out[4]": "addr[4]",
        "io_out[5]": "addr[5]",
        "io_out[6]": "addr[6]",
        "io_out[7]": "write memory cycle"
      }
    },
    {
      "macro": "gameshow_buzzer",
      "address": 243,
      "title": "Gameshow Buzzer",
      "author": "Christopher Haddad, Jenna Nandlall, Matthew Nunez, Farhan Kobir",
      "description": "Jeopardy gameshow type of buzzer.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/chrisnhaddad/tt03-gameshowbuzzer",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "gatecat_fpga_top",
      "address": 179,
      "title": "FPGA test",
      "author": "myrtle",
      "description": "small mux2 fpga test",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-fpga-respin",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "cfg_frameinc",
        "io_in[2]": "cfg_framestrb",
        "io_in[3]": "cfg_mode",
        "io_in[4]": "cfg_sel0_in0",
        "io_in[5]": "cfg_sel0_in1",
        "io_in[6]": "cfg_sel0_in2",
        "io_in[7]": "cfg_sel0_in3",
        "io_out[0]": "out 0",
        "io_out[1]": "out 1",
        "io_out[2]": "out 2",
        "io_out[3]": "out 3",
        "io_out[4]": "out 4",
        "io_out[5]": "out 5",
        "io_out[6]": "out 6",
        "io_out[7]": "out 7"
      }
    },
    {
      "macro": "gbsha_ttfir_top",
      "address": 43,
      "title": "ttFIR: Digital Finite Impulse Response (FIR) Filter",
      "author": "Georg",
      "description": "A 4-tap Finite Impulse Response (FIR) filter with 6 bit input signal, 6 bit filter coefficients, and 8 bit output signal. **Challenge for future tinytapeouts**: Increase number of taps.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gbsha/ttfir",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "bit0 LSB of 2's complement coefficient/input.",
        "io_in[3]": "bit1",
        "io_in[4]": "bit2",
        "io_in[5]": "bit3",
        "io_in[6]": "bit4",
        "io_in[7]": "bit5 MSB.",
        "io_out[0]": "bit0 LSB of 2's complement output.",
        "io_out[1]": "bit1",
        "io_out[2]": "bit2",
        "io_out[3]": "bit3",
        "io_out[4]": "bit4",
        "io_out[5]": "bit5",
        "io_out[6]": "bit6",
        "io_out[7]": "bit7 MSB."
      }
    },
    {
      "macro": "github_com_proppy_tt02_xls_counter",
      "address": 141,
      "title": "XLS: 8-bit counter",
      "author": "proppy",
      "description": "Increment output bits",
      "clock_hz": 10,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/proppy/tt02-xls-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "count0",
        "io_out[1]": "count1",
        "io_out[2]": "count2",
        "io_out[3]": "count3",
        "io_out[4]": "count4",
        "io_out[5]": "count5",
        "io_out[6]": "count6",
        "io_out[7]": "count7"
      }
    },
    {
      "macro": "github_com_proppy_tt02_xls_popcount",
      "address": 132,
      "title": "XLS: bit population count",
      "author": "proppy",
      "description": "Count bits set in the input.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/proppy/tt02-xls-popcount",
      "commit": "",
      "pinout": {
        "io_in[0]": "bit0",
        "io_in[1]": "bit1",
        "io_in[2]": "bit2",
        "io_in[3]": "bit3",
        "io_in[4]": "bit4",
        "io_in[5]": "bit5",
        "io_in[6]": "bit6",
        "io_in[7]": "bit7",
        "io_out[0]": "count0",
        "io_out[1]": "count1",
        "io_out[2]": "count2",
        "io_out[3]": "count3",
        "io_out[4]": "count4",
        "io_out[5]": "count5",
        "io_out[6]": "count6",
        "io_out[7]": "count7"
      }
    },
    {
      "macro": "granth_crc_decelerator",
      "address": 34,
      "title": "CRC Decelerator",
      "author": "Grant Hernandez (@grant-h)",
      "description": "A reconfigurable CRC engine",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/grant-h/tt03-crc-decelerator",
      "commit": "",
      "pinout": {
        "io_in[0]": "`clk`",
        "io_in[1]": "`rst`",
        "io_in[2]": "`cmd[0]`",
        "io_in[3]": "`cmd[1]`",
        "io_in[4]": "`data_in[0]`",
        "io_in[5]": "`data_in[1]`",
        "io_in[6]": "`data_in[2]`",
        "io_in[7]": "`data_in[3]`",
        "io_out[0]": "`data_out[0]`",
        "io_out[1]": "`data_out[1]`",
        "io_out[2]": "`data_out[2]`",
        "io_out[3]": "`data_out[3]`",
        "io_out[4]": "`data_out[4]`",
        "io_out[5]": "`data_out[5]`",
        "io_out[6]": "`data_out[6]`",
        "io_out[7]": "`data_out[7]`"
      }
    },
    {
      "macro": "greenstyle_lfsr",
      "address": 13,
      "title": "8bit configurable galois lfsr",
      "author": "Alexander Sch\u00f6nborn",
      "description": "A 8bit configurable galois lfsr.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gr33nstyle/tt03-verilog-lfsr",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "mode[0] 00 normal shift mode,  01 set register mode,",
        "io_in[3]": "mode[1] 10 set mode registers, 11 unused",
        "io_in[4]": "data_in[0] is used for both filling register and xor mask state",
        "io_in[5]": "data_in[1] needs 2 cycles to fill all 8 bits",
        "io_in[6]": "data_in[2] first cyle is lower 4 bits, 2nd upper 4 bits",
        "io_in[7]": "data_in[3] see above",
        "io_out[0]": "output[0] lsb normal lfsr output",
        "io_out[1]": "output[1] other 7 bits to see the full state",
        "io_out[2]": "output[2]",
        "io_out[3]": "output[3]",
        "io_out[4]": "output[4]",
        "io_out[5]": "output[5]",
        "io_out[6]": "output[6]",
        "io_out[7]": "output[7]"
      }
    },
    {
      "macro": "gregdavill_clock_top",
      "address": 216,
      "title": "Seven Segment Clock",
      "author": "Greg Davill",
      "description": "Logic to drive 6 external 74hct595's that in turn drive 7 segment displays. The displays form a digital clock.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gregdavill/tt02-clock",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "minute_up",
        "io_in[3]": "hour_up",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "sclk",
        "io_out[1]": "latch",
        "io_out[2]": "data",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "gregdavill_serv_top",
      "address": 217,
      "title": "serv - Serial RISCV CPU",
      "author": "Greg Davill",
      "description": "An award winning RISCV CPU!",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gregdavill/tt02-serv",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "guess_game",
      "address": 22,
      "title": "Random number guess game",
      "author": "Yufei Zhen, Elaina Zodiatis, Khadijatou Dibba",
      "description": "Guess 6-bit random number, 3 attemps in one round. ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/lastminwarrior-fei/tt03-random-num-guess-game",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "rst",
        "io_in[2]": "guess[0]",
        "io_in[3]": "guess[1]",
        "io_in[4]": "guess[2]",
        "io_in[5]": "guess[3]",
        "io_in[6]": "guess[4]",
        "io_in[7]": "guess[5]",
        "io_out[0]": "result[0]",
        "io_out[1]": "result[1]",
        "io_out[2]": "result[2]",
        "io_out[3]": "result[3]",
        "io_out[4]": "result[4]",
        "io_out[5]": "result[5]",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "guianmonezm_ezmcpu",
      "address": 30,
      "title": "ezm_cpu",
      "author": "guianmonezm#4787",
      "description": "basic 8bit CPU",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/guianmonezm/tt03-ezm_cpu",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "in1",
        "io_in[3]": "in2",
        "io_in[4]": "in3",
        "io_in[5]": "in4",
        "io_in[6]": "in5",
        "io_in[7]": "in6",
        "io_out[0]": "pc[0]/c",
        "io_out[1]": "pc[1]/c",
        "io_out[2]": "pc[2]/c",
        "io_out[3]": "pc[3]/c",
        "io_out[4]": "pc[4]/c",
        "io_out[5]": "pc[5]/c",
        "io_out[6]": "pc[6]/c",
        "io_out[7]": "pc[7]/c"
      }
    },
    {
      "macro": "hex_sr",
      "address": 163,
      "title": "hex shift register",
      "author": "Eric Smith",
      "description": "six 40-bit shift registers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/brouhaha/tt02-hex-sr",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "recirc",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "data_in[4]",
        "io_in[7]": "data_in[5]",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "data_out[0]",
        "io_out[3]": "data_out[1]",
        "io_out[4]": "data_out[2]",
        "io_out[5]": "data_out[3]",
        "io_out[6]": "data_out[4]",
        "io_out[7]": "data_out[5]"
      }
    },
    {
      "macro": "hpretl_tt03_temperature_sensor",
      "address": 47,
      "title": "Synthesizable Digital Temperature Sensor",
      "author": "Harald Pretl",
      "description": "Measure the on-chip temperature and display on the LED display.",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/hpretl/tt03-tempsensor",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "cal_clk",
        "io_in[3]": "cal_dat",
        "io_in[4]": "cal_ena",
        "io_in[5]": "debug_mode[0]",
        "io_in[6]": "debug_mode[1]",
        "io_in[7]": "debug_mode[2]",
        "io_out[0]": "segment a (or debug information)",
        "io_out[1]": "segment b (or debug information)",
        "io_out[2]": "segment c (or debug information)",
        "io_out[3]": "segment d (or debug information)",
        "io_out[4]": "segment e (or debug information)",
        "io_out[5]": "segment f (or debug information)",
        "io_out[6]": "segment g (or debug information)",
        "io_out[7]": "indicate ones or tens (or debug information)"
      }
    },
    {
      "macro": "htfab_microtapeout",
      "address": 45,
      "title": "MicroTapeout (of sky130 cells)",
      "author": "htfab",
      "description": "395 standard cells with a mux to select between them",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/htfab/microtapeout",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "page mode",
        "io_in[2]": "input[0] / page[0] / cell[0]",
        "io_in[3]": "input[1] / page[1] / cell[1]",
        "io_in[4]": "input[2] / page[2] / cell[2]",
        "io_in[5]": "input[3] / page[3] / 1 (timing)",
        "io_in[6]": "input[4] / page[4] / 1 (timing)",
        "io_in[7]": "input[5] / page[5] / 1 (timing)",
        "io_out[0]": "output[8*page+0] / counter[0]",
        "io_out[1]": "output[8*page+1] / counter[1]",
        "io_out[2]": "output[8*page+2] / counter[2]",
        "io_out[3]": "output[8*page+3] / counter[3]",
        "io_out[4]": "output[8*page+4] / counter[4]",
        "io_out[5]": "output[8*page+5] / counter[5]",
        "io_out[6]": "output[8*page+6] / strobe",
        "io_out[7]": "output[8*page+7] / latched value"
      }
    },
    {
      "macro": "jar_pi",
      "address": 126,
      "title": "Pi (\u03c0) to 1000+ decimal places",
      "author": "James Ross",
      "description": "This circuit outputs the first 1024 decimal digits of Pi (\u03c0), including the decimal after the three. The repository started out as something else, but after completing the 16x8 SRAM circiut (128 bits), I became curious about just how much information could be packed into the circuit area.  The D flip flops in SRAM aren't particularly dense and the circuit has other functionality beyond information storage.  For this demonstration, I needed something without a logical pattern, something familiar, and something which would exercise all the LEDs in the seven segment display.  The Pi constant was perfect.  After a number of experiments in Verilog, trying the Espresso Heuristic Logic Minimizer tool, the best results ended up being a large boring block of case statements and letting the toolchain figure it out. The information limit I found was 1023*log2(10)+1 ~= 3,400 bits, after which the toolchain struggled.  However, it appears in this case that the layout is limited by metal, not combinatorial logic.  I am interested to hear about better strategies to do something like this with synthesizable Verilog.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jar/tt02_freespeech",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal LED"
      }
    },
    {
      "macro": "jar_sram_top",
      "address": 102,
      "title": "16x8 SRAM & Streaming Signal Generator",
      "author": "James Ross",
      "description": "Write to, Read from, and Stream 16 addressable 8-bit words of memory",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jar/tt02_sram",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "we",
        "io_in[2]": "oe",
        "io_in[3]": "commit",
        "io_in[4]": "addr[0]/high[0]/low[0]",
        "io_in[5]": "addr[1]/high[1]/low[1]",
        "io_in[6]": "addr[2]/high[2]/low[2]",
        "io_in[7]": "addr[3]/high[3]/low[3]",
        "io_out[0]": "data[0]",
        "io_out[1]": "data[1]",
        "io_out[2]": "data[2]",
        "io_out[3]": "data[3]",
        "io_out[4]": "data[4]",
        "io_out[5]": "data[5]",
        "io_out[6]": "data[6]",
        "io_out[7]": "data[7]"
      }
    },
    {
      "macro": "jblocklove_cgpt_benchmark_wrapper",
      "address": 63,
      "title": "QTChallenges",
      "author": "Jason Blocklove",
      "description": "This project implements 8 different benchmark circuits created 100% with ChatGPT-4.",
      "clock_hz": 15000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JBlocklove/tt03-qtchallenges-chatgpt_4",
      "commit": "",
      "pinout": {
        "io_in[0]": "Depends on benchmark",
        "io_in[1]": "Depends on benchmark",
        "io_in[2]": "Depends on benchmark",
        "io_in[3]": "Depends on benchmark",
        "io_in[4]": "Depends on benchmark",
        "io_in[5]": "benchmark_select[0]",
        "io_in[6]": "benchmark_select[1]",
        "io_in[7]": "benchmark_select[2]",
        "io_out[0]": "Depends on benchmark",
        "io_out[1]": "Depends on benchmark",
        "io_out[2]": "Depends on benchmark",
        "io_out[3]": "Depends on benchmark",
        "io_out[4]": "Depends on benchmark",
        "io_out[5]": "Depends on benchmark",
        "io_out[6]": "Depends on benchmark",
        "io_out[7]": "Depends on benchmark"
      }
    },
    {
      "macro": "jglim_7seg",
      "address": 190,
      "title": "BCD to Hex 7-Segment Decoder",
      "author": "JinGen Lim",
      "description": "Converts a 4-bit BCD input into a hexadecimal 7-segment display output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jglim/tt02-bcd-hex7seg-hdl",
      "commit": "",
      "pinout": {
        "io_in[0]": "input 1 (BCD 1)",
        "io_in[1]": "input 2 (BCD 2)",
        "io_in[2]": "input 3 (BCD 4)",
        "io_in[3]": "input 4 (BCD 8)",
        "io_in[4]": "decimal dot (passthrough)",
        "io_in[5]": "output invert",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot"
      }
    },
    {
      "macro": "jmw95_top",
      "address": 66,
      "title": "MSF Clock",
      "author": "Jamie Wood & Daniel Cannell",
      "description": "MSF radio clock",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JMW95/tt03-msf-clock",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "data",
        "io_in[3]": "inverted",
        "io_in[4]": "shift_date",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "shift_clk",
        "io_out[1]": "shift_data",
        "io_out[2]": "shift_latch",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "jordan336_toy_cpu",
      "address": 41,
      "title": "Toy CPU",
      "author": "jordan336",
      "description": "Toy CPU is an 8 bit toy CPU for the Tiny Tapeout project.",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jordan336/tt03-toy-cpu",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "instruction[0]",
        "io_in[3]": "instruction[1]",
        "io_in[4]": "instruction[2]",
        "io_in[5]": "instruction[3]",
        "io_in[6]": "instruction[4]",
        "io_in[7]": "instruction[5]",
        "io_out[0]": "data_out[0]",
        "io_out[1]": "data_out[1]",
        "io_out[2]": "data_out[2]",
        "io_out[3]": "data_out[3]",
        "io_out[4]": "data_out[4]",
        "io_out[5]": "data_out[5]",
        "io_out[6]": "data_out[6]",
        "io_out[7]": "data_out[7]"
      }
    },
    {
      "macro": "kevinwguan_tiny_tapeout",
      "address": 60,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kevinwguan/tt03-mmm-verilog",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "kiwih_tt_top",
      "address": 44,
      "title": "QTCore-A1",
      "author": "Hammond Pearce",
      "description": "An accumulator-based 8-bit microarchitecture designed via GPT-4 conversations.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kiwih/tt03-verilog-qtcoreA1",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock - connect to an SPI SCK.",
        "io_in[1]": "reset (active high)",
        "io_in[2]": "scan enable (active low) - connect to an SPI chip select.",
        "io_in[3]": "processor enable (active low) - connect to an SPI chip select.",
        "io_in[4]": "scan data in - connect to an SPI MOSI.",
        "io_in[5]": "general purpose input (e.g. Button). This input will be provided to the I/O register bit 0.",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "general purpose output 0 (e.g. LED segment a). This output comes from the I/O register bit 1.",
        "io_out[1]": "general purpose output 1 (e.g. LED segment b). This output comes from the I/O register bit 2.",
        "io_out[2]": "general purpose output 2 (e.g. LED segment c). This output comes from the I/O register bit 3.",
        "io_out[3]": "general purpose output 3 (e.g. LED segment d). This output comes from the I/O register bit 4.",
        "io_out[4]": "general purpose output 4 (e.g. LED segment e). This output comes from the I/O register bit 5.",
        "io_out[5]": "general purpose output 5 (e.g. LED segment f). This output comes from the I/O register bit 6.",
        "io_out[6]": "general purpose output 6 (e.g. LED segment g). This output comes from the I/O register bit 7.",
        "io_out[7]": "scan data out - connect to an SPI MISO."
      }
    },
    {
      "macro": "klei22_ra",
      "address": 213,
      "title": "Rolling Average - 5 bit, 8 bank",
      "author": "Kauna Lei",
      "description": "5bit moving average",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/klei22/Rolling-Average",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "i_data_clk",
        "io_in[3]": "i_value[0]",
        "io_in[4]": "i_value[1]",
        "io_in[5]": "i_value[2]",
        "io_in[6]": "i_value[3]",
        "io_in[7]": "i_value[4]",
        "io_out[0]": "ra_out[0]",
        "io_out[1]": "ra_out[1]",
        "io_out[2]": "ra_out[2]",
        "io_out[3]": "ra_out[3]",
        "io_out[4]": "ra_out[4]",
        "io_out[5]": "0",
        "io_out[6]": "0",
        "io_out[7]": "0"
      }
    },
    {
      "macro": "knight_rider_KolosKoblasz",
      "address": 5,
      "title": "Knight Rider Sensor Lights",
      "author": "Kolos Koblasz",
      "description": "The logic assertes output bits one by one, like KITT's sensor lights in Knight Rider.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/KolosKoblasz/tt03-knight_rider",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "speed control",
        "io_in[3]": "brightness control",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "LED 0",
        "io_out[1]": "LED 1",
        "io_out[2]": "LED 2",
        "io_out[3]": "LED 3",
        "io_out[4]": "LED 4",
        "io_out[5]": "LED 5",
        "io_out[6]": "LED 6",
        "io_out[7]": "LED 7"
      }
    },
    {
      "macro": "krasin_3_bit_8_channel_pwm_driver",
      "address": 147,
      "title": "3-bit 8-channel PWM driver",
      "author": "Ivan Krasin",
      "description": "PWM driver with 8 channels and 8 PWM levels from 0 to 1",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/krasin/tt02-verilog-3-bit-8-channel-pwm-driver",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "pset",
        "io_in[2]": "addr0",
        "io_in[3]": "addr1",
        "io_in[4]": "addr2",
        "io_in[5]": "level0",
        "io_in[6]": "level1",
        "io_in[7]": "level2",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "out7"
      }
    },
    {
      "macro": "krasin_tt02_verilog_spi_7_channel_pwm_driver",
      "address": 162,
      "title": "7-channel PWM driver controlled via SPI bus",
      "author": "Ivan Krasin",
      "description": "PWM driver with 7 channels and 256 PWM levels from 0 to 1",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/krasin/tt02-verilog-spi-7-channel-pwm-driver",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "cs",
        "io_in[3]": "sclk",
        "io_in[4]": "mosi",
        "io_in[5]": "reserved",
        "io_in[6]": "reserved",
        "io_in[7]": "reserved",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "miso"
      }
    },
    {
      "macro": "logisim_demo",
      "address": 233,
      "title": "Logisim demo - LED blinker",
      "author": "Tholin",
      "description": "Example of how to use Logisim Evolution generated Verilog for TinyTapeout.",
      "clock_hz": 2,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AvalonSemiconductors/tt02-logisim-example",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "O_0",
        "io_out[1]": "O_1",
        "io_out[2]": "O_2",
        "io_out[3]": "O_3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "loxodes_sequencer",
      "address": 95,
      "title": "Power supply sequencer",
      "author": "Jon Klein",
      "description": "Sequentially enable and disable channels with configurable delay",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/loxodes/tt02-submission-loxodes",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "enable",
        "io_in[3]": "delay0",
        "io_in[4]": "delay1",
        "io_in[5]": "delay2",
        "io_in[6]": "delay3",
        "io_in[7]": "delay4",
        "io_out[0]": "channel 0",
        "io_out[1]": "channel 1",
        "io_out[2]": "channel 2",
        "io_out[3]": "channel 3",
        "io_out[4]": "channel 4",
        "io_out[5]": "channel 5",
        "io_out[6]": "channel 6",
        "io_out[7]": "channel 7"
      }
    },
    {
      "macro": "lucaz97_tt_top",
      "address": 72,
      "title": "RTL Locked QTCore-A1",
      "author": "Luca Collini and Hammond Pearce",
      "description": "A RTL locked accumulator-based 8-bit microarchitecture designed via GPT-4 conversations.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Lucaz97/tt03-RTLlocked-verilog-qtcoreA1",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock - connect to an SPI SCK.",
        "io_in[1]": "reset (active high)",
        "io_in[2]": "scan enable (active low) - connect to an SPI chip select.",
        "io_in[3]": "processor enable (active low) - connect to an SPI chip select.",
        "io_in[4]": "scan data in - connect to an SPI MOSI.",
        "io_in[5]": "general purpose input (e.g. Button). This input will be provided to the I/O register bit 0.",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "general purpose output 0 (e.g. LED segment a). This output comes from the I/O register bit 1.",
        "io_out[1]": "general purpose output 1 (e.g. LED segment b). This output comes from the I/O register bit 2.",
        "io_out[2]": "general purpose output 2 (e.g. LED segment c). This output comes from the I/O register bit 3.",
        "io_out[3]": "general purpose output 3 (e.g. LED segment d). This output comes from the I/O register bit 4.",
        "io_out[4]": "general purpose output 4 (e.g. LED segment e). This output comes from the I/O register bit 5.",
        "io_out[5]": "general purpose output 5 (e.g. LED segment f). This output comes from the I/O register bit 6.",
        "io_out[6]": "general purpose output 6 (e.g. LED segment g). This output comes from the I/O register bit 7.",
        "io_out[7]": "scan data out - connect to an SPI MISO."
      }
    },
    {
      "macro": "lukevassallo_xor_cipher",
      "address": 27,
      "title": "XOR Stream Cipher",
      "author": "Luke Vassallo",
      "description": "An two channel XOR stream cipher with fully programmable 32-bit galois LFSRs.",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/LukeVassallo/tt03-xor-cipher",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk (12.5KHz system clock)",
        "io_in[1]": "rst (Active high synchronous reset)",
        "io_in[2]": "tx_p (Plaintext bitstream for transmission)",
        "io_in[3]": "cfg_i (Configuration input to the 130-bit serial shift register)",
        "io_in[4]": "cfg_en (Active high configuration enable)",
        "io_in[5]": "tx_en (Transmit channel enable)",
        "io_in[6]": "rx_e (Encrypted bitstream for receiption)",
        "io_in[7]": "rx_en (Receive channel enable)",
        "io_out[0]": "tx_e ( Encrypted bitstream for transmission)",
        "io_out[1]": "dbg_tx_p (Decrypted transmit bitstream, pin disabled by default)",
        "io_out[2]": "dbg_rx_e (Encrypted receive bitstream, pin disabled by default)",
        "io_out[3]": "rx_p (Decrypted bitstream for receiption)",
        "io_out[4]": "cfg_o (Configuration output from the 130-bit shift register)",
        "io_out[5]": "heartbeat[7] (bit from heartbeat counter)",
        "io_out[6]": "heartbeat[8] (bit from heartbeat counter)",
        "io_out[7]": "heartbeat[9] (bit from heartbeat counter)"
      }
    },
    {
      "macro": "luthor2k_top_tto",
      "address": 205,
      "title": "Baudot Converter",
      "author": "Arthur Hazleden",
      "description": "This circuit will convert 5-bit Baudot from a teletype machine to 8-bit ASCII.",
      "clock_hz": 9600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Luthor2k/tt02-baudot",
      "commit": "",
      "pinout": {
        "io_in[0]": "ascii clock at 8x desired baudrate",
        "io_in[1]": "baudot clock at 100x desired baudrate",
        "io_in[2]": "baudot input, should be held high when line is idle but connected",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "ASCII serial output at 9600 baud",
        "io_out[1]": "Baudot UART output byte ready",
        "io_out[2]": "",
        "io_out[3]": "Baudot bit 0",
        "io_out[4]": "Baudot bit 1",
        "io_out[5]": "Baudot bit 2",
        "io_out[6]": "Baudot bit 3",
        "io_out[7]": "Baudot bit 4"
      }
    },
    {
      "macro": "maheredia_arbiter_game",
      "address": 73,
      "title": "Arbiter Game",
      "author": "Martin A. Heredia",
      "description": "This is a game for 2 players. After a countdown, the player who press his/her button first wins. Countdown and winner should be displayed in output leds.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maheredia/tt03-arbiter_game",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst_in_n (active low)",
        "io_in[2]": "req1_in  (active low)",
        "io_in[3]": "req2_in  (active low)",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "leds_out[0] / segment a",
        "io_out[1]": "leds_out[1] / segment b",
        "io_out[2]": "leds_out[2] / segment c",
        "io_out[3]": "leds_out[3] / segment d",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "mbikovitsky_top",
      "address": 123,
      "title": "5-bit Galois LFSR",
      "author": "Michael Bikovitsky",
      "description": "5-bit Galois LFSR with configurable taps and initial state. Outputs a value every second.",
      "clock_hz": 625,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mbikovitsky/tt02-lfsr",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_lfsr",
        "io_in[2]": "reset_taps",
        "io_in[3]": "data_in1",
        "io_in[4]": "data_in2",
        "io_in[5]": "data_in3",
        "io_in[6]": "data_in4",
        "io_in[7]": "data_in5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment p"
      }
    },
    {
      "macro": "meiniki_pi",
      "address": 3,
      "title": "Another Piece of Pi",
      "author": "Meinhard Kissich, EAS Group, Graz University of Technology",
      "description": "This design takes up the idea of James Ross [1], who submitted a circuit to Tiny Tapeout 02 that stores and outputs the first 1024 decimal digits of the number Pi (including the decimal point) to a 7-segment display. In contrast to his approach, a densely packed decimal encoding is used to store the data. With this approach, 1400 digits can be stored and output within the design area of 150um x 170um. However, at 1400 decimals and utilization of 38.99%, the limitation seems to be routing. Like James, I'm also interested to hear about better strategies to fit more information into the design with synthesizable Verilog code. [1] https://github.com/jar/tt02_freespeech",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meiniKi/tt03-another-piece-of-pi",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal LED"
      }
    },
    {
      "macro": "meriac_tt02_play_tune",
      "address": 135,
      "title": "Super Mario Tune on A Piezo Speaker",
      "author": "Milosch Meriac",
      "description": "Plays Super Mario Tune over a Piezo Speaker connected across io_out[1:0]",
      "clock_hz": 3125,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/tt02-play-tune",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "meriac_tt03_play_tune",
      "address": 241,
      "title": "Super Mario Tune on A Piezo Speaker",
      "author": "Milosch Meriac",
      "description": "Plays Super Mario Tune over a Piezo Speaker connected across io_out[1:0]",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/tt03-play-tune",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "migcorre_pwm",
      "address": 96,
      "title": "Duty Controller",
      "author": "Marcelo Pouso / Miguel Correia",
      "description": "Increase/Decrease a duty cycle of square signal.",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/migcorre/tt02-dc",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "increase",
        "io_in[3]": "decrease",
        "io_in[4]": "disable_debouncer",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "pwm",
        "io_out[1]": "pwm_neg",
        "io_out[2]": "increase",
        "io_out[3]": "decrease",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "mm21_LEDMatrixTop",
      "address": 116,
      "title": "RGB LED Matrix Driver",
      "author": "Matt M",
      "description": "Drives a simple animation on SparkFun's RGB LED 8x8 matrix backpack",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mm21/tinytapeout2-led-matrix",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "SCLK",
        "io_out[1]": "MOSI",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "nCS",
        "io_out[6]": "segment g",
        "io_out[7]": "none (always high)"
      }
    },
    {
      "macro": "moonbase_cpu_4bit",
      "address": 168,
      "title": "4 bit CPU",
      "author": "Paul Campell",
      "description": "simple cpu",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MoonbaseOtago/tt-cpu",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ram_data0",
        "io_in[3]": "ram_data1",
        "io_in[4]": "ram_data2",
        "io_in[5]": "ram_data3",
        "io_in[6]": "io_data0",
        "io_in[7]": "io_data1",
        "io_out[0]": "data_out_0",
        "io_out[1]": "data_out_1",
        "io_out[2]": "data_out_2",
        "io_out[3]": "data_out_3",
        "io_out[4]": "write_data_n",
        "io_out[5]": "write_ram_n",
        "io_out[6]": "a",
        "io_out[7]": "strobe"
      }
    },
    {
      "macro": "moonbase_cpu_8bit",
      "address": 174,
      "title": "8 bit CPU",
      "author": "Paul Campell",
      "description": "8-bit version of the MoonBase 4-bit CPU",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/OneRNG/tt-cpu8",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ram_data0",
        "io_in[3]": "ram_data1",
        "io_in[4]": "ram_data2",
        "io_in[5]": "ram_data3",
        "io_in[6]": "io_data0",
        "io_in[7]": "io_data1",
        "io_out[0]": "data_out_0",
        "io_out[1]": "data_out_1",
        "io_out[2]": "data_out_2",
        "io_out[3]": "data_out_3",
        "io_out[4]": "write_data_n",
        "io_out[5]": "write_ram_n",
        "io_out[6]": "a",
        "io_out[7]": "strobe"
      }
    },
    {
      "macro": "moonbase_pdp8",
      "address": 19,
      "title": "12-bit PDP8",
      "author": "Paul Campnell",
      "description": "PDP8 core",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MoonbaseOtago/tt03-pdp8",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "data_in_0",
        "io_in[5]": "data_in_1",
        "io_in[6]": "data_in_2",
        "io_in[7]": "data_in_3",
        "io_out[0]": "address_0_data_mux_0",
        "io_out[1]": "address_1_data_mux_1",
        "io_out[2]": "address_2_data_mux_2",
        "io_out[3]": "address_3_data_mux_3",
        "io_out[4]": "address_4_rw_mux",
        "io_out[5]": "address_5_phase_lo_select_mux",
        "io_out[6]": "phase_hi_select",
        "io_out[7]": "address_data_select"
      }
    },
    {
      "macro": "morningjava_top",
      "address": 1,
      "title": "ChipTune",
      "author": "Wallie Everest",
      "description": "Vintage 8-bit sound generator",
      "clock_hz": 9600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/WallieEverest/tt03",
      "commit": "",
      "pinout": {
        "io_in[0]": "io_in[0] (CLOCK)",
        "io_in[1]": "io_in[1] (IN_1)",
        "io_in[2]": "io_in[2] (IN_2)",
        "io_in[3]": "io_in[3] (MODE)",
        "io_in[4]": "io_in[4] (BAUD_CLK)",
        "io_in[5]": "io_in[5] (TCK)",
        "io_in[6]": "io_in[6] (TMS)",
        "io_in[7]": "io_in[7] (TDI)",
        "io_out[0]": "io_out[0] (DAC_0)",
        "io_out[1]": "io_out[1] (DAC_1)",
        "io_out[2]": "io_out[2] (DAC_2)",
        "io_out[3]": "io_out[3] (DAC_3)",
        "io_out[4]": "io_out[4] (DAC_4)",
        "io_out[5]": "io_out[5] (REF_CLK)",
        "io_out[6]": "io_out[6] (RTCK)",
        "io_out[7]": "io_out[7] (TDO)"
      }
    },
    {
      "macro": "moyes0_top_module",
      "address": 129,
      "title": "M0: A 16-bit SUBLEQ Microprocessor",
      "author": "William Moyes",
      "description": "A capable but slow microprocessor that fits in a very tight space",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/moyesw/TT02-M0",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "spi_miso",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "dbg_in",
        "io_out[0]": "spi_cs0",
        "io_out[1]": "spi_cs1",
        "io_out[2]": "spi_clk",
        "io_out[3]": "spi_mosi",
        "io_out[4]": "uart_tx",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "dbg_out"
      }
    },
    {
      "macro": "msaghir_top_level",
      "address": 224,
      "title": "SevSegFX",
      "author": "Mazen Saghir, ECE Department, American University of Beirut (mazen@aub.edu.lb)",
      "description": "Seven segment display effect generator",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mazensaghir/tt02-sevsegfx",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "sel0/d0",
        "io_in[3]": "sel1/d1",
        "io_in[4]": "sel2/d2",
        "io_in[5]": "sel3/d2",
        "io_in[6]": "blink",
        "io_in[7]": "fx",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "my_design",
      "address": 46,
      "title": "nipple multiplier",
      "author": "\u2019Mohamed Nasser",
      "description": "multiply two 8-b numbers in 4 chunks",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mnasser431998/tt03-mnasser-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "data0",
        "io_in[1]": "data1",
        "io_in[2]": "data2",
        "io_in[3]": "data3",
        "io_in[4]": "clk",
        "io_in[5]": "reset_n",
        "io_in[6]": "valid",
        "io_in[7]": "toggle",
        "io_out[0]": "dout0",
        "io_out[1]": "dout1",
        "io_out[2]": "dout2",
        "io_out[3]": "dout3",
        "io_out[4]": "dout4",
        "io_out[5]": "dout5",
        "io_out[6]": "dout6",
        "io_out[7]": "dout7"
      }
    },
    {
      "macro": "navray_top",
      "address": 160,
      "title": "Non-restoring Square Root",
      "author": "Wallace Everest",
      "description": "Square root for use in RMS calculations",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/navray/tt02-square-root",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "data(0)",
        "io_in[2]": "data(1)",
        "io_in[3]": "data(2)",
        "io_in[4]": "data(3)",
        "io_in[5]": "data(4)",
        "io_in[6]": "data(5)",
        "io_in[7]": "data(6)",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "nikor_clock",
      "address": 35,
      "title": "Simple clock",
      "author": "S\u00f8ren Poulsen",
      "description": "Shows time of day.",
      "clock_hz": 32,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nikor/tt03-verilog-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "minutes",
        "io_in[3]": "hours",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "srclk",
        "io_out[1]": "rclk",
        "io_out[2]": "ser",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "noahgaertner_cpu",
      "address": 235,
      "title": "Basic 4 bit cpu ",
      "author": "Noah Gaertner",
      "description": "4-bit CPU that does add, subtract, multiply, left and right shifts, conditional jump based on external signal, logical and bitwise AND and OR, equality and inequality checking, bitwise inversion, and logical NOT",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/noahgaertner/tt02-verilog-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "instruction",
        "io_in[3]": "instruction",
        "io_in[4]": "data",
        "io_in[5]": "data",
        "io_in[6]": "data",
        "io_in[7]": "data",
        "io_out[0]": "program counter",
        "io_out[1]": "program counter",
        "io_out[2]": "program counter",
        "io_out[3]": "program counter",
        "io_out[4]": "output data",
        "io_out[5]": "output data",
        "io_out[6]": "output data",
        "io_out[7]": "output data"
      }
    },
    {
      "macro": "onebitcpu",
      "address": 240,
      "title": "Two Bit Universal FSM",
      "author": "Emilio Alvarez",
      "description": "A two bit FSM inspired by Rue Mohr's 1Bit CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/emilio-a/1bitCPU",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "option22",
      "address": 228,
      "title": "Option22",
      "author": "bitluni",
      "description": "Looong shift register. 22x8 bit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option22",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "write",
        "io_in[3]": "data",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "option23",
      "address": 227,
      "title": "Option23",
      "author": "bitluni",
      "description": "Character ROM and bitmap shifter for POV displays",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option23",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "din 0",
        "io_in[2]": "din 1",
        "io_in[3]": "din 2",
        "io_in[4]": "din 3",
        "io_in[5]": "din 4",
        "io_in[6]": "din 5",
        "io_in[7]": "din 6",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "option23ser",
      "address": 226,
      "title": "Option23 Serial",
      "author": "bitluni",
      "description": "Character ROM and bitmap shifter for POV displays",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option23ser",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "write",
        "io_in[3]": "din",
        "io_in[4]": "under",
        "io_in[5]": "over",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "phasenoisepon_seven_segment_seconds",
      "address": 136,
      "title": "Tiny rot13",
      "author": "Phase Noise",
      "description": "implements rot13 in the constraints of TT02",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/phasenoisepon/tt02-phasenoisepon",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset - Resets the system to a clean state",
        "io_in[2]": "CTL0 - LSB of control",
        "io_in[3]": "CTL1 - MSB of control",
        "io_in[4]": "D0 - LSB of input nibble",
        "io_in[5]": "D1",
        "io_in[6]": "D2",
        "io_in[7]": "D3 - MSB of input nibble",
        "io_out[0]": "DO0 - LSB of output",
        "io_out[1]": "DO1",
        "io_out[2]": "DO2",
        "io_out[3]": "DO3",
        "io_out[4]": "DO4",
        "io_out[5]": "DO5",
        "io_out[6]": "DO6",
        "io_out[7]": "DO7 - MSB of output"
      }
    },
    {
      "macro": "prog_melody_gen",
      "address": 198,
      "title": "Melody Generator",
      "author": "myrtle",
      "description": "plays a melody, preloaded with jingle bells but re-programmable",
      "clock_hz": 25000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-melody-gen",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reload",
        "io_in[2]": "restart",
        "io_in[3]": "prog_data",
        "io_in[4]": "prog_strobe",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "melody",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "psychogenic_neptunefixed",
      "address": 51,
      "title": "Neptune guitar tuner (fixed window)",
      "author": "Pat Deegan",
      "description": "It's a guitar tuner!  and so much more... (TODO)",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03_neptune_constantwindow",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "clock config A",
        "io_in[3]": "clock config B",
        "io_in[4]": "measured frequency input pulses",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "display select"
      }
    },
    {
      "macro": "psychogenic_neptuneprop",
      "address": 52,
      "title": "Neptune guitar tuner (proportional window)",
      "author": "Pat Deegan",
      "description": "It's a guitar tuner!  and so much more... (TODO)",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03_neptune_proportional",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "clock config A",
        "io_in[3]": "clock config B",
        "io_in[4]": "measured frequency input pulses",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "display select"
      }
    },
    {
      "macro": "pwm",
      "address": 49,
      "title": "Brightness control of LED with PWM",
      "author": "Ioannis G. Intzes",
      "description": "Increase and Decrease the PWM (Pulse-Width) to dim a LED.",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/IoannisIn/tt03-verilog-pwm",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "btn_incrPWM",
        "io_in[2]": "btn_decrPWM",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "inled",
        "io_out[1]": "deled",
        "io_out[2]": "led",
        "io_out[3]": "clock_1Hz",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "pwm_gen",
      "address": 157,
      "title": "Breathing LED",
      "author": "argunda",
      "description": "Use the pwm output to drive an LED and it should look like it's breathing.",
      "clock_hz": 4000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/argunda/tt02-breathing-led",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "breathing_pwm",
        "io_out[1]": "duty[0]",
        "io_out[2]": "duty[1]",
        "io_out[3]": "duty[2]",
        "io_out[4]": "duty[3]",
        "io_out[5]": "duty[4]",
        "io_out[6]": "duty[5]",
        "io_out[7]": "duty[6]"
      }
    },
    {
      "macro": "rc5_top",
      "address": 133,
      "title": "RC5 decoder",
      "author": "Jean THOMAS",
      "description": "Increment/decrement a counter with the press of an IR remote button!",
      "clock_hz": 562,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jeanthom/tt02-rc5-receiver",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "IR demodulator output",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "recepsaid_euclidean_algorithm",
      "address": 222,
      "title": "Optimised Euclidean Algorithm",
      "author": "Recep Said Dulger",
      "description": "Finding gcd of 2 4-bit number",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RecepSaid/tt02-euclidean-algorithm",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "number[0]",
        "io_in[2]": "number[1]",
        "io_in[3]": "number[2]",
        "io_in[4]": "number[3]",
        "io_in[5]": "",
        "io_in[6]": "rst",
        "io_in[7]": "num_okey",
        "io_out[0]": "ssd_out[0]",
        "io_out[1]": "ssd_out[1]",
        "io_out[2]": "ssd_out[2]",
        "io_out[3]": "ssd_out[3]",
        "io_out[4]": "ssd_out[4]",
        "io_out[5]": "ssd_out[5]",
        "io_out[6]": "ssd_out[6]",
        "io_out[7]": ""
      }
    },
    {
      "macro": "regymm_funnyblinky",
      "address": 187,
      "title": "Funny Blinky",
      "author": "regymm",
      "description": "Blink the 8 output LEDs in a funny way.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/regymm/tt02-verilog-funnyblinky",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "switch out ctrl 0",
        "io_in[5]": "switch out ctrl 1",
        "io_in[6]": "switch pause",
        "io_in[7]": "switch function",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "regymm_mcpi",
      "address": 186,
      "title": "Monte Carlo Pi Integrator",
      "author": "regymm",
      "description": "Calculate the value of Pi using the Monte Carlo method",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/regymm/tt02-verilog-mcpi",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "sw control 0",
        "io_in[3]": "sw control 1",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "counter 0",
        "io_out[1]": "counter 1",
        "io_out[2]": "counter 2",
        "io_out[3]": "counter 3",
        "io_out[4]": "counter 4",
        "io_out[5]": "counter 5",
        "io_out[6]": "counter 6",
        "io_out[7]": "counter 7"
      }
    },
    {
      "macro": "rglenn_hex_to_7_seg",
      "address": 210,
      "title": "Hex to 7 Segment Decoder",
      "author": "Randy Glenn",
      "description": "Displays an input 4-bit value as a hex digit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rglenn/tt02-rglenn-hex-to-7-seg",
      "commit": "",
      "pinout": {
        "io_in[0]": "latch",
        "io_in[1]": "blank",
        "io_in[2]": "data 0",
        "io_in[3]": "data 1",
        "io_in[4]": "data 2",
        "io_in[5]": "data 3",
        "io_in[6]": "decimal",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal"
      }
    },
    {
      "macro": "robbertvanginkel_hamming74",
      "address": 67,
      "title": "Hamming(7,4) encoder decoder",
      "author": "Robbert",
      "description": "Encodes and decodes data using Hamming 7,4 codes.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/robbertvanginkel/tt03-hamming74",
      "commit": "",
      "pinout": {
        "io_in[0]": "word / codeword",
        "io_in[1]": "word / codeword",
        "io_in[2]": "word / codeword",
        "io_in[3]": "word / codeword",
        "io_in[4]": "none / codeword",
        "io_in[5]": "none / codeword",
        "io_in[6]": "none / codeword",
        "io_in[7]": "mode (0: encode, 1: decode)",
        "io_out[0]": "codeword / word",
        "io_out[1]": "codeword / word",
        "io_out[2]": "codeword / word",
        "io_out[3]": "codeword / word",
        "io_out[4]": "codeword / error",
        "io_out[5]": "codeword / none",
        "io_out[6]": "codeword / none",
        "io_out[7]": ""
      }
    },
    {
      "macro": "rolfmobile99_alu_fsm_top",
      "address": 125,
      "title": "4-bit badge ALU",
      "author": "Rolf Widenfelt",
      "description": "A 4-bit ALU inspired by Supercon.6 badge",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rolfmobile99/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "ctl",
        "io_in[3]": "",
        "io_in[4]": "datain3",
        "io_in[5]": "datain2",
        "io_in[6]": "datain1",
        "io_in[7]": "datain0",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "cout",
        "io_out[4]": "alu3",
        "io_out[5]": "alu2",
        "io_out[6]": "alu1",
        "io_out[7]": "alu0"
      }
    },
    {
      "macro": "rotary_encoder",
      "address": 202,
      "title": "Rotary encoder",
      "author": "Wim Dams",
      "description": "Reads in a (incremental) rotary encoder and shows the result on the seven-segment display",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/wimdams/tt02-rotary-encoder",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "Rotary encoder pin A (sometimes marked as CLK)",
        "io_in[3]": "Rotary encoder pin B (sometimes marked as DT)",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "s4ga",
      "address": 69,
      "title": "S4GA: Super Slow Serial SRAM FPGA",
      "author": "Jan Gray(TT02), Marco Merlin (TT03)",
      "description": "one fracturable 5-LUT that receives FPGA LUT configuration frames, serially evaluates LUT inputs and LUT outputs",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bat52/tt03-s4ga",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "si[0]",
        "io_in[3]": "si[1]",
        "io_in[4]": "si[2]",
        "io_in[5]": "si[3]",
        "io_in[6]": "in[0]",
        "io_in[7]": "in[1]",
        "io_out[0]": "out[0]",
        "io_out[1]": "out[1]",
        "io_out[2]": "out[2]",
        "io_out[3]": "out[3]",
        "io_out[4]": "out[4]",
        "io_out[5]": "out[5]",
        "io_out[6]": "out[6]",
        "io_out[7]": "debug"
      }
    },
    {
      "macro": "secretFile",
      "address": 234,
      "title": "Secret File",
      "author": "bitluni",
      "description": "Nothing to see here",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-SecretFile",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "bit 0",
        "io_out[1]": "bit 1",
        "io_out[2]": "bit 2",
        "io_out[3]": "bit 3",
        "io_out[4]": "bit 4",
        "io_out[5]": "bit 5",
        "io_out[6]": "bit 6",
        "io_out[7]": "bit 7"
      }
    },
    {
      "macro": "seven_segment_seconds",
      "address": 54,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tinytapeout/tt03-verilog-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "slow clock output"
      }
    },
    {
      "macro": "shadow1229_player",
      "address": 16,
      "title": "bad apple",
      "author": "shadow1229",
      "description": "Plays bad apple over a Piezo Speaker connected across io_out[1:0]. Based on https://github.com/meriac/tt02-play-tune",
      "clock_hz": 12000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shadow1229/tt03-bad-apple",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "shan1293_2bitalu",
      "address": 193,
      "title": "2bitALU",
      "author": "shan",
      "description": "2 bit ALU which performs 16 different operations",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shan1293/tt02-2bitCPU",
      "commit": "",
      "pinout": {
        "io_in[0]": "A1",
        "io_in[1]": "A2",
        "io_in[2]": "B1",
        "io_in[3]": "B2",
        "io_in[4]": "opcode",
        "io_in[5]": "opcode",
        "io_in[6]": "opcode",
        "io_in[7]": "opcode",
        "io_out[0]": "ALU_out",
        "io_out[1]": "ALU_out",
        "io_out[2]": "ALU_out",
        "io_out[3]": "ALU_out",
        "io_out[4]": "ALU_out",
        "io_out[5]": "ALU_out",
        "io_out[6]": "ALU_out",
        "io_out[7]": "ALU_out"
      }
    },
    {
      "macro": "stevenmburns_toplevel",
      "address": 208,
      "title": "Chisel 16-bit GCD with scan in and out",
      "author": "Steve Burns",
      "description": "Simple chisel based design based on Knuth's BinaryGDC algorithm using scan chains for I/O.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/stevenmburns/tt02-scannable-gcd",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ld",
        "io_in[3]": "u_bit",
        "io_in[4]": "v_bit",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "z_bit",
        "io_out[1]": "done",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "swalense_top",
      "address": 204,
      "title": "Configurable Gray Code Counter",
      "author": "Eric Swalens",
      "description": "A configurable counter driven by 2-channel Gray code",
      "clock_hz": 5000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/swalense/tt02-graycode_counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "channel A",
        "io_in[3]": "channel B",
        "io_in[4]": "update on X2",
        "io_in[5]": "SPI CS",
        "io_in[6]": "SPI SCK",
        "io_in[7]": "SPI SDI",
        "io_out[0]": "UART serial output",
        "io_out[1]": "PWM signal",
        "io_out[2]": "direction",
        "io_out[3]": "counter bit 0",
        "io_out[4]": "counter bit 1",
        "io_out[5]": "counter bit 2",
        "io_out[6]": "counter bit 3",
        "io_out[7]": "counter bit 4"
      }
    },
    {
      "macro": "thezoq2_yafpga",
      "address": 128,
      "title": "YaFPGA",
      "author": "Frans Skarman",
      "description": "Yet another FPGA",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TheZoq2/smolfpga",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "input1",
        "io_in[2]": "input2",
        "io_in[3]": "input3",
        "io_in[4]": "input4",
        "io_in[5]": "config data",
        "io_in[6]": "config clock",
        "io_in[7]": "",
        "io_out[0]": "output0",
        "io_out[1]": "output1",
        "io_out[2]": "output2",
        "io_out[3]": "output3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tholin_avalonsemi_5401",
      "address": 105,
      "title": "Avalon Semiconductors '5401' 4-bit Microprocessor",
      "author": "Tholin",
      "description": "4-bit CPU capable of addressing 4096 bytes program memory and 254 words data memory, with 6 words of on-chip RAM and two general-purpose input ports. Hopefully capable of more complex computation than previous CPU submissions.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-AvalonSemi-5401",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "I0 / D0",
        "io_in[3]": "I1 / D1",
        "io_in[4]": "I2 / D2",
        "io_in[5]": "I3 / D3",
        "io_in[6]": "EF0",
        "io_in[7]": "EF1",
        "io_out[0]": "MAR0 / DR0 / DR8 / RR0",
        "io_out[1]": "MAR1 / DR1 / DR9 / RR1",
        "io_out[2]": "MAR2 / DR2 / DR10 / RR2",
        "io_out[3]": "MAR3 / DR3 / DR11 / RR3",
        "io_out[4]": "MAR4 / DR4 / F_MAR",
        "io_out[5]": "MAR5 / DR5 / F_WRITE",
        "io_out[6]": "MAR6 / DR6 / F_JMP",
        "io_out[7]": "MAR7 / DR7 / F_I"
      }
    },
    {
      "macro": "tholin_avalonsemi_tbb1143",
      "address": 115,
      "title": "Avalon Semiconductors 'TBB1143' Programmable Sound Generator",
      "author": "Tholin",
      "description": "Sound generator with two square-wave voices, one sawtooth voice and one noise channel. Can also be used as a general-purpose frequency generator.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-avalonsemi-TBB1143",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "D0",
        "io_in[3]": "D1",
        "io_in[4]": "D2",
        "io_in[5]": "D3",
        "io_in[6]": "A0",
        "io_in[7]": "WRT",
        "io_out[0]": "SOUT0",
        "io_out[1]": "SOUT1",
        "io_out[2]": "T0",
        "io_out[3]": "T1",
        "io_out[4]": "T2",
        "io_out[5]": "T3",
        "io_out[6]": "LED0",
        "io_out[7]": "LED1"
      }
    },
    {
      "macro": "thunderbird_taillight_ctrl",
      "address": 178,
      "title": "Taillight controller of a 1965 Ford Thunderbird",
      "author": "Hirosh Dabui",
      "description": "Asic of a Taillight controller of a 1965 Ford Thunderbird",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/splinedrive/thunderbird_taillight_1965",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "left",
        "io_in[3]": "right",
        "io_in[4]": "hazard",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "r3",
        "io_out[1]": "r2",
        "io_out[2]": "r1",
        "io_out[3]": "l1",
        "io_out[4]": "l2",
        "io_out[5]": "l3",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tiny_bnn",
      "address": 71,
      "title": "Tiny binarized neural network",
      "author": "ReJ aka Renaldas Zioma",
      "description": "8 neurons",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt03-tiny-bnn",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "setup",
        "io_in[2]": "in0 / in parameter (if setup is high)",
        "io_in[3]": "in1",
        "io_in[4]": "in2",
        "io_in[5]": "in3",
        "io_in[6]": "in4",
        "io_in[7]": "in5",
        "io_out[0]": "output neuron 1",
        "io_out[1]": "output neuron 2",
        "io_out[2]": "output neuron 3",
        "io_out[3]": "output neuron 4",
        "io_out[4]": "output neuron 5",
        "io_out[5]": "output neuron 6",
        "io_out[6]": "output neuron 7",
        "io_out[7]": "output neuron 8 / out parameter (if setup is high)"
      }
    },
    {
      "macro": "tiny_fft",
      "address": 106,
      "title": "small FFT",
      "author": "Rice Shelley",
      "description": "Computes a small fft",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RiceShelley/tiny-fft",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "wrEn",
        "io_in[3]": "",
        "io_in[4]": "data_in_0",
        "io_in[5]": "data_in_1",
        "io_in[6]": "data_in_2",
        "io_in[7]": "data_in_3",
        "io_out[0]": "rd_idx_zero",
        "io_out[1]": "",
        "io_out[2]": "data_out_0",
        "io_out[3]": "data_out_1",
        "io_out[4]": "data_out_2",
        "io_out[5]": "data_out_3",
        "io_out[6]": "data_out_4",
        "io_out[7]": "data_out_5"
      }
    },
    {
      "macro": "tiny_kinda_pic",
      "address": 195,
      "title": "Tiny PIC-like MCU",
      "author": "myrtle",
      "description": "serially programmed, subset of PIC ISA, MCU",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-pic",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "prog_strobe",
        "io_in[3]": "prog_data",
        "io_in[4]": "gpi0",
        "io_in[5]": "gpi1",
        "io_in[6]": "gpi2",
        "io_in[7]": "gpi3",
        "io_out[0]": "gpo0",
        "io_out[1]": "gpo1",
        "io_out[2]": "gpo2",
        "io_out[3]": "gpo3",
        "io_out[4]": "gpo4",
        "io_out[5]": "gpo5",
        "io_out[6]": "gpo6",
        "io_out[7]": "gpo7"
      }
    },
    {
      "macro": "tinysat",
      "address": 39,
      "title": "tinysat",
      "author": "Emmanouel Matigakis",
      "description": "Tiny sat solver.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/emmatigakis/tt03-tinysat",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "run",
        "io_in[3]": "load",
        "io_in[4]": "data[0]",
        "io_in[5]": "data[1]",
        "io_in[6]": "data[2]",
        "io_in[7]": "data[3]",
        "io_out[0]": "x[0]",
        "io_out[1]": "x[1]",
        "io_out[2]": "x[2]",
        "io_out[3]": "x[3]",
        "io_out[4]": "sol",
        "io_out[5]": "done",
        "io_out[6]": "0",
        "io_out[7]": "0"
      }
    },
    {
      "macro": "tomkeddie_top_tto",
      "address": 93,
      "title": "HD74480 Clock",
      "author": "Tom Keddie",
      "description": "Displays a clock on a attached HD74480",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2022-2",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "hour set",
        "io_in[7]": "minute set",
        "io_out[0]": "lcd D4",
        "io_out[1]": "lcd D5",
        "io_out[2]": "lcd D6",
        "io_out[3]": "lcd D7",
        "io_out[4]": "lcd EN",
        "io_out[5]": "lcd RS",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tomkeddie_top_tto_a",
      "address": 28,
      "title": "LED Panel Driver",
      "author": "Tom Keddie",
      "description": "Drives a 16x16 P10 LED panel",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2023-1a",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "uart",
        "io_in[3]": "mode",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "red",
        "io_out[1]": "blue",
        "io_out[2]": "b",
        "io_out[3]": "blank",
        "io_out[4]": "green",
        "io_out[5]": "a",
        "io_out[6]": "clk",
        "io_out[7]": "latch"
      }
    },
    {
      "macro": "top_tt03",
      "address": 58,
      "title": "ro-based_tempsense",
      "author": "Jorge Marin, Daniel Arevalos",
      "description": "Ring oscillator whose frecuency depends on temperature.",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JorgeMarinN/tt03_ac3e-usm_ro-based_tempsens",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk_internal",
        "io_in[1]": "clk_external",
        "io_in[2]": "clk_sel",
        "io_in[3]": "enable_inv_osc",
        "io_in[4]": "enable_nand_osc",
        "io_in[5]": "reset",
        "io_in[6]": "rx",
        "io_in[7]": "osc_sel",
        "io_out[0]": "tx",
        "io_out[1]": "sum[8]",
        "io_out[2]": "sum[10]",
        "io_out[3]": "sum[13]",
        "io_out[4]": "sum[15]",
        "io_out[5]": "sum[17]",
        "io_out[6]": "sum[19]",
        "io_out[7]": "sum[21]"
      }
    },
    {
      "macro": "tt2_tholin_diceroll",
      "address": 150,
      "title": "Dice roll",
      "author": "Tholin",
      "description": "Will roll a random number from 1 - 6 on the 7-segment display, like a dice.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AvalonSemiconductors/tt2-diceroll",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "ROLL",
        "io_in[3]": "NC",
        "io_in[4]": "NC",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal point"
      }
    },
    {
      "macro": "tt2_tholin_multiplexed_counter",
      "address": 140,
      "title": "TinyTapeout2 multiplexed segment display timer.",
      "author": "Tholin",
      "description": "Measures time up to 99 minutes and 59 seconds by multiplexing 4 seven-segment displays.",
      "clock_hz": 1024,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-multiplexed-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "NC",
        "io_in[3]": "NC",
        "io_in[4]": "NC",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "A",
        "io_out[1]": "B",
        "io_out[2]": "C",
        "io_out[3]": "D",
        "io_out[4]": "E",
        "io_out[5]": "F",
        "io_out[6]": "G",
        "io_out[7]": "SEL"
      }
    },
    {
      "macro": "tt2_tholin_multiplier",
      "address": 139,
      "title": "TinyTapeout2 4-bit multiplier.",
      "author": "Tholin",
      "description": "Multiplies two 4-bit numbers presented on the input pins and outputs an 8-bit result.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-4x4-multiply",
      "commit": "",
      "pinout": {
        "io_in[0]": "A0",
        "io_in[1]": "A1",
        "io_in[2]": "A2",
        "io_in[3]": "A3",
        "io_in[4]": "B0",
        "io_in[5]": "B1",
        "io_in[6]": "B2",
        "io_in[7]": "B3",
        "io_out[0]": "R0",
        "io_out[1]": "R1",
        "io_out[2]": "R2",
        "io_out[3]": "R3",
        "io_out[4]": "R4",
        "io_out[5]": "R5",
        "io_out[6]": "R6",
        "io_out[7]": "R7"
      }
    },
    {
      "macro": "tt2_tholin_namebadge",
      "address": 145,
      "title": "TinyTapeout 2 LCD Nametag",
      "author": "Tholin",
      "description": "Echoes out a predefined text onto a 20x4 character LCD.",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-lcd-namebadge",
      "commit": "",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "EF0",
        "io_in[3]": "EF1",
        "io_in[4]": "EF2",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "RS",
        "io_out[1]": "E",
        "io_out[2]": "D4",
        "io_out[3]": "D5",
        "io_out[4]": "D6",
        "io_out[5]": "D7",
        "io_out[6]": "LED0",
        "io_out[7]": "LED1"
      }
    },
    {
      "macro": "tucanae47_gray_ctr6",
      "address": 238,
      "title": "Amaranth 6 Bits Gray counter",
      "author": "Camilo Soto",
      "description": "Amaranth Gray 6 Bits gray counter",
      "clock_hz": 3000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tucanae47/tt02-gray-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "count[0]",
        "io_out[1]": "count[1]",
        "io_out[2]": "count[2]",
        "io_out[3]": "count[3]",
        "io_out[4]": "count[4]",
        "io_out[5]": "count[5]",
        "io_out[6]": "count[6]",
        "io_out[7]": ""
      }
    },
    {
      "macro": "udxs_sqrt_top",
      "address": 156,
      "title": "SQRT1 Square Root Engine",
      "author": "Davit Margarian (UDXS)",
      "description": "Computes 4.2 fixed-point square root for any 7-bit integer",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/UDXS/sqrt-tt02",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "i1",
        "io_in[2]": "i2",
        "io_in[3]": "i3",
        "io_in[4]": "i4",
        "io_in[5]": "i5",
        "io_in[6]": "i6",
        "io_in[7]": "i7",
        "io_out[0]": "frac1",
        "io_out[1]": "frac2",
        "io_out[2]": "whole1",
        "io_out[3]": "whole2",
        "io_out[4]": "whole3",
        "io_out[5]": "whole4",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_339501025136214612",
      "address": 56,
      "title": "Straight through test",
      "author": "Matt Venn",
      "description": "Just connects inputs to outputs",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt03-test-straight",
      "commit": "",
      "pinout": {
        "io_in[0]": "a",
        "io_in[1]": "b",
        "io_in[2]": "c",
        "io_in[3]": "d",
        "io_in[4]": "e",
        "io_in[5]": "f",
        "io_in[6]": "g",
        "io_in[7]": "dot",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_340318610245288530",
      "address": 170,
      "title": "1-bit ALU",
      "author": "Leo Moser",
      "description": "1-bit ALU from the book `Structured Computer Organization: Andrew S. Tanenbaum`",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mole99/tt02-1bit-alu",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "COUT"
      }
    },
    {
      "macro": "user_module_340805072482992722",
      "address": 55,
      "title": "7 segment wokwi counter",
      "author": "Matt Venn",
      "description": "counts up from 0 to 9, incrementing once per second",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt03-test-7seg",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_341164910646919762",
      "address": 158,
      "title": "Fibonacci & Gold Code",
      "author": "Daniel Estevez",
      "description": "This project includes two independent designs: a design that calculates terms of the Fibonacci sequence and displays them in hex one character at a time on a 7-segment display, and a Gold code generator that generates the codes used by CCSDS X-band PN Delta-DOR.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/daniestevez/tt02-gold-fibonacci",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "output select (high selects Gold code; low selects Fibonacci LSB marker) & Gold code load value bit 0",
        "io_in[2]": "Fibonacci reset (active-low; asynchronous) & Gold code load value bit 1",
        "io_in[3]": "Gold code load enable (active-low; asynchronous)",
        "io_in[4]": "Gold code load value bit 2",
        "io_in[5]": "Gold code load value bit 3",
        "io_in[6]": "Gold code load value bit 4",
        "io_in[7]": "Gold code load value bit 5",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341178154799333971",
      "address": 175,
      "title": "Pseudo-random number generator",
      "author": "Thomas B\u00f6hm <thomas.bohm@gmail.com>",
      "description": "Pseudo-random number generator using a 16-bit Fibonacci linear-feedback shift register",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tcptomato/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data_in",
        "io_in[2]": "load_en",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "random bit 0",
        "io_out[1]": "random bit 1",
        "io_out[2]": "random bit 2",
        "io_out[3]": "random bit 3",
        "io_out[4]": "random bit 4",
        "io_out[5]": "random bit 5",
        "io_out[6]": "random bit 6",
        "io_out[7]": "random bit 7"
      }
    },
    {
      "macro": "user_module_341178481588044372",
      "address": 212,
      "title": "LED Chaser",
      "author": "Bradley Boccuzzi",
      "description": "Push the button to fill in segments of the LED display, they will continue to shift and fill in the display until the button is released.`",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DaveyPocket/chaser_tt2",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "shift register input",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341277789473735250",
      "address": 184,
      "title": "Asynchronous Binary to Ternary Converter and Comparator",
      "author": "Steven Bos",
      "description": "This chip offers various kinds of conversions and comparisons between binary encoded ternary and unary encoded ternary in both machine readible output and human readible (7-segment display decimal) output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt02-async-binary-ternary-convert-compare",
      "commit": "",
      "pinout": {
        "io_in[0]": "output mode (0 = human, 1 = machine)",
        "io_in[1]": "enable (0 = disable, 1 = enable)",
        "io_in[2]": "opcode0 (see table in documentation for all 4 modes)",
        "io_in[3]": "opcode1",
        "io_in[4]": "input channel B pin0 (see table in documentation what is don't care or illegal input for which mode)",
        "io_in[5]": "input channel B pin1",
        "io_in[6]": "input channel A pin0",
        "io_in[7]": "input channel A pin1",
        "io_out[0]": "segment a (the 7 segment is used for human readable output, sometimes using decimals and sometimes using comparison symbols, see documentation for more details)",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot (the dot is an extra indicator that the output is in machine format)"
      }
    },
    {
      "macro": "user_module_341279123277087315",
      "address": 192,
      "title": "Counter",
      "author": "Adam Zeloof",
      "description": "It counts!",
      "clock_hz": 600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/azzeloof/tt02-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "b0",
        "io_in[2]": "b1",
        "io_in[3]": "b2",
        "io_in[4]": "b3",
        "io_in[5]": "",
        "io_in[6]": "clock divider enable",
        "io_in[7]": "count enable",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341353928049295956",
      "address": 237,
      "title": "Clock divider ASIC",
      "author": "Sad Electronics",
      "description": "Uses a series of flip flops to divide the clock",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt02-tinytapeout-clock-divider-asic",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341423712597181012",
      "address": 183,
      "title": "Scalable synchronous 4-bit tri-directional loadable counter",
      "author": "Steven Bos",
      "description": "This chip offers a scalable n-bit counter design that can be used as a program counter by setting the next address (eg. for a JMP instruction). It can work in 3 directions: counting up, down and pause.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt02-4bit-tristate-loadable-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "count     (0 = disable/countPause, 1 = enable)",
        "io_in[2]": "load      (0 = count mode, 1 = load mode, overwriting any count logic)",
        "io_in[3]": "countDown (0 = countUp, 1 = countUp)",
        "io_in[4]": "addr3     (bits[4:7] are used for loadable count state)",
        "io_in[5]": "addr2",
        "io_in[6]": "addr1",
        "io_in[7]": "addr0",
        "io_out[0]": "output3 (bits [0:3])",
        "io_out[1]": "output2",
        "io_out[2]": "output1",
        "io_out[3]": "output0",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341432030163108435",
      "address": 197,
      "title": "Logic-2G97-2G98",
      "author": "Sirawit Lappisatepun",
      "description": "Replication of TI's Little Logic 1G97 and 1G98 configurable logic gates.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Sirawit7205/tt02-2G97-2G98",
      "commit": "",
      "pinout": {
        "io_in[0]": "dff_clock",
        "io_in[1]": "dff_data",
        "io_in[2]": "gate1_in0",
        "io_in[3]": "gate1_in1",
        "io_in[4]": "gate1_in2",
        "io_in[5]": "gate2_in0",
        "io_in[6]": "gate2_in1",
        "io_in[7]": "gate2_in2",
        "io_out[0]": "dff_out",
        "io_out[1]": "dff_out_bar",
        "io_out[2]": "gate1_out",
        "io_out[3]": "gate1_out_bar",
        "io_out[4]": "gate2_out",
        "io_out[5]": "gate2_out_bar",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341438392303616596",
      "address": 230,
      "title": "Digital padlock",
      "author": "Jean THOMAS",
      "description": "A 4-digit electronic padlock",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jeanthom/tinytapout-lock",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Button A",
        "io_in[2]": "Button B",
        "io_in[3]": "Button C",
        "io_in[4]": "Button D",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "Button press detected",
        "io_out[7]": "Code valid"
      }
    },
    {
      "macro": "user_module_341490465660469844",
      "address": 154,
      "title": "7-segment LED flasher",
      "author": "Joseph Chiu",
      "description": "Drives 7-segment LED display, alternating between NIC and JAC",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/toybuilder/tt02-learn-tinytapeout",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "Prescale select bit 0",
        "io_in[6]": "Prescale select bit 1",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "user_module_341516949939814994",
      "address": 138,
      "title": "Shiftregister Challenge 40 Bit",
      "author": "Thorsten Knoll",
      "description": "The design is a 40 bit shiftregister with a hardcoded 40 bit number. The challenge is to find the correct 40 bit to enable the output to high. With all other numbers the output will be low.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tinytapeout02_shiftregister_challenge",
      "commit": "",
      "pinout": {
        "io_in[0]": "data",
        "io_in[1]": "clk",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341541108650607187",
      "address": 137,
      "title": "4 bit counter on steamdeck",
      "author": "13arn",
      "description": "copy of my tt01 submission, enable first input and press button to use the counter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/13arn/tt02_counter_steamdeck",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341546888233747026",
      "address": 209,
      "title": "Adder with 7-segment decoder",
      "author": "cy384",
      "description": "Four bit adder with binary to 7 segment display decoder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cy384/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "first number bit 0 (least significant)",
        "io_in[1]": "first number bit 1",
        "io_in[2]": "first number bit 2",
        "io_in[3]": "first number bit 3",
        "io_in[4]": "second number bit 0 (least significant)",
        "io_in[5]": "second number bit 1",
        "io_in[6]": "second number bit 2",
        "io_in[7]": "second number bit 3",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment DP (carry bit)"
      }
    },
    {
      "macro": "user_module_341557831870186068",
      "address": 229,
      "title": "4x4 RAM",
      "author": "Michael Bartholic",
      "description": "4 word, 4 bit read/write RAM",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/theFestest/tt02-4x4-ram",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data[0]",
        "io_in[2]": "data[1]",
        "io_in[3]": "data[2]",
        "io_in[4]": "data[3]",
        "io_in[5]": "addr[0]",
        "io_in[6]": "addr[1]",
        "io_in[7]": "write_enable",
        "io_out[0]": "rdata[0]",
        "io_out[1]": "rdata[1]",
        "io_out[2]": "rdata[2]",
        "io_out[3]": "rdata[3]",
        "io_out[4]": "addr[0]",
        "io_out[5]": "addr[1]",
        "io_out[6]": "clock",
        "io_out[7]": "write_enable"
      }
    },
    {
      "macro": "user_module_341571228858843732",
      "address": 172,
      "title": "r2rdac",
      "author": "youngpines",
      "description": "small r2r",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/youngpines/tt02-youngpines-submission",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341589685194195540",
      "address": 180,
      "title": "chi 2 shares",
      "author": "Maria Chiara Molteni",
      "description": "Chi function of Xoodoo protected by TI with two shares",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chi2shares",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341608574336631379",
      "address": 181,
      "title": "chi 3 shares",
      "author": "Molteni Maria Chiara",
      "description": "Chi function of Xoodoo protected by TI with three shares",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chi3shares",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341609034095264340",
      "address": 159,
      "title": "tinytapeout2-HELLo-3orLd-7seg",
      "author": "Rakesh Peter",
      "description": "HELLo-3orLd Runner on 7 segment Display",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/r4d10n/tt02-HELLo-3orLd-7seg",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "dp toggle",
        "io_in[4]": "BCD bit 3",
        "io_in[5]": "BCD bit 2",
        "io_in[6]": "BCD bit 1",
        "io_in[7]": "BCD bit 0",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "user_module_341613097060926036",
      "address": 236,
      "title": "Adi counter",
      "author": "Prabal Dutta",
      "description": "Test FSM",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/prabaldutta/tt02-adi-demo",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341614346808328788",
      "address": 200,
      "title": "Wolf sheep cabbage river crossing puzzle ASIC design",
      "author": "maehw",
      "description": "Play the wolf, goat and cabbage puzzle interactively.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-wokwi-wolf-goat-cabbage",
      "commit": "",
      "pinout": {
        "io_in[0]": "not connected because it is typically used for clocked designs and may be used in the future of this design",
        "io_in[1]": "input signal F for the position of the farmer",
        "io_in[2]": "input signal W for the position of the wolf",
        "io_in[3]": "input signal G for the position of the goat",
        "io_in[4]": "input signal C for the position of the cabbage",
        "io_in[5]": "here be dragons or an easter egg",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "output signal ~E, i.e. the top and bottom segments light up, when the game is over due to an unattended situation on any river bank side",
        "io_out[1]": "output signal ~R i.e. the top-right and bottom-right segments light up, to indicate an unattended situation on the right river bank (game over)",
        "io_out[2]": "output signal ~R i.e. the top-right and bottom-right segments light up, to indicate an unattended situation on the right river bank (game over)",
        "io_out[3]": "output signal ~E, i.e. the top and bottom segments light up, when the game is over due to an unattended situation on any river bank side",
        "io_out[4]": "output signal ~L i.e. the top-left and bottom-left segments light up, to indicate an unattended situation on the left river bank (game over)",
        "io_out[5]": "output signal ~L i.e. the top-left and bottom-left segments light up, to indicate an unattended situation on the left river bank (game over)",
        "io_out[6]": "here be dragons or an easter egg",
        "io_out[7]": "output signal A to light up the \"dot LED\" of the 7 segment display as an indicator that all objects have reached the right bank of the river and the game is won! \ud83c\udf89\ud83c\udf89\ud83c\udf89"
      }
    },
    {
      "macro": "user_module_341614374571475540",
      "address": 134,
      "title": "chiDOM",
      "author": "Maria CHiara Molteni",
      "description": "Chi function of Xoodoo protected at the first-order by DOM",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chiDOM",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341620484740219475",
      "address": 131,
      "title": "8x8 Bit Pattern Player",
      "author": "Thorsten Knoll",
      "description": "8x8 bit serial programmable, addressable and playable memory.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tinytapeout02_pattern_player",
      "commit": "",
      "pinout": {
        "io_in[0]": "data",
        "io_in[1]": "clk_sr",
        "io_in[2]": "address_0",
        "io_in[3]": "address_1",
        "io_in[4]": "address_2",
        "io_in[5]": "mode",
        "io_in[6]": "",
        "io_in[7]": "clk_pl",
        "io_out[0]": "bit 0",
        "io_out[1]": "bit 1",
        "io_out[2]": "bit 2",
        "io_out[3]": "bit 3",
        "io_out[4]": "bit 4",
        "io_out[5]": "bit 5",
        "io_out[6]": "bit 6",
        "io_out[7]": "bit 7"
      }
    },
    {
      "macro": "user_module_341628725785264722",
      "address": 221,
      "title": "MicroASIC VI",
      "author": "Mikhail Svarichevsky",
      "description": "Free-running oscillators to verify simulation vs reality + TRNG",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BarsMonster/MicroAsicVI",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock in (for debugging)",
        "io_in[1]": "reset",
        "io_in[2]": "shift register clk",
        "io_in[3]": "shift register data",
        "io_in[4]": "clock source id_0",
        "io_in[5]": "clock source id_1",
        "io_in[6]": "clock source id_2",
        "io_in[7]": "",
        "io_out[0]": "clock divided by 2^10",
        "io_out[1]": "clock divided by 2^14",
        "io_out[2]": "clock divided by 2^18",
        "io_out[3]": "clock divided by 2^22",
        "io_out[4]": "clock divided by 2^26",
        "io_out[5]": "clock divided by 2^30",
        "io_out[6]": "clock divided by 2^32",
        "io_out[7]": "Bit 11 of shift register (to ensure it's not optimized away)"
      }
    },
    {
      "macro": "user_module_341631511790879314",
      "address": 201,
      "title": "Low-speed UART transmitter with limited character set loading",
      "author": "maehw",
      "description": "Low baudrate UART transmitter (8N1) with limited character set (0x40..0x5F; includes all capital letters in the ASCII table) loading.",
      "clock_hz": 9600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-wokwi-lowspeed-tiny-uart",
      "commit": "",
      "pinout": {
        "io_in[0]": "300 Hz input clock signal (or different value supported by the whole",
        "io_in[1]": "bit b0 (the least significant bit) of the loaded and transmitted character",
        "io_in[2]": "bit b1 of the loaded and transmitted character",
        "io_in[3]": "bit b2 of the loaded and transmitted character",
        "io_in[4]": "bit b3 of the loaded and transmitted character",
        "io_in[5]": "bit b4 of the loaded and transmitted character",
        "io_in[6]": "load word into shift register from parallel input (IN1..IN5) (1) or cycle the existing word with start/stop bits around it (0)",
        "io_in[7]": "",
        "io_out[0]": "UART (serial output pin, direct throughput)",
        "io_out[1]": "UART (serial output pin, gated by enable signal)",
        "io_out[2]": "UART (serial output pin, reverse polarity, direct throughput)",
        "io_out[3]": "UART (serial output pin, reverse polarity, gated by enable signal)",
        "io_out[4]": "UART (MSBit, direct throughput); typically set to 1 or can be used to sniffing the word cycling through the shift register)",
        "io_out[5]": "UART (MSBit, reverse polarity, direct throughput); same usage as above",
        "io_out[6]": "UART (MSBit, gated by enable signal); typically set to 1 or can be used to sniffing the word cycling through the shift register)",
        "io_out[7]": "UART (MSBit, reverse polarity, gated by enable signal); same usage as above"
      }
    },
    {
      "macro": "user_module_341631644820570706",
      "address": 225,
      "title": "LAB11",
      "author": "Thomas Zachariah",
      "description": "Cycles through the characters of LAB11",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tzachari/tt02-lab11",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341678527574180436",
      "address": 239,
      "title": "Laura's L",
      "author": "Laura",
      "description": "Makes an L on the 7 segment when you press buttons 1 & 2",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt02-laura",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "button 1",
        "io_in[2]": "button 2",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_342981109408072274",
      "address": 113,
      "title": "A LED Flasher",
      "author": "Ben Everard",
      "description": "Select different inputs to generate different LED patterns",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/benevpi/tt02-LED-flasher",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "not_1",
        "io_in[2]": "not_1_2",
        "io_in[3]": "not_1_2_3",
        "io_in[4]": "not_all",
        "io_in[5]": "direction",
        "io_in[6]": "toggle_direction",
        "io_in[7]": "clock_div_enable",
        "io_out[0]": "LED1",
        "io_out[1]": "LED2",
        "io_out[2]": "LED3",
        "io_out[3]": "LED4",
        "io_out[4]": "LED5",
        "io_out[5]": "LED6",
        "io_out[6]": "LED7",
        "io_out[7]": "LED8"
      }
    },
    {
      "macro": "user_module_346553315158393428",
      "address": 107,
      "title": "Stream Integrator",
      "author": "William Moyes",
      "description": "A silicon implementation of a simple optical computation",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/moyesw/tt02-moyesw-StreamIntegrator",
      "commit": "",
      "pinout": {
        "io_in[0]": "Value from Tape A",
        "io_in[1]": "Value from Tape B",
        "io_in[2]": "Value from Tape C",
        "io_in[3]": "Value from Tape D",
        "io_in[4]": "Extra term XORed with generator output",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "Output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_346916357828248146",
      "address": 109,
      "title": "Configurable SR",
      "author": "Greg Steiert",
      "description": "Configurable gates driving SR and D flip-flops",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/steieio/tt02-submission-universal-sr",
      "commit": "",
      "pinout": {
        "io_in[0]": "A-0",
        "io_in[1]": "A-1",
        "io_in[2]": "A-SEL",
        "io_in[3]": "A-INV",
        "io_in[4]": "B-0",
        "io_in[5]": "B-1",
        "io_in[6]": "B-SEL",
        "io_in[7]": "B-INV",
        "io_out[0]": "MUX-A",
        "io_out[1]": "XOR-A",
        "io_out[2]": "SR-Q",
        "io_out[3]": "D-Q",
        "io_out[4]": "MUX-B",
        "io_out[5]": "XOR-B",
        "io_out[6]": "SR-Q#",
        "io_out[7]": "D-Q#"
      }
    },
    {
      "macro": "user_module_347140425276981843",
      "address": 86,
      "title": "Customizable UART Character",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design implements a single character UART transmitter using registers made from D-flip flops and multiplexers.",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03-UARTcharacter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Bit 0",
        "io_in[2]": "Bit 1",
        "io_in[3]": "Bit 2",
        "io_in[4]": "Bit 3",
        "io_in[5]": "Bit 4",
        "io_in[6]": "Load/TX",
        "io_in[7]": "Output Enable",
        "io_out[0]": "segment a (Load/TX)",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f (Output Enable)",
        "io_out[6]": "segment g",
        "io_out[7]": "UART Serial Out"
      }
    },
    {
      "macro": "user_module_347144898258928211",
      "address": 85,
      "title": "Customizable UART String",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design Supports sending multiple ASCII characters over UART.",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03-UARTstring",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "N/A",
        "io_in[2]": "N/A",
        "io_in[3]": "N/A",
        "io_in[4]": "N/A",
        "io_in[5]": "N/A",
        "io_in[6]": "Load/TX",
        "io_in[7]": "Output Enable",
        "io_out[0]": "segment a (Output Enable)",
        "io_out[1]": "segment b (Load/TX)",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "UART Serial Out"
      }
    },
    {
      "macro": "user_module_347417602591556180",
      "address": 84,
      "title": "Customizable Padlock",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design implements a customizable padlock. Set a code for your digital safe!",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03-padlock",
      "commit": "",
      "pinout": {
        "io_in[0]": "N/A",
        "io_in[1]": "Reset",
        "io_in[2]": "Code 0",
        "io_in[3]": "Code 1",
        "io_in[4]": "Code 2",
        "io_in[5]": "N/A",
        "io_in[6]": "N/A",
        "io_in[7]": "Set Code",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347497504164545108",
      "address": 87,
      "title": "7-Seg 'Tiny Tapeout' Display",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This circuit will output a string of characters (\u2019tiny tapeout\u2019) to the 7-segment display.",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt03-7segstringdisplay",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Reset Counter",
        "io_in[2]": "N/A",
        "io_in[3]": "Clock Disable (Test Mode)",
        "io_in[4]": "Test Logic A",
        "io_in[5]": "Test Logic B",
        "io_in[6]": "Test Logic C",
        "io_in[7]": "Test Logic D",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "N/A"
      }
    },
    {
      "macro": "user_module_347592305412145748",
      "address": 104,
      "title": "4-spin Ising Chain Simulation",
      "author": "Seppe Van Dyck",
      "description": "A self-contained physics simulation. This circuit simulates 4 spins of an Ising chain in  an external field.",
      "clock_hz": 20,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/svd321/tt02-Ising",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock, clock input.",
        "io_in[1]": "T0, LSB of the 3-bit temperature representation.",
        "io_in[2]": "T1, Middle bit of the 3-bit temperature.",
        "io_in[3]": "T2, MSB of the 3-bit temperature.",
        "io_in[4]": "N1, Value of neighbour 1 (up/1 or down/0).",
        "io_in[5]": "N2, Value of neighbour 2 (up/1 or down/0).",
        "io_in[6]": "J, The sign of the NN coupling constant J.",
        "io_in[7]": "H, Value of the coupling to the external field H.",
        "io_out[0]": "segment a, Spin 0.",
        "io_out[1]": "segment b, Spin 1.",
        "io_out[2]": "segment c, Spin 2.",
        "io_out[3]": "segment d, Spin 3.",
        "io_out[4]": "segment e, Neighbour 2.",
        "io_out[5]": "segment f, Neighbour 1.",
        "io_out[6]": "",
        "io_out[7]": "segment h, MC Step Indicator."
      }
    },
    {
      "macro": "user_module_347594509754827347",
      "address": 110,
      "title": "LUTRAM",
      "author": "Luis Ardila",
      "description": "LUTRAM with 4 bit address and 8 bit output preloaded with a binary to 7 segments decoder, sadly it was too big for 0-F, so now it is 0-9?",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/leardilap/tt02-LUTRAM",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data",
        "io_in[2]": "reset",
        "io_in[3]": "nc",
        "io_in[4]": "address bit 3",
        "io_in[5]": "address bit 2",
        "io_in[6]": "address bit 1",
        "io_in[7]": "address bit 0",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment pd"
      }
    },
    {
      "macro": "user_module_347619669052490324",
      "address": 146,
      "title": "UART-CC",
      "author": "Christina Cyr",
      "description": "UART Template",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Christina-Cyr/tt02-submission-UART-CC",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347688030570545747",
      "address": 112,
      "title": "BCD to 7-segment encoder",
      "author": "maehw",
      "description": "Encode binary coded decimals (BCD) in the range 0..9 to 7-segment display control signals",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-bcd-7segment-encoder",
      "commit": "",
      "pinout": {
        "io_in[0]": "w",
        "io_in[1]": "x",
        "io_in[2]": "y",
        "io_in[3]": "z",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347690870424732244",
      "address": 103,
      "title": "German Traffic Light State Machine",
      "author": "Jens Schleusner",
      "description": "A state machine to control german traffic lights at an intersection.",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JensIMS/tt02-trafficlight",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "main street red",
        "io_out[1]": "main street yellow",
        "io_out[2]": "main street green",
        "io_out[3]": "main street pedestrian green",
        "io_out[4]": "side street red",
        "io_out[5]": "side street yellow",
        "io_out[6]": "side street green",
        "io_out[7]": "side street pedestrian green"
      }
    },
    {
      "macro": "user_module_347787021138264660",
      "address": 100,
      "title": "TinySensor",
      "author": "Justin Pelan",
      "description": "Using external hardware photodiodes as inputs, display light intensity on the 7-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/justinP-wrk/tt02-TinySensor",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347894637149553236",
      "address": 108,
      "title": "tiny-fir",
      "author": "Tom Schucker",
      "description": "4bit 2-stage FIR filter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Tschucker/tt02-submission-tiny-fir",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data0/tap0",
        "io_in[2]": "data1/tap1",
        "io_in[3]": "data2/tap2",
        "io_in[4]": "data3/tap3",
        "io_in[5]": "select0",
        "io_in[6]": "select1",
        "io_in[7]": "loadpulse",
        "io_out[0]": "fir1/mult0/tap10",
        "io_out[1]": "fir2/mult1/tap11",
        "io_out[2]": "fir3/mult2/tap12",
        "io_out[3]": "fir4/mult3/tap13",
        "io_out[4]": "fir5/mult4/tap20",
        "io_out[5]": "fir6/mult5/tap21",
        "io_out[6]": "fir7/mult6/tap22",
        "io_out[7]": "fir8/mult7/tap23"
      }
    },
    {
      "macro": "user_module_348121131386929746",
      "address": 118,
      "title": "Loading Animation",
      "author": "Andre & Milosch Meriac",
      "description": "Submission for tt02 - Rotating Dash",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/loading-animation",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "mode",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348195845106041428",
      "address": 117,
      "title": "Tiny Phase/Frequency Detector",
      "author": "argunda",
      "description": "Detect phase shifts between 2 square waves.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/argunda/tt02-TinyPFD",
      "commit": "",
      "pinout": {
        "io_in[0]": "reference clock",
        "io_in[1]": "feedback clock",
        "io_in[2]": "active-low reset",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "up",
        "io_out[1]": "(inverted) down",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348242239268323922",
      "address": 127,
      "title": "Siren",
      "author": "Alan Green",
      "description": "Pretty patterns and a siren straight from the 1970s",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alanvgreen/tt02-siren",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "pattern_select",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348255968419643987",
      "address": 122,
      "title": "Tiny Synth",
      "author": "Nanik Adnani",
      "description": "A tiny synthesizer! Modulates the frequency of the clock based on inputs, plays a C scale (hopefully).",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nanikgeorge/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "C",
        "io_in[2]": "D",
        "io_in[3]": "E",
        "io_in[4]": "F",
        "io_in[5]": "G",
        "io_in[6]": "A",
        "io_in[7]": "B",
        "io_out[0]": "Pitch + 1 Octave",
        "io_out[1]": "Pitch",
        "io_out[2]": "Pitch - 1 Octave",
        "io_out[3]": "Pitch - 2 Octave",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348260124451668562",
      "address": 124,
      "title": "prbs15",
      "author": "Tom Schucker",
      "description": "generates and checks prbs15 sequences",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/teaandtechtime/tt02-submission-prbs15",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "gnd",
        "io_in[2]": "enable",
        "io_in[3]": "check",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "clk",
        "io_out[1]": "prbs15",
        "io_out[2]": "error",
        "io_out[3]": "checked",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348381622440034899",
      "address": 173,
      "title": "Worm in a Maze",
      "author": "Tim Victor",
      "description": "Animation demo on seven-segment LED",
      "clock_hz": 25,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/timvgso/tinatapeworm",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "disable auto-reset",
        "io_in[2]": "manual reset",
        "io_in[3]": "disable /16 clock divider (\"turbo mode\")",
        "io_in[4]": "display 2 or 3 worm segments",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "LED segment a",
        "io_out[1]": "LED segment b",
        "io_out[2]": "LED segment c",
        "io_out[3]": "LED segment d",
        "io_out[4]": "LED segment e",
        "io_out[5]": "LED segment f",
        "io_out[6]": "LED segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348540666182107731",
      "address": 153,
      "title": "Test2",
      "author": "Shaos",
      "description": "Testing Flip-Flops",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shaos/tt02-submission-shaos",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "D",
        "io_in[2]": "C",
        "io_in[3]": "S",
        "io_in[4]": "R",
        "io_in[5]": "NAND1",
        "io_in[6]": "NAND2",
        "io_in[7]": "Muller",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_348787952842703444",
      "address": 185,
      "title": "Vector dot product",
      "author": "Robert Riachi",
      "description": "Compute the dot product of two 2x1 vectors each containing 2 bit integers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RobertRiachi/tt02-dot-product",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349011320806310484",
      "address": 161,
      "title": "GOL-Cell",
      "author": "Shaos",
      "description": "Game of Life Cell",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shaos-net/tt02-submission-shaos2",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "half",
        "io_in[3]": "input 0 or 5",
        "io_in[4]": "input 1 or 6",
        "io_in[5]": "input 2 or 7",
        "io_in[6]": "input 3 or 8",
        "io_in[7]": "input 4 or 9",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "inverted clock"
      }
    },
    {
      "macro": "user_module_349047610915422802",
      "address": 155,
      "title": "Nano-neuron",
      "author": "Daniel Burke",
      "description": "minimal low vector test",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/drburke3/tt02-nano-neuron",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349228308755382868",
      "address": 171,
      "title": "SPI Flash State Machine",
      "author": "Greg Steiert",
      "description": "Implements a state machine stored in an external SPI flash",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/steieio/tt02-sfsm-wokwi",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "din",
        "io_in[3]": "in0",
        "io_in[4]": "in1",
        "io_in[5]": "in2",
        "io_in[6]": "in3",
        "io_in[7]": "in4",
        "io_out[0]": "cs",
        "io_out[1]": "dout",
        "io_out[2]": "out0",
        "io_out[3]": "out1",
        "io_out[4]": "out2",
        "io_out[5]": "out3",
        "io_out[6]": "out4",
        "io_out[7]": "out5"
      }
    },
    {
      "macro": "user_module_349255310782759507",
      "address": 215,
      "title": "Test3",
      "author": "Shaos",
      "description": "Binary Coded Ternary Test",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ternary-info/tt02-submission-shaos3",
      "commit": "",
      "pinout": {
        "io_in[0]": "C+",
        "io_in[1]": "C-",
        "io_in[2]": "N+",
        "io_in[3]": "N-",
        "io_in[4]": "O+",
        "io_in[5]": "O-",
        "io_in[6]": "P+",
        "io_in[7]": "P-",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_349546262775726676",
      "address": 176,
      "title": "BCD to 7-Segment Decoder",
      "author": "JinGen Lim",
      "description": "Converts a BCD input into a 7-segment display output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jglim/tt02-bcd-7seg",
      "commit": "",
      "pinout": {
        "io_in[0]": "input 1 (BCD 1)",
        "io_in[1]": "input 2 (BCD 2)",
        "io_in[2]": "input 3 (BCD 4)",
        "io_in[3]": "input 4 (BCD 8)",
        "io_in[4]": "decimal dot (passthrough)",
        "io_in[5]": "output invert",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot"
      }
    },
    {
      "macro": "user_module_349729432862196307",
      "address": 194,
      "title": "A (7, 1/2) Convolutional Encoder",
      "author": "Jos van 't Hof",
      "description": "A (7, 1/2) Convolutional Encoder following the CCSDS 131.0-B-4 standard.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Josvth/tt02-convolutional-encoder",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "write_not_shift",
        "io_in[2]": "shift_input_0",
        "io_in[3]": "shift_input_1",
        "io_in[4]": "shift_input_2",
        "io_in[5]": "shift_input_3",
        "io_in[6]": "shift_input_4",
        "io_in[7]": "shift_input_5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp (used to indicate clock)"
      }
    },
    {
      "macro": "user_module_349790606404354643",
      "address": 191,
      "title": "SRLD",
      "author": "Chris Burton",
      "description": "8-bit Shift Register with latch and hex decode to display alternating nibbles",
      "clock_hz": 16,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/burtyb/tt02-srld",
      "commit": "",
      "pinout": {
        "io_in[0]": "displayClock",
        "io_in[1]": "shiftIn",
        "io_in[2]": "shiftClk",
        "io_in[3]": "latch",
        "io_in[4]": "cycle_display",
        "io_in[5]": "lowHighNibble",
        "io_in[6]": "useLatch",
        "io_in[7]": "mslLsb",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "High/low nibble indicator"
      }
    },
    {
      "macro": "user_module_349813388252021330",
      "address": 218,
      "title": "4:2 Compressor",
      "author": "saicharan0112",
      "description": "A Basic 4:2 compressor which contains 4 inputs and 1 carry_in bit which compresses to 2 outputs and 1 carry_out bit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/saicharan0112/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "a1 is one of the 4 main input bits",
        "io_in[1]": "a2 is one of the 4 main input bits",
        "io_in[2]": "a3 is one of the 4 main input bits",
        "io_in[3]": "a4 is one of the 4 main input bits",
        "io_in[4]": "cin is the carry_in input bit",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "o1 is the one of the 3 compressed output bits",
        "io_out[1]": "o2 is the one of the 3 compressed output bits",
        "io_out[2]": "cout is the carry_out bit",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349833797657690706",
      "address": 223,
      "title": "CRC-16 and Parity calculator",
      "author": "Chris Burton",
      "description": "CRC-16/XModem and Even Parity calculator based on Ben Eater error detection videos.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/8086net/tt02-CRC16",
      "commit": "",
      "pinout": {
        "io_in[0]": "nRst_A",
        "io_in[1]": "shiftData_A",
        "io_in[2]": "shiftClk_A",
        "io_in[3]": "nRead_A",
        "io_in[4]": "nRst_B",
        "io_in[5]": "shiftData_B",
        "io_in[6]": "shiftClk_B",
        "io_in[7]": "nRead_B",
        "io_out[0]": "crcOutput_A",
        "io_out[1]": "parity_A",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "crcOutput_B",
        "io_out[5]": "parity_B",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349886696875098706",
      "address": 206,
      "title": "Marquee",
      "author": "Christopher 'ctag' Bero",
      "description": "Scrolls 'ctag' across the 7seg.",
      "clock_hz": 2,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ctag/tt02-submission-ctag",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349901899339661908",
      "address": 151,
      "title": "CNS TT02 Test 1:Score Board",
      "author": "Bryan Bonilla Garay, Devin Alvarez, Ishaan Singh, Yu Feng Zhou, and N. Sertac Artan",
      "description": "First test run of CNS Lab. Displays an 8-bit score from one of two players as a two-digit hexadecimal value.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NYIT-CNS/cns001-tt02-submission1",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "rst",
        "io_in[4]": "display_digit",
        "io_in[5]": "display_user",
        "io_in[6]": "user",
        "io_in[7]": "mode",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_349934460979905106",
      "address": 219,
      "title": "PS2 keyboard Interface",
      "author": "Tanish Khanchandani",
      "description": "PS2 keyboard interface to enter charecters into a computer. Use the PS2 hex scan codes (https://techdocs.altium.com/display/FPGA/PS2+Keyboard+Scan+Codes) to enter hex codes and it will send the letter to your computer.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tanishnk/Tiny-Tapeout-2-submission-Tanish-k",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "hex Bit 1",
        "io_in[2]": "hex Bit 2",
        "io_in[3]": "hex Bit 3",
        "io_in[4]": "hex Bit 4",
        "io_in[5]": "Set 1st hex",
        "io_in[6]": "set 2nd hex",
        "io_in[7]": "Enable to send",
        "io_out[0]": "NC",
        "io_out[1]": "NC",
        "io_out[2]": "NC",
        "io_out[3]": "NC",
        "io_out[4]": "NC",
        "io_out[5]": "NC",
        "io_out[6]": "Clock",
        "io_out[7]": "Data"
      }
    },
    {
      "macro": "user_module_349952820323025491",
      "address": 231,
      "title": "FFT Butterfly in Wokwi",
      "author": "James R",
      "description": "Single FFT butterfly with 2-bit resolution",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "xr0.0",
        "io_in[1]": "xr0.1",
        "io_in[2]": "xj0.0",
        "io_in[3]": "xj0.1",
        "io_in[4]": "xr1.0",
        "io_in[5]": "xr1.1",
        "io_in[6]": "xj1.0",
        "io_in[7]": "xj1.1",
        "io_out[0]": "xr0.0",
        "io_out[1]": "Xr0.1",
        "io_out[2]": "Xj0.0",
        "io_out[3]": "Xj0.1",
        "io_out[4]": "Xr1.0",
        "io_out[5]": "Xr1.1",
        "io_out[6]": "Xj1.0",
        "io_out[7]": "Xj1.1"
      }
    },
    {
      "macro": "user_module_349953952950780498",
      "address": 152,
      "title": "CNS002 (TT02-Test 2)",
      "author": "Bryan Bonilla Garay, Devin Alvarez, Ishaan Singh, Yu Feng Zhou, and N. Sertac Artan",
      "description": "First test run of CNS Lab (second design)",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NYIT-CNS/cns002-tt02-submission2",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_354091612057990145",
      "address": 18,
      "title": "4bit Adder",
      "author": "Carin Schreiner",
      "description": "This tiny tape out project takes two four bit numberbs and adds them.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SchreinerCarin/tt03-4bit-adder",
      "commit": "",
      "pinout": {
        "io_in[0]": "a0",
        "io_in[1]": "a1",
        "io_in[2]": "a2",
        "io_in[3]": "a3",
        "io_in[4]": "b0",
        "io_in[5]": "b1",
        "io_in[6]": "b2",
        "io_in[7]": "b3",
        "io_out[0]": "r0",
        "io_out[1]": "r1",
        "io_out[2]": "r2",
        "io_out[3]": "r3",
        "io_out[4]": "carry",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_357106633951414273",
      "address": 8,
      "title": "KS-Signal",
      "author": "Yannick Rei\u00df",
      "description": "Set KS-Signal based on track information.",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yannickreiss/TT3_KS-Signal",
      "commit": "",
      "pinout": {
        "io_in[0]": "track1_free",
        "io_in[1]": "track2_free",
        "io_in[2]": "pre_signal",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "allow shunting",
        "io_in[6]": "Vorsicht!",
        "io_in[7]": "shorter breaking distance",
        "io_out[0]": "Fahrt! (Green)",
        "io_out[1]": "Halt Erwarten! (Orange)",
        "io_out[2]": "Halt! (Red)",
        "io_out[3]": "Vorsicht! (All yellow)",
        "io_out[4]": "pre signal indicator (white)",
        "io_out[5]": "lower shunting indicator (white)",
        "io_out[6]": "shorter breaking distance (white)",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_357752736742764545",
      "address": 2,
      "title": "7 Segment Life",
      "author": "icegoat9",
      "description": "Simple 7-segment cellular automaton",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/icegoat9/tinytapeout03-7seglife",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "load0",
        "io_in[2]": "load1",
        "io_in[3]": "runmode",
        "io_in[4]": "clockdiv8",
        "io_in[5]": "clockdiv4",
        "io_in[6]": "clockdiv2",
        "io_in[7]": "",
        "io_out[0]": "7segmentA",
        "io_out[1]": "7segmentB",
        "io_out[2]": "7segmentC",
        "io_out[3]": "7segmentD",
        "io_out[4]": "7segmentE",
        "io_out[5]": "7segmentF",
        "io_out[6]": "7segmentG",
        "io_out[7]": "7segmentDP"
      }
    },
    {
      "macro": "user_module_357897381919942657",
      "address": 7,
      "title": "4x4 Memory",
      "author": "Yannick Rei\u00df",
      "description": "Store 4x4 bits of memory.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yannickreiss/TT3_Memory",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "write_enable",
        "io_in[3]": "addr1",
        "io_in[4]": "addr2",
        "io_in[5]": "data1",
        "io_in[6]": "data2",
        "io_in[7]": "data3",
        "io_out[0]": "data1",
        "io_out[1]": "data2",
        "io_out[2]": "data3",
        "io_out[3]": "data4",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_357917324056483841",
      "address": 53,
      "title": "M segments",
      "author": "Matt Venn",
      "description": "pressing the first 4 buttons will put an M on the LEDs",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt03-m-segments",
      "commit": "",
      "pinout": {
        "io_in[0]": "in1",
        "io_in[1]": "in2",
        "io_in[2]": "in3",
        "io_in[3]": "in4",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_358370685977079809",
      "address": 50,
      "title": "Microtapeout",
      "author": "Enno Schnackenberg",
      "description": "A Shift Register, A seven segment encoder (Hexadecimal), 1 Bit ALU, 3 Bit Adder and a suprise",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Intubun/tt03-microtapeout",
      "commit": "",
      "pinout": {
        "io_in[0]": "Project Select 0",
        "io_in[1]": "Project Select 1",
        "io_in[2]": "I1",
        "io_in[3]": "I2",
        "io_in[4]": "I3",
        "io_in[5]": "I4",
        "io_in[6]": "I5",
        "io_in[7]": "I6",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_358970514554149889",
      "address": 6,
      "title": "Single digit latch",
      "author": "Dylan Garrett",
      "description": "Store a single digit 0-9 and display it on a 7-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dgarrett/tt03-num-latch",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_359353377078748161",
      "address": 10,
      "title": "SKINNY SBOX",
      "author": "Niklas Fassbender",
      "description": "Implementation of a 4-Bit Sbox for SKINNY",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nikals99/tt03-skinny-sbox",
      "commit": "",
      "pinout": {
        "io_in[0]": "bit_0_lsb",
        "io_in[1]": "bit_1",
        "io_in[2]": "bit_2",
        "io_in[3]": "bit_3_msb",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "bit_0_lsb",
        "io_out[1]": "bit_1",
        "io_out[2]": "bit_2",
        "io_out[3]": "bit_3_msb",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_359357227471086593",
      "address": 11,
      "title": "Stateful Lock",
      "author": "Tim Henkes",
      "description": "A little combination lock which requires three codes in the correct order to unlock",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Syndace/tt03-stateful-lock",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "reset",
        "io_in[2]": "enter",
        "io_in[3]": "code digit 0",
        "io_in[4]": "code digit 1",
        "io_in[5]": "code digit 2",
        "io_in[6]": "code digit 3",
        "io_in[7]": "code digit 4",
        "io_out[0]": "lock status",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_359360834113498113",
      "address": 12,
      "title": "Ascon's 5-bit S-box",
      "author": "Fabio Campos",
      "description": "Ascon's 5-bit S-box",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/sopmacF/tt03-ascon-sbox",
      "commit": "",
      "pinout": {
        "io_in[0]": "x0",
        "io_in[1]": "x1",
        "io_in[2]": "x2",
        "io_in[3]": "x3",
        "io_in[4]": "x4",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "x0",
        "io_out[1]": "x1",
        "io_out[2]": "x2",
        "io_out[3]": "x3",
        "io_out[4]": "x4",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_359372419264319489",
      "address": 14,
      "title": "Sbox SKINNY 8 Bit",
      "author": "Thorsten Knoll",
      "description": "A circuit for the substitution of 8 bits. Made for the SKINNY cipher algorithm.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tt03_sbox_8bit_skinny",
      "commit": "",
      "pinout": {
        "io_in[0]": "in_0",
        "io_in[1]": "in_1",
        "io_in[2]": "in_2",
        "io_in[3]": "in_3",
        "io_in[4]": "in_4",
        "io_in[5]": "in_5",
        "io_in[6]": "in_6",
        "io_in[7]": "in_7",
        "io_out[0]": "out_0",
        "io_out[1]": "out_1",
        "io_out[2]": "out_2",
        "io_out[3]": "out_3",
        "io_out[4]": "out_4",
        "io_out[5]": "out_5",
        "io_out[6]": "out_6",
        "io_out[7]": "out_7"
      }
    },
    {
      "macro": "user_module_359387860730498049",
      "address": 15,
      "title": "BinaryDoorLock",
      "author": "Marcus Michaely",
      "description": "Input is 8-Bit and only one combination opens the door",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/marcusmichaely/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "Bit_0",
        "io_in[1]": "Bit_1",
        "io_in[2]": "Bit_2",
        "io_in[3]": "Bit_3",
        "io_in[4]": "Bit_4",
        "io_in[5]": "Bit_5",
        "io_in[6]": "Bit_6",
        "io_in[7]": "Bit_7",
        "io_out[0]": "Output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_360014965627378689",
      "address": 20,
      "title": "CTF - Catch the fish",
      "author": "Carin Schreiner",
      "description": "Catch the fish is a whac-a-mole game.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SchreinerCarin/tt03-ctf",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "button 1",
        "io_in[2]": "button 2",
        "io_in[3]": "button 3",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "feedback 1",
        "io_out[1]": "feedback 2",
        "io_out[2]": "feedback 3",
        "io_out[3]": "reward feedback",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_360295047631610881",
      "address": 38,
      "title": "Shift Register Ram",
      "author": "Dakotath",
      "description": "The device holds bits in shift registers to remember crap",
      "clock_hz": 5000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dakotath/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "Clock Data",
        "io_in[1]": "Data Input",
        "io_in[2]": "Clock Address",
        "io_in[3]": "Address Input",
        "io_in[4]": "Output Enable",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "D0",
        "io_out[1]": "D1",
        "io_out[2]": "D2",
        "io_out[3]": "D3",
        "io_out[4]": "D4",
        "io_out[5]": "D5",
        "io_out[6]": "D6",
        "io_out[7]": "D7"
      }
    },
    {
      "macro": "user_module_360745091952588801",
      "address": 32,
      "title": "4-bit ALU",
      "author": "ReJ aka Renaldas Zioma",
      "description": "Digital design for a 4-bit ALU supporting 8 different operations and built-in 4-bit accumulator register",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt03-alu-4bit",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "opcode 0th bit",
        "io_in[2]": "opcode 1st bit",
        "io_in[3]": "opcode 2nd bit",
        "io_in[4]": "operand 0th bit",
        "io_in[5]": "operand 1st bit",
        "io_in[6]": "operand 2nd bit",
        "io_in[7]": "operand 3rd bit",
        "io_out[0]": "accumulator value 0th bit",
        "io_out[1]": "accumulator value 1st bit",
        "io_out[2]": "accumulator value 2nd bit",
        "io_out[3]": "accumulator value 3rd bit",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "carry flag"
      }
    },
    {
      "macro": "user_module_361684719151591425",
      "address": 36,
      "title": "Binary to DEC and HEX",
      "author": "Norberto Hernandez-Como",
      "description": "Converts a 4 digit binary number to decimal or to hexadecimal using a 7-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jedicomo22/Norberto_IPN_V1",
      "commit": "",
      "pinout": {
        "io_in[0]": "B0",
        "io_in[1]": "B1",
        "io_in[2]": "B2",
        "io_in[3]": "B3",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "Dec",
        "io_in[7]": "Hex",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_361728533238569985",
      "address": 0,
      "title": "Test Inverter Project",
      "author": "Matt Venn",
      "description": "Inverts every line. This project is also used to fill any empty design spaces.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt03-test-invert",
      "commit": "",
      "pinout": {
        "io_in[0]": "a",
        "io_in[1]": "b",
        "io_in[2]": "c",
        "io_in[3]": "d",
        "io_in[4]": "e",
        "io_in[5]": "f",
        "io_in[6]": "g",
        "io_in[7]": "dot",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_361728681519813633",
      "address": 70,
      "title": "7 Segment Random Walk",
      "author": "Richard Miller",
      "description": "Random walk around the 7 segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/millerresearch/tt03",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "enable flashing dot",
        "io_in[4]": "clock divisor bit 3 (MSB)",
        "io_in[5]": "clock divisor bit 2",
        "io_in[6]": "clock divisor bit 1",
        "io_in[7]": "clock divisor bit 0 (LSB)",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362208154278843393",
      "address": 74,
      "title": "Frequency Divider",
      "author": "Tanish Khanchandani",
      "description": "Can enter a binary number and the clock is divided by 2^(number entered)",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tanishnk/tt03-submission-Frequency-Divider",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Binary Input 1",
        "io_in[2]": "Binary Input 2",
        "io_in[3]": "Binary Input 3",
        "io_in[4]": "Binary Input 4",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "clock",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "Divided Frequency"
      }
    },
    {
      "macro": "user_module_362249236392794113",
      "address": 78,
      "title": "3BitParallelAdder",
      "author": "Anish Paul , Pancham Mittal , Ramandeep ",
      "description": " This project is used to Add and Subtract 3-bit binary inputs ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Anishpaul04/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "IN1 - A0",
        "io_in[3]": "IN2 - A1",
        "io_in[4]": "IN3 - A2",
        "io_in[5]": "IN4 - B0",
        "io_in[6]": "IN5 - B1",
        "io_in[7]": "IN6 - B2",
        "io_out[0]": "segment a - S0",
        "io_out[1]": "segment b - S1",
        "io_out[2]": "segment c - S2",
        "io_out[3]": "segment d - Cout",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362336485347742721",
      "address": 79,
      "title": "Asynchronous 3-Bit Down Counter",
      "author": "Dikshant, Mohit, Sanidhya",
      "description": "This Project works as a down counter which counts from 7 to 0",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DIKSH4NT0615/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "I0 - Input",
        "io_in[3]": "I1 - None",
        "io_in[4]": "I2 - None",
        "io_in[5]": "I3 - None",
        "io_in[6]": "I4 - None",
        "io_in[7]": "",
        "io_out[0]": "segment a - OUT0",
        "io_out[1]": "segment b - OUT1",
        "io_out[2]": "segment c - OUT2",
        "io_out[3]": "segment d - OUT3",
        "io_out[4]": "segment e - OUT4",
        "io_out[5]": "segment f - OUT5",
        "io_out[6]": "segment g - OUT6",
        "io_out[7]": "dot - None"
      }
    },
    {
      "macro": "user_module_362371515213982721",
      "address": 76,
      "title": "BCDtoDECIMAL",
      "author": "Giresh and Aditya ",
      "description": "The objective of this project is to create a circuit that can convert Binary Coded Decimal (BCD) numbers to their decimal equivalents. This will enable users to easily convert BCD numbers, which are commonly used in electronic devices, into the decimal format that is more commonly understood.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MIKEPENCE10CENT/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362379207695863809",
      "address": 81,
      "title": "3 bit multiplier ",
      "author": "Ananya",
      "description": "3 bit multiplier",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Ananya3511/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362441918332875777",
      "address": 83,
      "title": "2's Compliment Subtractor",
      "author": "Naman Garg and Aryan Chaudhary",
      "description": "Subtracts two 4-bit binary numbers using 2's complement subtraction method",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/namangarg0701/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "A0",
        "io_in[1]": "A1",
        "io_in[2]": "A2",
        "io_in[3]": "A3",
        "io_in[4]": "B0",
        "io_in[5]": "B1",
        "io_in[6]": "B2",
        "io_in[7]": "B3",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362592986761938945",
      "address": 75,
      "title": "FullAdderusing4is1",
      "author": "Marushika Suri  , Siya Sharma  , Rudakshi  Arora ",
      "description": "This project is used to add 3-bit binary numbers",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/marsuri77/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "in1(Connected to A input)",
        "io_in[1]": "in2(Connected to Select line S1)",
        "io_in[2]": "in3(Connected to Select line S2)",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a(Connected to OUT0 performing the Sum function)",
        "io_out[1]": "segment b(Connected to OUT1 performing the Carry function)",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362633503928580097",
      "address": 88,
      "title": "Hola",
      "author": "Pascual Bravo",
      "description": "Chip de prueba",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SergioRuiz181/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "A0",
        "io_in[1]": "A1",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362675777226104833",
      "address": 61,
      "title": "MMM Finite State Machine (4 States)",
      "author": "Alexandra Zhang Jiang",
      "description": "Finite State Machine for the Magnetic Microsystems and Microrobotics Research Lab at UCI",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Ale-ZJ/tt03-mmm-fsm",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "Sensor Left Input",
        "io_in[7]": "Sensor Right Input",
        "io_out[0]": "Enable Right Motor",
        "io_out[1]": "Enable Left Motor",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362788954641333249",
      "address": 101,
      "title": "Water-Level-Indicator-With-Auto-Motor-Control",
      "author": "Ashutosh Kumar",
      "description": "As water level of tank decreases/increases LED glow according to it.when water level touches the last then motor start and run until full the tank.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kashi1729/tt03-submission-Water-Level-Indicator-With-Auto-Motor-controller",
      "commit": "",
      "pinout": {
        "io_in[0]": "c",
        "io_in[1]": "l",
        "io_in[2]": "o",
        "io_in[3]": "c",
        "io_in[4]": "k",
        "io_in[5]": " ",
        "io_in[6]": "i",
        "io_in[7]": "n",
        "io_out[0]": "segment a -- Red Led (Full)",
        "io_out[1]": "segment b -- Yellow1 (Half1)",
        "io_out[2]": "segment c -- Yellow2 ( Half2)",
        "io_out[3]": "segment d -- RED (Empty)",
        "io_out[4]": "segment e -- RED (motor)",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362833471952037889",
      "address": 89,
      "title": "5_1MUX",
      "author": "saurabh kumar and diksha bothra ",
      "description": "it's 5 is to 1 mux which trigger only  one input and gives  output according to the select lines ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Secretiv/tt03-submission-template",
      "commit": "",
      "pinout": {
        "io_in[0]": "Clock - S3",
        "io_in[1]": "I1",
        "io_in[2]": "I2",
        "io_in[3]": "I3",
        "io_in[4]": "I4",
        "io_in[5]": "I5",
        "io_in[6]": "S1",
        "io_in[7]": "S2",
        "io_out[0]": "segment a - OUT0",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_362867354023533569",
      "address": 82,
      "title": "Tiny Teeth Toothbrush Timer",
      "author": "Noah Hoffman",
      "description": "Simple 2 minute timer that gives visual feedback on the seven-segment display for each 30-second increment that passes. This indicates when to move to the next quarter of the mouth. Each 30 second increment can be blocked by an input switch so the user has to acknowledge they are done with that section before moving forward. At the end of 2 minutes, all segments of the display will flash",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/13arn/tt03-toothbrush-timer",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset clock",
        "io_in[2]": "reset first increment",
        "io_in[3]": "enable fourth increment",
        "io_in[4]": "enable third increment",
        "io_in[5]": "enable second increment",
        "io_in[6]": "enable first increment",
        "io_in[7]": "pause",
        "io_out[0]": "segment a- complete",
        "io_out[1]": "segment b- first increment done",
        "io_out[2]": "segment c- third increment done",
        "io_out[3]": "segment d- complete",
        "io_out[4]": "segment e- fourth increment done",
        "io_out[5]": "segment f- second increment done",
        "io_out[6]": "segment g- complete",
        "io_out[7]": "dot- clock (3.27 seconds)"
      }
    },
    {
      "macro": "user_module_362886316051042305",
      "address": 90,
      "title": "3-bit 4-position register",
      "author": "Chris Burton",
      "description": "3-bit 4-position register using Multiplexers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/burtyb/tt03-3x4-Register",
      "commit": "",
      "pinout": {
        "io_in[0]": "WriteData0",
        "io_in[1]": "WriteData1",
        "io_in[2]": "WriteData2",
        "io_in[3]": "WriteAddress0",
        "io_in[4]": "Writeaddress0",
        "io_in[5]": "WriteEnable",
        "io_in[6]": "ReadAddress0",
        "io_in[7]": "ReadAddress1",
        "io_out[0]": "OutData0",
        "io_out[1]": "Data2Address0",
        "io_out[2]": "Data2Address1",
        "io_out[3]": "OutData2",
        "io_out[4]": "Data2Address2",
        "io_out[5]": "Data2Address3",
        "io_out[6]": "OutData1",
        "io_out[7]": "NotWriteEnable"
      }
    },
    {
      "macro": "user_module_362911430638568449",
      "address": 23,
      "title": "Desperate Tapeout",
      "author": "Etienne de Maricourt",
      "description": "Customized UART string transmitter",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/etiennedm/tt03-submission",
      "commit": "",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "Load TX data",
        "io_in[7]": "Output enable",
        "io_out[0]": "Load TX data",
        "io_out[1]": "Output enable",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "TX"
      }
    },
    {
      "macro": "user_module_nickoe",
      "address": 148,
      "title": "LEDChaser from LiteX test",
      "author": "Nick \u00d8stergaard",
      "description": "This is just a small demo of synthezing verilog from LiteX, this does not include any CPU.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nickoe/tinytapeout02-verilog-gds-test",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "pwm_width 0",
        "io_in[3]": "pwm_width 1",
        "io_in[4]": "pwm_width 2",
        "io_in[5]": "pwm_width 3",
        "io_in[6]": "pwm_width 4",
        "io_in[7]": "pwm_width 5",
        "io_out[0]": "led a",
        "io_out[1]": "led b",
        "io_out[2]": "led c",
        "io_out[3]": "led d",
        "io_out[4]": "led e",
        "io_out[5]": "led f",
        "io_out[6]": "led g",
        "io_out[7]": "led h"
      }
    },
    {
      "macro": "user_module_skylersaleh",
      "address": 220,
      "title": "Hello Generator",
      "author": "Skyler Saleh",
      "description": "Flashes 'H-E-L-L-O' on the 7 segment display",
      "clock_hz": 2048,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/skylersaleh/tt02-hello",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "if debug_mode == 0: clock_divider_ratio[0] elif debug_mode == 1: character_rom_index[0]",
        "io_in[2]": "if debug_mode == 0: clock_divider_ratio[1] elif debug_mode == 1: character_rom_index[1]",
        "io_in[3]": "if debug_mode == 0: clock_divider_ratio[2] elif debug_mode == 1: character_rom_index[2]",
        "io_in[4]": "if debug_mode == 0: clock_divider_ratio[3] elif debug_mode == 1: slow_clock_output (used for flash generator)",
        "io_in[5]": "flash enable: 0 = Flash display between each output letter. 1 = Do not flash display.",
        "io_in[6]": "must be zero: 0 = Prints 'H-E-L-L-O' 1 = Implementation defined behavior",
        "io_in[7]": "debug_mode: 0 = normal operation, 1 = debug mode",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment decimal"
      }
    },
    {
      "macro": "vaishnavachath_rotary_toplevel",
      "address": 199,
      "title": "Rotary Encoder Counter",
      "author": "Vaishnav Achath",
      "description": "Count Up/Down on the 7-segment accouring to rotary encoder input",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/vaishnavachath/tt02-submission-rotary-encoder-counter",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_rotary_SW",
        "io_in[2]": "rotary_outa",
        "io_in[3]": "rotary_outb",
        "io_in[4]": "test_mode_enable",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "wokwi_tt03_simon_top",
      "address": 37,
      "title": "Simon Says",
      "author": "Uri Shaked",
      "description": "A simple memory game",
      "clock_hz": 4000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/wokwi/tt03-simon-game",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "btn1",
        "io_in[3]": "btn2",
        "io_in[4]": "btn3",
        "io_in[5]": "btn4",
        "io_in[6]": "clk1",
        "io_in[7]": "clk3",
        "io_out[0]": "led1",
        "io_out[1]": "led2",
        "io_out[2]": "led3",
        "io_out[3]": "led4",
        "io_out[4]": "speaker",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "wormy_top",
      "address": 4,
      "title": "Wormy",
      "author": "nqbit",
      "description": "MC Wormy Pants squirms like a worm and grows just as fast.",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nqbit/wormy",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "button0",
        "io_in[3]": "button1",
        "io_in[4]": "button2",
        "io_in[5]": "button3",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "A0 - Multiplexer channel A to be tied to a an array of 16 multiplexed LEDs",
        "io_out[1]": "A1",
        "io_out[2]": "A2",
        "io_out[3]": "A3",
        "io_out[4]": "B0 - Multiplexer channel B to be tied to a an array of 16 multiplexed LEDs",
        "io_out[5]": "B1",
        "io_out[6]": "B2",
        "io_out[7]": "B3"
      }
    },
    {
      "macro": "wren6991_whisk_tt2_io_wrapper",
      "address": 182,
      "title": "Whisk: 16-bit Serial RISC CPU",
      "author": "Luke Wren",
      "description": "Execute a simple 16-bit RISC-style instruction set from up to 64 kilobytes of external SPI SRAM.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Wren6991/tt02-whisk-serial-processor",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst_n",
        "io_in[2]": "mem_sdi",
        "io_in[3]": "ioport_sdi",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "mem_csn",
        "io_out[1]": "mem_sck",
        "io_out[2]": "mem_sdo",
        "io_out[3]": "ioport_sck",
        "io_out[4]": "ioport_sdo",
        "io_out[5]": "ioport_latch_i",
        "io_out[6]": "ioport_latch_o",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xor_shift32_evango",
      "address": 143,
      "title": "XorShift32",
      "author": "Ethan Mahintorabi",
      "description": "XorShift32 random number generator",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/QuantamHD/evan-submission",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "seed_bit0",
        "io_in[3]": "seed_bit1",
        "io_in[4]": "seed_bit2",
        "io_in[5]": "seed_bit3",
        "io_in[6]": "seed_bit4",
        "io_in[7]": "seed_bit5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xor_shift32_quantamhd",
      "address": 142,
      "title": "XorShift32",
      "author": "Ethan Mahintorabi",
      "description": "XorShift32 random number generator",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/QuantamHD/ethan-evan-random-numbers",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "seed_bit0",
        "io_in[3]": "seed_bit1",
        "io_in[4]": "seed_bit2",
        "io_in[5]": "seed_bit3",
        "io_in[6]": "seed_bit4",
        "io_in[7]": "seed_bit5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xyz_peppergray_Potato1_top",
      "address": 120,
      "title": "Potato-1 (Brainfuck CPU)",
      "author": "Pepper Gray (they/them)",
      "description": "Potato-1 is part of a Brainfuck CPU. It is only the control logic, i.e. you have to bring your own registers, memory controller and io logic. It is very simple, hence likely very slow: You could probably run your brainfuck code on a potato and it would be equally fast, hence the name. The project picture was generated using DALL\u00b7E.\n",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/peppergrayxyz/Potato-1",
      "commit": "",
      "pinout": {
        "io_in[0]": "Clock",
        "io_in[1]": "Reset_n",
        "io_in[2]": "IO Wait",
        "io_in[3]": "Zero Flag",
        "io_in[4]": "Instruction[0]",
        "io_in[5]": "Instruction[1]",
        "io_in[6]": "Instruction[2]",
        "io_in[7]": "Instruction[3]",
        "io_out[0]": "PC++",
        "io_out[1]": "PC--",
        "io_out[2]": "X++",
        "io_out[3]": "X--",
        "io_out[4]": "A++",
        "io_out[5]": "A--",
        "io_out[6]": "Put",
        "io_out[7]": "Get"
      }
    },
    {
      "macro": "yannickreiss_dot_op",
      "address": 21,
      "title": "Dot operation calculator",
      "author": "Yannick Rei\u00df",
      "description": "Can calculate the result for 3 bit multiplication and division.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yannickreiss/TT3_dot_op",
      "commit": "",
      "pinout": {
        "io_in[0]": "clk_dummy",
        "io_in[1]": "opcode",
        "io_in[2]": "operand1_1",
        "io_in[3]": "operand1_2",
        "io_in[4]": "operand1_3",
        "io_in[5]": "operand2_1",
        "io_in[6]": "operand2_2",
        "io_in[7]": "operand2_3",
        "io_out[0]": "product/quotient",
        "io_out[1]": "product/quotient",
        "io_out[2]": "product/quotient",
        "io_out[3]": "product/reminder",
        "io_out[4]": "product/reminder",
        "io_out[5]": "product/reminder",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "yubex_egg_timer",
      "address": 119,
      "title": "tiny egg timer",
      "author": "yubex",
      "description": "tiny egg timer is a configurable small timer",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yubex/tt02-tiny_egg_timer",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "start",
        "io_in[3]": "wait time in minutes [0]",
        "io_in[4]": "wait time in minutes [1]",
        "io_in[5]": "wait time in minutes [2]",
        "io_in[6]": "wait time in minutes [3]",
        "io_in[7]": "wait time in minutes [4]",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "yubex_tiny_logic_analyzer",
      "address": 26,
      "title": "tiny logic analyzer",
      "author": "yubex",
      "description": "The design samples one data input and shows the current state and edge events using the 7 segment display. ",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yubex/tt03-tiny-logic-analyzer",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "data input",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "yupferris_bitslam",
      "address": 130,
      "title": "bitslam",
      "author": "Jake \"ferris\" Taylor",
      "description": "bitslam is a programmable sound chip with 2 LFSR voices.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yupferris/bitslam",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "address/data selector",
        "io_in[2]": "address/data 0",
        "io_in[3]": "address/data 1",
        "io_in[4]": "address/data 2",
        "io_in[5]": "address/data 3",
        "io_in[6]": "address/data 4",
        "io_in[7]": "address/data 5",
        "io_out[0]": "digital out 0",
        "io_out[1]": "digital out 1",
        "io_out[2]": "digital out 2",
        "io_out[3]": "digital out 3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "zl_uart",
      "address": 65,
      "title": "Simple UART interface",
      "author": "Aleksandr Zlobin",
      "description": "UART interface with access to internal registers",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ZlobinAS/tt03-verilog-uart",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "rx",
        "io_in[3]": "input4",
        "io_in[4]": "input5",
        "io_in[5]": "input6",
        "io_in[6]": "input7",
        "io_in[7]": "input8",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "tx"
      }
    },
    {
      "macro": "zoechip",
      "address": 121,
      "title": "heart zoe mom dad",
      "author": "zoe nguyen.  taylor",
      "description": "outputs my name and my age (zoe 4)",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/zoent/tt02-zoe-chip",
      "commit": "",
      "pinout": {
        "io_in[0]": "Z",
        "io_in[1]": "O",
        "io_in[2]": "E",
        "io_in[3]": "F",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "zymason_tinytop",
      "address": 211,
      "title": "Multiple seven-segment digit buffer",
      "author": "Zach Mason",
      "description": "Storage and variable speed readback segment digits",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/zymason/tt02-zymason",
      "commit": "",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "RW mode",
        "io_in[3]": "sel, read_clk_en",
        "io_in[4]": "pin0, clkspd0",
        "io_in[5]": "pin1, clkspd1",
        "io_in[6]": "pin2, clkspd2",
        "io_in[7]": "pin3, clkspd3",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    }
  ]
}