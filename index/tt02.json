{
  "version": 3,
  "id": "tt02",
  "name": "Tiny Tapeout 2",
  "repo": "https://github.com/TinyTapeout/tinytapeout-02",
  "commit": "872ca6c22c57358f80a30b78544c1192787f7462",
  "projects": [
    {
      "macro": "AidanMedcalf_pid_controller",
      "address": 76,
      "title": "TinyPID",
      "author": "Aidan Medcalf",
      "description": "Tiny PID controller with SPI configuration channel, SPI ADC and DAC driver",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AidanMedcalf/tt02-pid",
      "commit": "b4a35acf44a6f5e21f3d722ce0d99c3e8c9e4db6",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "cfg_clk",
        "io_in[4]": "cfg_mosi",
        "io_in[5]": "",
        "io_in[6]": "cfg_cs",
        "io_in[7]": "pv_in_miso",
        "io_out[0]": "pv_in_clk",
        "io_out[1]": "pv_in_cs",
        "io_out[2]": "out_clk",
        "io_out[3]": "out_mosi",
        "io_out[4]": "out_cs",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "Asma_Mohsin_conv_enc_core",
      "address": 118,
      "title": "channel coding",
      "author": "Asma Mohsin",
      "description": "Convolutional coding is widely used in modern digital communication systems.We often get encoded data by using different polynomials having same constraint lengths (K).",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AsmaMohsin1507/tt02-channel-coding",
      "commit": "f9e37a5b06ec60742e53d59e68086d3fa27437b7",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "data valid",
        "io_in[3]": "data input",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "encoded data",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "adamgreig_tt02_adc_dac",
      "address": 100,
      "title": "Sigma-Delta ADC/DAC",
      "author": "Adam Greig",
      "description": "Simple ADC and DAC",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/adamgreig/tt02-adc-dac",
      "commit": "55ae3db3088fc5ab3be11037c1655954d12c5d73",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "adc_in",
        "io_in[3]": "uart_in",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "adc_out",
        "io_out[1]": "uart_out",
        "io_out[2]": "dac_out",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "adamgreig_tt02_gps_ca_prn",
      "address": 99,
      "title": "GPS C/A PRN Generator",
      "author": "Adam Greig",
      "description": "Generate the GPS C/A PRN sequences PRN1 through PRN32",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/adamgreig/tt02-gpa-ca-prn",
      "commit": "6f6fda30d99d6f7784584689308b5410fb06ea17",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "prn[0]",
        "io_in[3]": "prn[1]",
        "io_in[4]": "prn[2]",
        "io_in[5]": "prn[3]",
        "io_in[6]": "prn[4]",
        "io_in[7]": "",
        "io_out[0]": "G1",
        "io_out[1]": "G2",
        "io_out[2]": "Selected PRN",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "afoote_w5s8_tt02_top",
      "address": 125,
      "title": "w5s8: universal turing machine core",
      "author": "Andrew Foote",
      "description": "State transition logic for a 5-state, 8-symbol universal turing machine",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/andars/tt02-universal-turing-machine-w5s8",
      "commit": "2db1114ee10d8c311639a80e4bc92d59e92dbae9",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "state_in[0]",
        "io_in[2]": "state_in[1]",
        "io_in[3]": "state_in[2]",
        "io_in[4]": "sym_in[0]",
        "io_in[5]": "sym_in[1]",
        "io_in[6]": "sym_in[2]",
        "io_in[7]": "mode",
        "io_out[0]": "",
        "io_out[1]": "next_direction",
        "io_out[2]": "new_sym[0]",
        "io_out[3]": "new_sym[1]",
        "io_out[4]": "new_sym[2]",
        "io_out[5]": "new_state[0]",
        "io_out[6]": "new_state[1]",
        "io_out[7]": "new_state[2]"
      }
    },
    {
      "macro": "aidan_McCoy",
      "address": 8,
      "title": "The McCoy 8-bit Microprocessor",
      "author": "Aidan Good",
      "description": "Custom RISC-V inspired microprocessor capable of simple arithmatic, branching, and jumps through a custom ISA.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AidanGood/tt02-McCoy",
      "commit": "19880457d075dd8ab5e213410058f9628c537644",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "reset",
        "io_in[2]": "in0",
        "io_in[3]": "in1",
        "io_in[4]": "in2",
        "io_in[5]": "in3",
        "io_in[6]": "in4",
        "io_in[7]": "in5",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "out7"
      }
    },
    {
      "macro": "alu_top",
      "address": 7,
      "title": "ALU",
      "author": "Ryan Cornateanu",
      "description": "2bit ALU with a ripple carry adder that has the capability to perform 16 different calculations",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ryancor/tt02-submission-template",
      "commit": "1ea9b9e540de8ac709d2923a1e4e8a479fdd359e",
      "pinout": {
        "io_in[0]": "A1",
        "io_in[1]": "A2",
        "io_in[2]": "B1",
        "io_in[3]": "B2",
        "io_in[4]": "ALU_Sel1",
        "io_in[5]": "ALU_Sel2",
        "io_in[6]": "ALU_Sel3",
        "io_in[7]": "ALU_Sel4",
        "io_out[0]": "ALU_Out1",
        "io_out[1]": "ALU_Out2",
        "io_out[2]": "ALU_Out3",
        "io_out[3]": "ALU_Out4",
        "io_out[4]": "ALU_Out5",
        "io_out[5]": "ALU_Out6",
        "io_out[6]": "ALU_Out7",
        "io_out[7]": "CarryOut"
      }
    },
    {
      "macro": "aramsey118_freq_counter",
      "address": 88,
      "title": "Frequency Counter",
      "author": "Andrew Ramsey",
      "description": "Estimates the frequency of an input signal",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ARamsey118/tiny_tapeout_freq_counter",
      "commit": "973b579b48c26b5593546ea992ecc0256ee27fc0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "signal",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "signal"
      }
    },
    {
      "macro": "asic_multiplier_wrapper",
      "address": 23,
      "title": "4-bit Multiplier",
      "author": "Fernando Dominguez Pousa",
      "description": "4-bit Multiplier based on single bit full adders",
      "clock_hz": 2500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kuriousd/tt02-4bit-multiplier",
      "commit": "84b632753c3b0614a7abc07a91afd3138de241da",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "i_factor_a[0]",
        "io_in[3]": "i_factor_a[1]",
        "io_in[4]": "i_factor_a[2]",
        "io_in[5]": "i_factor_b[3]",
        "io_in[6]": "i_factor_b[4]",
        "io_in[7]": "i_factor_b[5]",
        "io_out[0]": "segment_1 (o_segments[0])",
        "io_out[1]": "segment_2 (o_segments[1])",
        "io_out[2]": "segment_3 (o_segments[2])",
        "io_out[3]": "segment_4 (o_segments[3])",
        "io_out[4]": "segment_5 (o_segments[4])",
        "io_out[5]": "segment_6 (o_segments[5])",
        "io_out[6]": "segment_7 (o_segments[6])",
        "io_out[7]": "segment_dot (o_lsb_digit)"
      }
    },
    {
      "macro": "asinghani_beepboop",
      "address": 151,
      "title": "Beep Boop Traffic Light Controller",
      "author": "Anish Singhani",
      "description": "Sequencer for a traffic light with a walk button, with timings tuned to match the iconic 'beep boop' streetlight formerly installed in front of Carnegie Mellon University",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/asinghani/tt02-beepboop",
      "commit": "c00a715c7037b2f7c012a7f8de7fc8bdae7b0873",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "walk button",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "red",
        "io_out[1]": "yellow",
        "io_out[2]": "green",
        "io_out[3]": "walk",
        "io_out[4]": "no walk",
        "io_out[5]": "noisemaker",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "azdle_binary_clock",
      "address": 9,
      "title": "binary clock",
      "author": "Azdle",
      "description": "A binary clock using multiplexed LEDs",
      "clock_hz": 200,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/azdle/binary-clock-asic",
      "commit": "559f0a1daf2183fe4da810f815f3cd5df0dd0e9c",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "pps",
        "io_in[3]": "hours_b1",
        "io_in[4]": "hours_b2",
        "io_in[5]": "hours_b4",
        "io_in[6]": "hours_b8",
        "io_in[7]": "hours_b16",
        "io_out[0]": "col 0",
        "io_out[1]": "col 1",
        "io_out[2]": "col 2",
        "io_out[3]": "col 3",
        "io_out[4]": "row 0",
        "io_out[5]": "row 2",
        "io_out[6]": "row 3",
        "io_out[7]": ""
      }
    },
    {
      "macro": "browndeer_rv8u",
      "address": 107,
      "title": "RV8U - 8-bit RISC-V Microcore Processor",
      "author": "David Richie",
      "description": "8-bit processor based on RISC-V ISA",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/browndeer/rv8u",
      "commit": "37b4962c842b3dadb64ddf07ebc6a4a899f66fe0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "serdes input bit 0",
        "io_in[3]": "serdes input bit 1",
        "io_in[4]": "serdes input bit 2",
        "io_in[5]": "serdes input bit 3",
        "io_in[6]": "serdes input bit 4",
        "io_in[7]": "serdes input bit 5",
        "io_out[0]": "serdes output bit 0",
        "io_out[1]": "serdes output bit 1",
        "io_out[2]": "serdes output bit 2",
        "io_out[3]": "serdes output bit 3",
        "io_out[4]": "serdes output bit 4",
        "io_out[5]": "serdes output bit 5",
        "io_out[6]": "serdes output bit 6",
        "io_out[7]": "serdes output bit 7"
      }
    },
    {
      "macro": "c_tt2_mrcs_test",
      "address": 165,
      "title": "MRCS Verilog test",
      "author": "Steven Bos",
      "description": "Testing various auto-generated verilog for various sync and async logic gates",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt02-mrcs-verilog-test",
      "commit": "d3bbf62c45ea3321629e7f9eedd12ceedbae11f0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "cchan_fp8_multiplier",
      "address": 60,
      "title": "8-bit (E4M3) Floating Point Multiplier",
      "author": "Clive Chan",
      "description": "8-bit (E4M3) Floating Point Multiplier",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cchan/fp8_mul",
      "commit": "0648d5f5e9137a889d79161fafb4f3bc18793b6e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "ctrl0",
        "io_in[2]": "ctrl1",
        "io_in[3]": "ctrl2",
        "io_in[4]": "data0",
        "io_in[5]": "data1",
        "io_in[6]": "data2",
        "io_in[7]": "data3",
        "io_out[0]": "sign",
        "io_out[1]": "exponent",
        "io_out[2]": "exponent",
        "io_out[3]": "exponent",
        "io_out[4]": "exponent",
        "io_out[5]": "mantissa",
        "io_out[6]": "mantissa",
        "io_out[7]": "mantissa"
      }
    },
    {
      "macro": "chase_the_beat",
      "address": 20,
      "title": "chase the beat",
      "author": "Emil J Tywoniak",
      "description": "Tap twice to the beat, the outputs will chase the beat. Or generate some audio noise!",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ekliptik/tt02-chase-the-beat",
      "commit": "0458f440986569a5723042b329e49d1a201a915b",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "tap",
        "io_in[3]": "mode",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "o_0 - LED or noise output",
        "io_out[1]": "o_1 - LED",
        "io_out[2]": "o_2 - LED",
        "io_out[3]": "o_3 - LED",
        "io_out[4]": "o_4 - LED",
        "io_out[5]": "o_5 - LED",
        "io_out[6]": "o_6 - LED",
        "io_out[7]": "o_7 - LED"
      }
    },
    {
      "macro": "chrisruk_matrix",
      "address": 3,
      "title": "Scrolling Binary Matrix display",
      "author": "Chris",
      "description": "Display scrolling binary data from input pin on 8x8 SK9822 LED matrix display",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/chrisruk/matrixchip",
      "commit": "f46ee2e4f8346eeca28c71dfd513d2439c59e45a",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "digit",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "LED Clock",
        "io_out[1]": "LED Data",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "cpldcpu_MCPU5plus",
      "address": 78,
      "title": "Zinnia+ (MCPU5+) 8 Bit CPU",
      "author": "cpldcpu",
      "description": "A minimal 8 bit CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cpldcpu/tt02-mcpu5plus",
      "commit": "62c54302793dc2ea82a36c57db630ae24e0cc270",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "inst_in[0]",
        "io_in[3]": "inst_in[1]",
        "io_in[4]": "inst_in[2]",
        "io_in[5]": "inst_in[3]",
        "io_in[6]": "inst_in[4]",
        "io_in[7]": "inst_in[5]",
        "io_out[0]": "cpu_out[0]",
        "io_out[1]": "cpu_out[1]",
        "io_out[2]": "cpu_out[2]",
        "io_out[3]": "cpu_out[3]",
        "io_out[4]": "cpu_out[4]",
        "io_out[5]": "cpu_out[5]",
        "io_out[6]": "cpu_out[6]",
        "io_out[7]": "cpu_out[7]"
      }
    },
    {
      "macro": "cpldcpu_TrainLED2top",
      "address": 77,
      "title": "TrainLED2 - RGB-LED driver with 8 bit PWM engine",
      "author": "cpldcpu",
      "description": "A RGB-LED driver using the WS2812 protocol",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cpldcpu/tt02-TrainLED",
      "commit": "444d5b0d1abdf1261a15d89c0cd72f9ea7f4e1c8",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "Din Driver A",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "Dout Driver A",
        "io_out[1]": "LED1A",
        "io_out[2]": "LED2A",
        "io_out[3]": "LED3A",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "davidsiaw_stackcalc",
      "address": 80,
      "title": "Stack Calculator",
      "author": "David Siaw",
      "description": "A stack based 4-bit calculator featuring a 4-bit wide 8 entry deep stack and 64 bits of random access memory.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/davidsiaw/tt02-davidsiaw-stackcalc",
      "commit": "0c9516ce4df54b7b6494791c27edadaf65da896d",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "input0",
        "io_in[3]": "input1",
        "io_in[4]": "input2",
        "io_in[5]": "input3",
        "io_in[6]": "mode0",
        "io_in[7]": "mode1",
        "io_out[0]": "output0",
        "io_out[1]": "output1",
        "io_out[2]": "output2",
        "io_out[3]": "output3",
        "io_out[4]": "output4",
        "io_out[5]": "output5",
        "io_out[6]": "output6",
        "io_out[7]": "output7"
      }
    },
    {
      "macro": "ericsmi_speed_test",
      "address": 75,
      "title": "Ring OSC Speed Test",
      "author": "Eric Smith",
      "description": "Make two rings with the same number of stages but measure how their frequency differs.  Measure if they can influence eachother.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ericsmi/tt02-verilog-ring-osc-demo",
      "commit": "0ae81c9980c0231e4486f5cd8e83a88697e1ee82",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "nreset",
        "io_in[2]": "trig",
        "io_in[3]": "sel[0]",
        "io_in[4]": "sel[1]",
        "io_in[5]": "sel[2]",
        "io_in[6]": "ring_en[0]",
        "io_in[7]": "ring_en[1]",
        "io_out[0]": "out[0]",
        "io_out[1]": "out[1]",
        "io_out[2]": "out[2]",
        "io_out[3]": "out[3]",
        "io_out[4]": "out[4]",
        "io_out[5]": "out[5]",
        "io_out[6]": "out[6]",
        "io_out[7]": "out[7]"
      }
    },
    {
      "macro": "femto_top",
      "address": 143,
      "title": "Femto 4-bit CPU",
      "author": "Majdi Abdul Samad",
      "description": "Design of a small single-cycle CPU with simple RISC/Accumulator ISA",
      "clock_hz": 5,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/majdiabdulsamad/tt02-Femto",
      "commit": "78a35d7435b7ec82aff22c81200d424a0837af4d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "opcode[0]",
        "io_in[2]": "opcode[1]",
        "io_in[3]": "opcode[2]",
        "io_in[4]": "reg_dest[0]",
        "io_in[5]": "reg_dest[1]",
        "io_in[6]": "reg_src[0]",
        "io_in[7]": "reg_src[1]",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "flygoat_tt02_play_tune",
      "address": 54,
      "title": "Multiple Tunes on A Piezo Speaker",
      "author": "Jiaxun Yang",
      "description": "Plays multiple Tunes over a Piezo Speaker connected across io_out[1:0]",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/FlyGoat/tt02-play-tune-flygoat",
      "commit": "7a6d72e5f401e2875f0614360dd5b935f356801f",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "tune_sel0",
        "io_in[3]": "tune_sel1",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "ledout_0",
        "io_out[3]": "ledout_1",
        "io_out[4]": "ledout_2",
        "io_out[5]": "ledout_3",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "fraserbc_simon",
      "address": 1,
      "title": "SIMON Cipher",
      "author": "Fraser Price",
      "description": "Simon32/64 Encryption",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Fraserbc/tt02-simon",
      "commit": "b1c990817604b55ee1bf8220caf15d20c1bec6d3",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "shift",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "data_out[0]",
        "io_out[1]": "data_out[1]",
        "io_out[2]": "data_out[2]",
        "io_out[3]": "data_out[3]",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "frog",
      "address": 114,
      "title": "FROG 4-Bit CPU",
      "author": "ChrisPVille",
      "description": "The FROG is an extremely minimal load-store 4-bit CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ChrisPVille/tt02-FROG4bitCPU",
      "commit": "6a61c4395d3ade5bfa79949e58f1adcea52d6c46",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_p",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "",
        "io_in[7]": "fast - zero wait state memory mode",
        "io_out[0]": "addr[0]",
        "io_out[1]": "addr[1]",
        "io_out[2]": "addr[2]",
        "io_out[3]": "addr[3]",
        "io_out[4]": "addr[4]",
        "io_out[5]": "addr[5]",
        "io_out[6]": "addr[6]",
        "io_out[7]": "write memory cycle"
      }
    },
    {
      "macro": "gatecat_fpga_top",
      "address": 90,
      "title": "FPGA test",
      "author": "myrtle",
      "description": "small mux2 fpga test",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-fpga-respin",
      "commit": "88a66f97b56637a5b6f1260b7a8259ab1be579d6",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "cfg_frameinc",
        "io_in[2]": "cfg_framestrb",
        "io_in[3]": "cfg_mode",
        "io_in[4]": "cfg_sel0_in0",
        "io_in[5]": "cfg_sel0_in1",
        "io_in[6]": "cfg_sel0_in2",
        "io_in[7]": "cfg_sel0_in3",
        "io_out[0]": "out 0",
        "io_out[1]": "out 1",
        "io_out[2]": "out 2",
        "io_out[3]": "out 3",
        "io_out[4]": "out 4",
        "io_out[5]": "out 5",
        "io_out[6]": "out 6",
        "io_out[7]": "out 7"
      }
    },
    {
      "macro": "github_com_proppy_tt02_xls_counter",
      "address": 51,
      "title": "XLS: 8-bit counter",
      "author": "proppy",
      "description": "Increment output bits",
      "clock_hz": 10,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/proppy/tt02-xls-counter",
      "commit": "6af1f6d2f3739b95f99829a634e69b075c848835",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "count0",
        "io_out[1]": "count1",
        "io_out[2]": "count2",
        "io_out[3]": "count3",
        "io_out[4]": "count4",
        "io_out[5]": "count5",
        "io_out[6]": "count6",
        "io_out[7]": "count7"
      }
    },
    {
      "macro": "github_com_proppy_tt02_xls_popcount",
      "address": 42,
      "title": "XLS: bit population count",
      "author": "proppy",
      "description": "Count bits set in the input.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/proppy/tt02-xls-popcount",
      "commit": "962ea59c7fb753b57a24dc3d4484a1bb55be588d",
      "pinout": {
        "io_in[0]": "bit0",
        "io_in[1]": "bit1",
        "io_in[2]": "bit2",
        "io_in[3]": "bit3",
        "io_in[4]": "bit4",
        "io_in[5]": "bit5",
        "io_in[6]": "bit6",
        "io_in[7]": "bit7",
        "io_out[0]": "count0",
        "io_out[1]": "count1",
        "io_out[2]": "count2",
        "io_out[3]": "count3",
        "io_out[4]": "count4",
        "io_out[5]": "count5",
        "io_out[6]": "count6",
        "io_out[7]": "count7"
      }
    },
    {
      "macro": "gregdavill_clock_top",
      "address": 127,
      "title": "Seven Segment Clock",
      "author": "Greg Davill",
      "description": "Logic to drive 6 external 74hct595's that in turn drive 7 segment displays. The displays form a digital clock.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gregdavill/tt02-clock",
      "commit": "50392addd4fdf3e90a242e9ef247a4d0b68aa272",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "minute_up",
        "io_in[3]": "hour_up",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "sclk",
        "io_out[1]": "latch",
        "io_out[2]": "data",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "gregdavill_serv_top",
      "address": 128,
      "title": "serv - Serial RISCV CPU",
      "author": "Greg Davill",
      "description": "An award winning RISCV CPU!",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gregdavill/tt02-serv",
      "commit": "13510890c9a79e299698c23b0a4498edb8369fec",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "hex_sr",
      "address": 74,
      "title": "hex shift register",
      "author": "Eric Smith",
      "description": "six 40-bit shift registers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/brouhaha/tt02-hex-sr",
      "commit": "c1934501b381b64990360c84c826605f5b8341ae",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "recirc",
        "io_in[2]": "data_in[0]",
        "io_in[3]": "data_in[1]",
        "io_in[4]": "data_in[2]",
        "io_in[5]": "data_in[3]",
        "io_in[6]": "data_in[4]",
        "io_in[7]": "data_in[5]",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "data_out[0]",
        "io_out[3]": "data_out[1]",
        "io_out[4]": "data_out[2]",
        "io_out[5]": "data_out[3]",
        "io_out[6]": "data_out[4]",
        "io_out[7]": "data_out[5]"
      }
    },
    {
      "macro": "jar_pi",
      "address": 36,
      "title": "Pi (\u03c0) to 1000+ decimal places",
      "author": "James Ross",
      "description": "This circuit outputs the first 1024 decimal digits of Pi (\u03c0), including the decimal after the three. The repository started out as something else, but after completing the 16x8 SRAM circiut (128 bits), I became curious about just how much information could be packed into the circuit area.  The D flip flops in SRAM aren't particularly dense and the circuit has other functionality beyond information storage.  For this demonstration, I needed something without a logical pattern, something familiar, and something which would exercise all the LEDs in the seven segment display.  The Pi constant was perfect.  After a number of experiments in Verilog, trying the Espresso Heuristic Logic Minimizer tool, the best results ended up being a large boring block of case statements and letting the toolchain figure it out. The information limit I found was 1023*log2(10)+1 ~= 3,400 bits, after which the toolchain struggled.  However, it appears in this case that the layout is limited by metal, not combinatorial logic.  I am interested to hear about better strategies to do something like this with synthesizable Verilog.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jar/tt02_freespeech",
      "commit": "a3b363e9fc6ae36dd485b7fec6067099a6e7b03a",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal LED"
      }
    },
    {
      "macro": "jar_sram_top",
      "address": 11,
      "title": "16x8 SRAM & Streaming Signal Generator",
      "author": "James Ross",
      "description": "Write to, Read from, and Stream 16 addressable 8-bit words of memory",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jar/tt02_sram",
      "commit": "4c4dc7560efc6d40e6ea0d3a8cd03ac3ae96c8e5",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "we",
        "io_in[2]": "oe",
        "io_in[3]": "commit",
        "io_in[4]": "addr[0]/high[0]/low[0]",
        "io_in[5]": "addr[1]/high[1]/low[1]",
        "io_in[6]": "addr[2]/high[2]/low[2]",
        "io_in[7]": "addr[3]/high[3]/low[3]",
        "io_out[0]": "data[0]",
        "io_out[1]": "data[1]",
        "io_out[2]": "data[2]",
        "io_out[3]": "data[3]",
        "io_out[4]": "data[4]",
        "io_out[5]": "data[5]",
        "io_out[6]": "data[6]",
        "io_out[7]": "data[7]"
      }
    },
    {
      "macro": "jglim_7seg",
      "address": 101,
      "title": "BCD to Hex 7-Segment Decoder",
      "author": "JinGen Lim",
      "description": "Converts a 4-bit BCD input into a hexadecimal 7-segment display output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jglim/tt02-bcd-hex7seg-hdl",
      "commit": "e70b4d2630665937166f399c1cf2f8f86ad38ae5",
      "pinout": {
        "io_in[0]": "input 1 (BCD 1)",
        "io_in[1]": "input 2 (BCD 2)",
        "io_in[2]": "input 3 (BCD 4)",
        "io_in[3]": "input 4 (BCD 8)",
        "io_in[4]": "decimal dot (passthrough)",
        "io_in[5]": "output invert",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot"
      }
    },
    {
      "macro": "jleightcap_top",
      "address": 55,
      "title": "clash cpu",
      "author": "Jack Leightcap",
      "description": "tiny register machine written in clash",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/clash-silicon-tinytapeout.git",
      "commit": "e0615673335a379b50d8666a1bab501e766262ba",
      "pinout": {
        "io_in[0]": "instr 5",
        "io_in[1]": "instr 4",
        "io_in[2]": "instr 3",
        "io_in[3]": "instr 2",
        "io_in[4]": "instr 1",
        "io_in[5]": "instr 0",
        "io_in[6]": "rst",
        "io_in[7]": "clock",
        "io_out[0]": "jump",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "register 4",
        "io_out[4]": "register 3",
        "io_out[5]": "register 2",
        "io_out[6]": "register 1",
        "io_out[7]": "register 0"
      }
    },
    {
      "macro": "jonpaolo02_async_fifo",
      "address": 150,
      "title": "Async FIFO",
      "author": "Jon Recta",
      "description": "A very small asynchonous FIFO",
      "clock_hz": 5000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cmu-stuco-98154/f22-tt02-jrecta",
      "commit": "16016d31bdb1378d1a65df04eaa17077a2a943b5",
      "pinout": {
        "io_in[0]": "write_clock",
        "io_in[1]": "read_clock",
        "io_in[2]": "reset",
        "io_in[3]": "write_enable",
        "io_in[4]": "read_enable",
        "io_in[5]": "wdata[0]",
        "io_in[6]": "wdata[1]",
        "io_in[7]": "wdata[2]",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "fifo_full",
        "io_out[4]": "fifo_empty",
        "io_out[5]": "rdata[0]",
        "io_out[6]": "rdata[1]",
        "io_out[7]": "rdata[2]"
      }
    },
    {
      "macro": "klei22_ra",
      "address": 124,
      "title": "Rolling Average - 5 bit, 8 bank",
      "author": "Kauna Lei",
      "description": "5bit moving average",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/klei22/Rolling-Average",
      "commit": "905e1a81ca5a3fc0f72d41f7ad0bf99709c4b7d1",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "i_data_clk",
        "io_in[3]": "i_value[0]",
        "io_in[4]": "i_value[1]",
        "io_in[5]": "i_value[2]",
        "io_in[6]": "i_value[3]",
        "io_in[7]": "i_value[4]",
        "io_out[0]": "ra_out[0]",
        "io_out[1]": "ra_out[1]",
        "io_out[2]": "ra_out[2]",
        "io_out[3]": "ra_out[3]",
        "io_out[4]": "ra_out[4]",
        "io_out[5]": "0",
        "io_out[6]": "0",
        "io_out[7]": "0"
      }
    },
    {
      "macro": "krasin_3_bit_8_channel_pwm_driver",
      "address": 58,
      "title": "3-bit 8-channel PWM driver",
      "author": "Ivan Krasin",
      "description": "PWM driver with 8 channels and 8 PWM levels from 0 to 1",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/krasin/tt02-verilog-3-bit-8-channel-pwm-driver",
      "commit": "156fbcb722cbe3f22d9be9002777e713e8d6d240",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "pset",
        "io_in[2]": "addr0",
        "io_in[3]": "addr1",
        "io_in[4]": "addr2",
        "io_in[5]": "level0",
        "io_in[6]": "level1",
        "io_in[7]": "level2",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "out7"
      }
    },
    {
      "macro": "krasin_tt02_verilog_spi_7_channel_pwm_driver",
      "address": 73,
      "title": "7-channel PWM driver controlled via SPI bus",
      "author": "Ivan Krasin",
      "description": "PWM driver with 7 channels and 256 PWM levels from 0 to 1",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/krasin/tt02-verilog-spi-7-channel-pwm-driver",
      "commit": "e2ee709afa9e4c6132f3e3639b4a1c79026fabcf",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "cs",
        "io_in[3]": "sclk",
        "io_in[4]": "mosi",
        "io_in[5]": "reserved",
        "io_in[6]": "reserved",
        "io_in[7]": "reserved",
        "io_out[0]": "out0",
        "io_out[1]": "out1",
        "io_out[2]": "out2",
        "io_out[3]": "out3",
        "io_out[4]": "out4",
        "io_out[5]": "out5",
        "io_out[6]": "out6",
        "io_out[7]": "miso"
      }
    },
    {
      "macro": "logisim_demo",
      "address": 144,
      "title": "Logisim demo - LED blinker",
      "author": "Tholin",
      "description": "Example of how to use Logisim Evolution generated Verilog for TinyTapeout.",
      "clock_hz": 2,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AvalonSemiconductors/tt02-logisim-example",
      "commit": "c0491c6fc81fe264d95af9eb1a4f716c15b4bb09",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "O_0",
        "io_out[1]": "O_1",
        "io_out[2]": "O_2",
        "io_out[3]": "O_3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "loxodes_sequencer",
      "address": 4,
      "title": "Power supply sequencer",
      "author": "Jon Klein",
      "description": "Sequentially enable and disable channels with configurable delay",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/loxodes/tt02-submission-loxodes",
      "commit": "678dcb2e74f0e024846538e08c9012a8d45d2ab1",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "enable",
        "io_in[3]": "delay0",
        "io_in[4]": "delay1",
        "io_in[5]": "delay2",
        "io_in[6]": "delay3",
        "io_in[7]": "delay4",
        "io_out[0]": "channel 0",
        "io_out[1]": "channel 1",
        "io_out[2]": "channel 2",
        "io_out[3]": "channel 3",
        "io_out[4]": "channel 4",
        "io_out[5]": "channel 5",
        "io_out[6]": "channel 6",
        "io_out[7]": "channel 7"
      }
    },
    {
      "macro": "luthor2k_top_tto",
      "address": 116,
      "title": "Baudot Converter",
      "author": "Arthur Hazleden",
      "description": "This circuit will convert ASCII serial data to baudot serial data provide the reverse funtion as well",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Luthor2k/tt02-baudot",
      "commit": "da4ceaecab8c84df33ca7047cbd8500a2bd8484b",
      "pinout": {
        "io_in[0]": "ascii clock at 8x desired baudrate",
        "io_in[1]": "baudot clock at 100x desired baudrate",
        "io_in[2]": "baudot input, should be held high when line is idle but connected",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "mbikovitsky_top",
      "address": 33,
      "title": "5-bit Galois LFSR",
      "author": "Michael Bikovitsky",
      "description": "5-bit Galois LFSR with configurable taps and initial state. Outputs a value every second.",
      "clock_hz": 625,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mbikovitsky/tt02-lfsr",
      "commit": "8c82b2b12b73bff166dbc3d89cf2c1c0935e9707",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_lfsr",
        "io_in[2]": "reset_taps",
        "io_in[3]": "data_in1",
        "io_in[4]": "data_in2",
        "io_in[5]": "data_in3",
        "io_in[6]": "data_in4",
        "io_in[7]": "data_in5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment p"
      }
    },
    {
      "macro": "meriac_tt02_play_tune",
      "address": 45,
      "title": "Super Mario Tune on A Piezo Speaker",
      "author": "Milosch Meriac",
      "description": "Plays Super Mario Tune over a Piezo Speaker connected across io_out[1:0]",
      "clock_hz": 3125,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/tt02-play-tune",
      "commit": "264e2b35c9b10c3866eccaf19bcd3cc073abdb10",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "piezo_speaker_p",
        "io_out[1]": "piezo_speaker_n",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "migcorre_pwm",
      "address": 5,
      "title": "Duty Controller",
      "author": "Marcelo Pouso / Miguel Correia",
      "description": "Increase/Decrease a duty cycle of square signal.",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/migcorre/tt02-dc",
      "commit": "3fbb2ff4233bef14eb7029695a7984adfa9b309e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "increase",
        "io_in[3]": "decrease",
        "io_in[4]": "disable_debouncer",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "pwm",
        "io_out[1]": "pwm_neg",
        "io_out[2]": "increase",
        "io_out[3]": "decrease",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "mm21_LEDMatrixTop",
      "address": 26,
      "title": "RGB LED Matrix Driver",
      "author": "Matt M",
      "description": "Drives a simple animation on SparkFun's RGB LED 8x8 matrix backpack",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mm21/tinytapeout2-led-matrix",
      "commit": "727b6ac6dfe152a02f0958e56053bb8251b23156",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "SCLK",
        "io_out[1]": "MOSI",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "nCS",
        "io_out[6]": "segment g",
        "io_out[7]": "none (always high)"
      }
    },
    {
      "macro": "moonbase_cpu_4bit",
      "address": 79,
      "title": "4 bit CPU",
      "author": "Paul Campell",
      "description": "simple cpu",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MoonbaseOtago/tt-cpu",
      "commit": "b7de348c3d59c702a49b35d679ae6e0a4a75f5de",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ram_data0",
        "io_in[3]": "ram_data1",
        "io_in[4]": "ram_data2",
        "io_in[5]": "ram_data3",
        "io_in[6]": "io_data0",
        "io_in[7]": "io_data1",
        "io_out[0]": "data_out_0",
        "io_out[1]": "data_out_1",
        "io_out[2]": "data_out_2",
        "io_out[3]": "data_out_3",
        "io_out[4]": "write_data_n",
        "io_out[5]": "write_ram_n",
        "io_out[6]": "a",
        "io_out[7]": "strobe"
      }
    },
    {
      "macro": "moonbase_cpu_8bit",
      "address": 85,
      "title": "8 bit CPU",
      "author": "Paul Campell",
      "description": "8-bit version of the MoonBase 4-bit CPU",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/OneRNG/tt-cpu8",
      "commit": "a04260f291976cda65ee34a2b5ba4a5bf338d70d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ram_data0",
        "io_in[3]": "ram_data1",
        "io_in[4]": "ram_data2",
        "io_in[5]": "ram_data3",
        "io_in[6]": "io_data0",
        "io_in[7]": "io_data1",
        "io_out[0]": "data_out_0",
        "io_out[1]": "data_out_1",
        "io_out[2]": "data_out_2",
        "io_out[3]": "data_out_3",
        "io_out[4]": "write_data_n",
        "io_out[5]": "write_ram_n",
        "io_out[6]": "a",
        "io_out[7]": "strobe"
      }
    },
    {
      "macro": "moyes0_top_module",
      "address": 39,
      "title": "M0: A 16-bit SUBLEQ Microprocessor",
      "author": "William Moyes",
      "description": "A capable but slow microprocessor that fits in a very tight space",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/moyesw/TT02-M0",
      "commit": "51663bbfb9f02aa2b42e82a34143c50e15e57320",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "spi_miso",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "dbg_in",
        "io_out[0]": "spi_cs0",
        "io_out[1]": "spi_cs1",
        "io_out[2]": "spi_clk",
        "io_out[3]": "spi_mosi",
        "io_out[4]": "uart_tx",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": "dbg_out"
      }
    },
    {
      "macro": "msaghir_top_level",
      "address": 135,
      "title": "SevSegFX",
      "author": "Mazen Saghir, ECE Department, American University of Beirut (mazen@aub.edu.lb)",
      "description": "Seven segment display effect generator",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mazensaghir/tt02-sevsegfx",
      "commit": "6b7fdc2623776b76664f976e7a14ff411fa04035",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "sel0/d0",
        "io_in[3]": "sel1/d1",
        "io_in[4]": "sel2/d2",
        "io_in[5]": "sel3/d2",
        "io_in[6]": "blink",
        "io_in[7]": "fx",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "navray_top",
      "address": 71,
      "title": "Non-restoring Square Root",
      "author": "Wallace Everest",
      "description": "Square root for use in RMS calculations",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/navray/tt02-square-root",
      "commit": "0cb52eb82dc6535588f20757c5a9d9ec49824f51",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "data(0)",
        "io_in[2]": "data(1)",
        "io_in[3]": "data(2)",
        "io_in[4]": "data(3)",
        "io_in[5]": "data(4)",
        "io_in[6]": "data(5)",
        "io_in[7]": "data(6)",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "noahgaertner_cpu",
      "address": 152,
      "title": "Basic 4 bit cpu ",
      "author": "Noah Gaertner",
      "description": "4-bit CPU that does add, subtract, multiply, left and right shifts, conditional jump based on external signal, logical and bitwise AND and OR, equality and inequality checking, bitwise inversion, and logical NOT",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/noahgaertner/tt02-verilog-demo",
      "commit": "51c381359fac3bdde3ef260bada4e1842a42e000",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "instruction",
        "io_in[3]": "instruction",
        "io_in[4]": "data",
        "io_in[5]": "data",
        "io_in[6]": "data",
        "io_in[7]": "data",
        "io_out[0]": "program counter",
        "io_out[1]": "program counter",
        "io_out[2]": "program counter",
        "io_out[3]": "program counter",
        "io_out[4]": "output data",
        "io_out[5]": "output data",
        "io_out[6]": "output data",
        "io_out[7]": "output data"
      }
    },
    {
      "macro": "option22",
      "address": 139,
      "title": "Option22",
      "author": "bitluni",
      "description": "Looong shift register. 22x8 bit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option22",
      "commit": "fc49125e0aadd23379c10ea171a7fb143b915ec0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "write",
        "io_in[3]": "data",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "option23",
      "address": 138,
      "title": "Option23",
      "author": "bitluni",
      "description": "Character ROM and bitmap shifter for POV displays",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option23",
      "commit": "2c5ee6ca38234cba402fdce28fc88a7d67b177fc",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "din 0",
        "io_in[2]": "din 1",
        "io_in[3]": "din 2",
        "io_in[4]": "din 3",
        "io_in[5]": "din 4",
        "io_in[6]": "din 5",
        "io_in[7]": "din 6",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "option23ser",
      "address": 137,
      "title": "Option23 Serial",
      "author": "bitluni",
      "description": "Character ROM and bitmap shifter for POV displays",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-option23ser",
      "commit": "235f25fddc437a1cfeb2a8329fc4c75a0aebae84",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "write",
        "io_in[3]": "din",
        "io_in[4]": "under",
        "io_in[5]": "over",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "phasenoisepon_seven_segment_seconds",
      "address": 46,
      "title": "Tiny rot13",
      "author": "Phase Noise",
      "description": "implements rot13 in the constraints of TT02",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/phasenoisepon/tt02-phasenoisepon",
      "commit": "b610dd246001212cfaec293d8a250510a8ff870e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset - Resets the system to a clean state",
        "io_in[2]": "CTL0 - LSB of control",
        "io_in[3]": "CTL1 - MSB of control",
        "io_in[4]": "D0 - LSB of input nibble",
        "io_in[5]": "D1",
        "io_in[6]": "D2",
        "io_in[7]": "D3 - MSB of input nibble",
        "io_out[0]": "DO0 - LSB of output",
        "io_out[1]": "DO1",
        "io_out[2]": "DO2",
        "io_out[3]": "DO3",
        "io_out[4]": "DO4",
        "io_out[5]": "DO5",
        "io_out[6]": "DO6",
        "io_out[7]": "DO7 - MSB of output"
      }
    },
    {
      "macro": "poisonninja_top",
      "address": 147,
      "title": "PWM Generator",
      "author": "Jason Lu",
      "description": "Generates 100 Hz PWM signal",
      "clock_hz": 5000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cmu-stuco-98154/f22-tt02-jxlu",
      "commit": "045b9b0a722ec41c7cd733d968ccfb281f082219",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "duty cycle 0",
        "io_in[3]": "duty cycle 1",
        "io_in[4]": "duty cycle 2",
        "io_in[5]": "duty cycle 3",
        "io_in[6]": "duty cycle 4",
        "io_in[7]": "duty cycle 5",
        "io_out[0]": "pwm output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "prog_melody_gen",
      "address": 109,
      "title": "Melody Generator",
      "author": "myrtle",
      "description": "plays a melody, preloaded with jingle bells but re-programmable",
      "clock_hz": 25000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-melody-gen",
      "commit": "35074c2a2dd5388997bdfea10595330c205c67aa",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reload",
        "io_in[2]": "restart",
        "io_in[3]": "prog_data",
        "io_in[4]": "prog_strobe",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "melody",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "pwm_gen",
      "address": 68,
      "title": "Breathing LED",
      "author": "argunda",
      "description": "Use the pwm output to drive an LED and it should look like it's breathing.",
      "clock_hz": 4000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/argunda/tt02-breathing-led",
      "commit": "23ba3ae49a0508be5e80ff548a07ff31c6c4b503",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "breathing_pwm",
        "io_out[1]": "duty[0]",
        "io_out[2]": "duty[1]",
        "io_out[3]": "duty[2]",
        "io_out[4]": "duty[3]",
        "io_out[5]": "duty[4]",
        "io_out[6]": "duty[5]",
        "io_out[7]": "duty[6]"
      }
    },
    {
      "macro": "razhas_top_level",
      "address": 164,
      "title": "PWM Generator",
      "author": "Hassan Baydoun <hhb16@mail.aub.edu>, Razan Thebian <rat17@mail.aub.edu>: Electrical and Computer Engineering Department, American University of Beirut ",
      "description": "It is a PWM Generator with selectable duty cycle 0-10-20-..-100% with clock divider built in",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/H-Bydn/TinyTapeout2-PWMgenerator",
      "commit": "4acc404bbddccd95c378d201f5099813f754a0c7",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "duty0",
        "io_in[3]": "duty1",
        "io_in[4]": "duty2",
        "io_in[5]": "duty3",
        "io_in[6]": "freq0",
        "io_in[7]": "freq1",
        "io_out[0]": "PWM_Out",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "rc5_top",
      "address": 43,
      "title": "RC5 decoder",
      "author": "Jean THOMAS",
      "description": "Increment/decrement a counter with the press of an IR remote button!",
      "clock_hz": 562,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jeanthom/tt02-rc5-receiver",
      "commit": "03662a9ca298418dd3b70ada2bbe94ea76443472",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "IR demodulator output",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "recepsaid_euclidean_algorithm",
      "address": 133,
      "title": "Optimised Euclidean Algorithm",
      "author": "Recep Said Dulger",
      "description": "Finding gcd of 2 4-bit number",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RecepSaid/tt02-euclidean-algorithm",
      "commit": "8cb45d951cd0135534f85304ab4d1178dd94f2c2",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "number[0]",
        "io_in[2]": "number[1]",
        "io_in[3]": "number[2]",
        "io_in[4]": "number[3]",
        "io_in[5]": "",
        "io_in[6]": "rst",
        "io_in[7]": "num_okey",
        "io_out[0]": "ssd_out[0]",
        "io_out[1]": "ssd_out[1]",
        "io_out[2]": "ssd_out[2]",
        "io_out[3]": "ssd_out[3]",
        "io_out[4]": "ssd_out[4]",
        "io_out[5]": "ssd_out[5]",
        "io_out[6]": "ssd_out[6]",
        "io_out[7]": ""
      }
    },
    {
      "macro": "regymm_funnyblinky",
      "address": 98,
      "title": "Funny Blinky",
      "author": "regymm",
      "description": "Blink the 8 output LEDs in a funny way.",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/regymm/tt02-verilog-funnyblinky",
      "commit": "e6ebbf420cfaebf3cadc16c5512c0898e1146ab4",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "switch out ctrl 0",
        "io_in[5]": "switch out ctrl 1",
        "io_in[6]": "switch pause",
        "io_in[7]": "switch function",
        "io_out[0]": "led 0",
        "io_out[1]": "led 1",
        "io_out[2]": "led 2",
        "io_out[3]": "led 3",
        "io_out[4]": "led 4",
        "io_out[5]": "led 5",
        "io_out[6]": "led 6",
        "io_out[7]": "led 7"
      }
    },
    {
      "macro": "regymm_mcpi",
      "address": 97,
      "title": "Monte Carlo Pi Integrator",
      "author": "regymm",
      "description": "Calculate the value of Pi using the Monte Carlo method",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/regymm/tt02-verilog-mcpi",
      "commit": "22d68ab522e6a98603e6799faa44a2f1aca84183",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "sw control 0",
        "io_in[3]": "sw control 1",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "counter 0",
        "io_out[1]": "counter 1",
        "io_out[2]": "counter 2",
        "io_out[3]": "counter 3",
        "io_out[4]": "counter 4",
        "io_out[5]": "counter 5",
        "io_out[6]": "counter 6",
        "io_out[7]": "counter 7"
      }
    },
    {
      "macro": "rglenn_hex_to_7_seg",
      "address": 121,
      "title": "Hex to 7 Segment Decoder",
      "author": "Randy Glenn",
      "description": "Displays an input 4-bit value as a hex digit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rglenn/tt02-rglenn-hex-to-7-seg",
      "commit": "7e52edcdd0678a256f79f85ef73ff58ea01b43b1",
      "pinout": {
        "io_in[0]": "latch",
        "io_in[1]": "blank",
        "io_in[2]": "data 0",
        "io_in[3]": "data 1",
        "io_in[4]": "data 2",
        "io_in[5]": "data 3",
        "io_in[6]": "decimal",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal"
      }
    },
    {
      "macro": "rolfmobile99_alu_fsm_top",
      "address": 35,
      "title": "4-bit badge ALU",
      "author": "Rolf Widenfelt",
      "description": "A 4-bit ALU inspired by Supercon.6 badge",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rolfmobile99/tt02-submission-template",
      "commit": "8f450cae22c39a0dfae396777e6868ea566de42b",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "ctl",
        "io_in[3]": "",
        "io_in[4]": "datain3",
        "io_in[5]": "datain2",
        "io_in[6]": "datain1",
        "io_in[7]": "datain0",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "cout",
        "io_out[4]": "alu3",
        "io_out[5]": "alu2",
        "io_out[6]": "alu1",
        "io_out[7]": "alu0"
      }
    },
    {
      "macro": "rotary_encoder",
      "address": 113,
      "title": "Rotary encoder",
      "author": "Wim Dams",
      "description": "Reads in a (incremental) rotary encoder and shows the result on the seven-segment display",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/wimdams/tt02-rotary-encoder",
      "commit": "2b9a8e4ccf51264498bcf4cc22bde6e3c2aa24cd",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "Rotary encoder pin A (sometimes marked as CLK)",
        "io_in[3]": "Rotary encoder pin B (sometimes marked as DT)",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "s4ga",
      "address": 6,
      "title": "S4GA: Super Slow Serial SRAM FPGA",
      "author": "Jan Gray",
      "description": "one fracturable 5-LUT that receives FPGA LUT configuration frames, serially evaluates LUT inputs and LUT outputs",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/grayresearch/tt02-s4ga",
      "commit": "af8a71f0ac21bb6dae0ec44ad1eb7e5d23dd9cb2",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst",
        "io_in[2]": "si[0]",
        "io_in[3]": "si[1]",
        "io_in[4]": "si[2]",
        "io_in[5]": "si[3]",
        "io_in[6]": "in[0]",
        "io_in[7]": "in[1]",
        "io_out[0]": "out[0]",
        "io_out[1]": "out[1]",
        "io_out[2]": "out[2]",
        "io_out[3]": "out[3]",
        "io_out[4]": "out[4]",
        "io_out[5]": "out[5]",
        "io_out[6]": "out[6]",
        "io_out[7]": "debug"
      }
    },
    {
      "macro": "secretFile",
      "address": 145,
      "title": "Secret File",
      "author": "bitluni",
      "description": "Nothing to see here",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bitluni/tt02-SecretFile",
      "commit": "fa69e68563bfa18bae2a2aaf7b7a950420bb18d8",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "bit 0",
        "io_out[1]": "bit 1",
        "io_out[2]": "bit 2",
        "io_out[3]": "bit 3",
        "io_out[4]": "bit 4",
        "io_out[5]": "bit 5",
        "io_out[6]": "bit 6",
        "io_out[7]": "bit 7"
      }
    },
    {
      "macro": "seven_segment_seconds",
      "address": 157,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "count up to 10, one second at a time",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt02-verilog-demo",
      "commit": "79d6b011402cc9df78f08cc3df36eee67a4fb94f",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "shan1293_2bitalu",
      "address": 104,
      "title": "2bitALU",
      "author": "shan",
      "description": "2 bit ALU which performs 16 different operations",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shan1293/tt02-2bitCPU",
      "commit": "50de7fea8b8aa6693fb6626108eaac99f2f77ca5",
      "pinout": {
        "io_in[0]": "A1",
        "io_in[1]": "A2",
        "io_in[2]": "B1",
        "io_in[3]": "B2",
        "io_in[4]": "opcode",
        "io_in[5]": "opcode",
        "io_in[6]": "opcode",
        "io_in[7]": "opcode",
        "io_out[0]": "ALU_out",
        "io_out[1]": "ALU_out",
        "io_out[2]": "ALU_out",
        "io_out[3]": "ALU_out",
        "io_out[4]": "ALU_out",
        "io_out[5]": "ALU_out",
        "io_out[6]": "ALU_out",
        "io_out[7]": "ALU_out"
      }
    },
    {
      "macro": "sophialiCMU_math",
      "address": 149,
      "title": "Continious Math",
      "author": "Sophia Li",
      "description": "output is a total you can ADD, SUBTRACT, XOR, or LEFT_SHIFT with the input  ",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cmu-stuco-98154/f22-tt02-sophiali",
      "commit": "c47a3925baf6efeaa542a0ff50d29d56feef5d4c",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "enable",
        "io_in[3]": "in_val[2]",
        "io_in[4]": "in_val[1]",
        "io_in[5]": "in_val[0]",
        "io_in[6]": "arithOp[1]",
        "io_in[7]": "arithOp[0]",
        "io_out[0]": "LED[7]",
        "io_out[1]": "LED[6]",
        "io_out[2]": "LED[5]",
        "io_out[3]": "LED[4]",
        "io_out[4]": "LED[3]",
        "io_out[5]": "LED[2]",
        "io_out[6]": "LED[1]",
        "io_out[7]": "LED[0]"
      }
    },
    {
      "macro": "stevenmburns_toplevel",
      "address": 119,
      "title": "Chisel 16-bit GCD with scan in and out",
      "author": "Steve Burns",
      "description": "Simple chisel based design based on Knuth's BinaryGDC algorithm using scan chains for I/O.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/stevenmburns/tt02-scannable-gcd",
      "commit": "af26367abba89b1c0834843f6d7ac0262762426e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "ld",
        "io_in[3]": "u_bit",
        "io_in[4]": "v_bit",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "z_bit",
        "io_out[1]": "done",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "swalense_top",
      "address": 115,
      "title": "Configurable Gray Code Counter",
      "author": "Eric Swalens",
      "description": "A configurable counter driven by 2-channel Gray code",
      "clock_hz": 5000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/swalense/tt02-graycode_counter",
      "commit": "c73eb7cf45fbfdd4ba29901189cedb266ffc9ccc",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "channel A",
        "io_in[3]": "channel B",
        "io_in[4]": "update on X2",
        "io_in[5]": "SPI CS",
        "io_in[6]": "SPI SCK",
        "io_in[7]": "SPI SDI",
        "io_out[0]": "UART serial output",
        "io_out[1]": "PWM signal",
        "io_out[2]": "direction",
        "io_out[3]": "counter bit 0",
        "io_out[4]": "counter bit 1",
        "io_out[5]": "counter bit 2",
        "io_out[6]": "counter bit 3",
        "io_out[7]": "counter bit 4"
      }
    },
    {
      "macro": "thezoq2_yafpga",
      "address": 38,
      "title": "YaFPGA",
      "author": "Frans Skarman",
      "description": "Yet another FPGA",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TheZoq2/smolfpga",
      "commit": "19076d84acb5ccef707f50328ab228523b427bb5",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "input1",
        "io_in[2]": "input2",
        "io_in[3]": "input3",
        "io_in[4]": "input4",
        "io_in[5]": "config data",
        "io_in[6]": "config clock",
        "io_in[7]": "",
        "io_out[0]": "output0",
        "io_out[1]": "output1",
        "io_out[2]": "output2",
        "io_out[3]": "output3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tholin_avalonsemi_5401",
      "address": 14,
      "title": "Avalon Semiconductors '5401' 4-bit Microprocessor",
      "author": "Tholin",
      "description": "4-bit CPU capable of addressing 4096 bytes program memory and 254 words data memory, with 6 words of on-chip RAM and two general-purpose input ports. Hopefully capable of more complex computation than previous CPU submissions.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-AvalonSemi-5401",
      "commit": "98204cec8e8a4cea35c5340c030092c530b12e87",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "I0 / D0",
        "io_in[3]": "I1 / D1",
        "io_in[4]": "I2 / D2",
        "io_in[5]": "I3 / D3",
        "io_in[6]": "EF0",
        "io_in[7]": "EF1",
        "io_out[0]": "MAR0 / DR0 / DR8 / RR0",
        "io_out[1]": "MAR1 / DR1 / DR9 / RR1",
        "io_out[2]": "MAR2 / DR2 / DR10 / RR2",
        "io_out[3]": "MAR3 / DR3 / DR11 / RR3",
        "io_out[4]": "MAR4 / DR4 / F_MAR",
        "io_out[5]": "MAR5 / DR5 / F_WRITE",
        "io_out[6]": "MAR6 / DR6 / F_JMP",
        "io_out[7]": "MAR7 / DR7 / F_I"
      }
    },
    {
      "macro": "tholin_avalonsemi_tbb1143",
      "address": 24,
      "title": "Avalon Semiconductors 'TBB1143' Programmable Sound Generator",
      "author": "Tholin",
      "description": "Sound generator with two square-wave voices, one sawtooth voice and one noise channel. Can also be used as a general-purpose frequency generator.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-avalonsemi-TBB1143",
      "commit": "7cdb7fefc1959d62920f5f4c39eb28901e97694a",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "D0",
        "io_in[3]": "D1",
        "io_in[4]": "D2",
        "io_in[5]": "D3",
        "io_in[6]": "A0",
        "io_in[7]": "WRT",
        "io_out[0]": "SOUT0",
        "io_out[1]": "SOUT1",
        "io_out[2]": "T0",
        "io_out[3]": "T1",
        "io_out[4]": "T2",
        "io_out[5]": "T3",
        "io_out[6]": "LED0",
        "io_out[7]": "LED1"
      }
    },
    {
      "macro": "thunderbird_taillight_ctrl",
      "address": 89,
      "title": "Taillight controller of a 1965 Ford Thunderbird",
      "author": "Hirosh Dabui",
      "description": "Asic of a Taillight controller of a 1965 Ford Thunderbird",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/splinedrive/thunderbird_taillight_1965",
      "commit": "44230299dfca4be2bf8c0e9406299a553704dad8",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "left",
        "io_in[3]": "right",
        "io_in[4]": "hazard",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "r3",
        "io_out[1]": "r2",
        "io_out[2]": "r1",
        "io_out[3]": "l1",
        "io_out[4]": "l2",
        "io_out[5]": "l3",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tiny_fft",
      "address": 15,
      "title": "small FFT",
      "author": "Rice Shelley",
      "description": "Computes a small fft",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RiceShelley/tiny-fft",
      "commit": "5cfad3f03feabdbdced56fe6e392f53f4e396012",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "wrEn",
        "io_in[3]": "",
        "io_in[4]": "data_in_0",
        "io_in[5]": "data_in_1",
        "io_in[6]": "data_in_2",
        "io_in[7]": "data_in_3",
        "io_out[0]": "rd_idx_zero",
        "io_out[1]": "",
        "io_out[2]": "data_out_0",
        "io_out[3]": "data_out_1",
        "io_out[4]": "data_out_2",
        "io_out[5]": "data_out_3",
        "io_out[6]": "data_out_4",
        "io_out[7]": "data_out_5"
      }
    },
    {
      "macro": "tiny_kinda_pic",
      "address": 106,
      "title": "Tiny PIC-like MCU",
      "author": "myrtle",
      "description": "serially programmed, subset of PIC ISA, MCU",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gatecat/tt02-pic",
      "commit": "cd2db34c83522984e99376c223cfb04a35914cef",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "prog_strobe",
        "io_in[3]": "prog_data",
        "io_in[4]": "gpi0",
        "io_in[5]": "gpi1",
        "io_in[6]": "gpi2",
        "io_in[7]": "gpi3",
        "io_out[0]": "gpo0",
        "io_out[1]": "gpo1",
        "io_out[2]": "gpo2",
        "io_out[3]": "gpo3",
        "io_out[4]": "gpo4",
        "io_out[5]": "gpo5",
        "io_out[6]": "gpo6",
        "io_out[7]": "gpo7"
      }
    },
    {
      "macro": "tomkeddie_top_tto",
      "address": 2,
      "title": "HD74480 Clock",
      "author": "Tom Keddie",
      "description": "Displays a clock on a attached HD74480",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2022-2",
      "commit": "4b24aa6219f8af0516123c68aa328f2a8dea35ed",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "hour set",
        "io_in[7]": "minute set",
        "io_out[0]": "lcd D4",
        "io_out[1]": "lcd D5",
        "io_out[2]": "lcd D6",
        "io_out[3]": "lcd D7",
        "io_out[4]": "lcd EN",
        "io_out[5]": "lcd RS",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tomkeddie_top_tto_a",
      "address": 25,
      "title": "Transmit UART",
      "author": "Tom Keddie",
      "description": "Transmits a async serial string on a pin",
      "clock_hz": 1200,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2022-2a",
      "commit": "e5d88704ba22d56c30172b9ac1934642822dedc4",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "uart_tx_0",
        "io_out[1]": "uart_tx_1",
        "io_out[2]": "uart_tx_2",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "tt2_tholin_diceroll",
      "address": 61,
      "title": "Dice roll",
      "author": "Tholin",
      "description": "Will roll a random number from 1 - 6 on the 7-segment display, like a dice.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AvalonSemiconductors/tt2-diceroll",
      "commit": "3cda4f7b721c1331576dfa2d7b045f0468661bec",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "ROLL",
        "io_in[3]": "NC",
        "io_in[4]": "NC",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "decimal point"
      }
    },
    {
      "macro": "tt2_tholin_multiplexed_counter",
      "address": 50,
      "title": "TinyTapeout2 multiplexed segment display timer.",
      "author": "Tholin",
      "description": "Measures time up to 99 minutes and 59 seconds by multiplexing 4 seven-segment displays.",
      "clock_hz": 1024,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-multiplexed-counter",
      "commit": "7d231fb843dfc7a6f92eb66f7c305e6a938c5251",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "NC",
        "io_in[3]": "NC",
        "io_in[4]": "NC",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "A",
        "io_out[1]": "B",
        "io_out[2]": "C",
        "io_out[3]": "D",
        "io_out[4]": "E",
        "io_out[5]": "F",
        "io_out[6]": "G",
        "io_out[7]": "SEL"
      }
    },
    {
      "macro": "tt2_tholin_multiplier",
      "address": 49,
      "title": "TinyTapeout2 4-bit multiplier.",
      "author": "Tholin",
      "description": "Multiplies two 4-bit numbers presented on the input pins and outputs an 8-bit result.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-4x4-multiply",
      "commit": "f880e0d575c15ed371002809341ab179475a7bae",
      "pinout": {
        "io_in[0]": "A0",
        "io_in[1]": "A1",
        "io_in[2]": "A2",
        "io_in[3]": "A3",
        "io_in[4]": "B0",
        "io_in[5]": "B1",
        "io_in[6]": "B2",
        "io_in[7]": "B3",
        "io_out[0]": "R0",
        "io_out[1]": "R1",
        "io_out[2]": "R2",
        "io_out[3]": "R3",
        "io_out[4]": "R4",
        "io_out[5]": "R5",
        "io_out[6]": "R6",
        "io_out[7]": "R7"
      }
    },
    {
      "macro": "tt2_tholin_namebadge",
      "address": 56,
      "title": "TinyTapeout 2 LCD Nametag",
      "author": "Tholin",
      "description": "Echoes out a predefined text onto a 20x4 character LCD.",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/89Mods/tt2-lcd-namebadge",
      "commit": "535bddeffb5f25d459fb2067e8ee6018c313e94e",
      "pinout": {
        "io_in[0]": "CLK",
        "io_in[1]": "RST",
        "io_in[2]": "EF0",
        "io_in[3]": "EF1",
        "io_in[4]": "EF2",
        "io_in[5]": "NC",
        "io_in[6]": "NC",
        "io_in[7]": "NC",
        "io_out[0]": "RS",
        "io_out[1]": "E",
        "io_out[2]": "D4",
        "io_out[3]": "D5",
        "io_out[4]": "D6",
        "io_out[5]": "D7",
        "io_out[6]": "LED0",
        "io_out[7]": "LED1"
      }
    },
    {
      "macro": "tucanae47_gray_ctr6",
      "address": 155,
      "title": "Amaranth 6 Bits Gray counter",
      "author": "Camilo Soto",
      "description": "Amaranth Gray 6 Bits gray counter",
      "clock_hz": 3000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tucanae47/tt02-gray-counter",
      "commit": "0b53a7f70f7215e4d05781ee84eea397d22bff8b",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "count[0]",
        "io_out[1]": "count[1]",
        "io_out[2]": "count[2]",
        "io_out[3]": "count[3]",
        "io_out[4]": "count[4]",
        "io_out[5]": "count[5]",
        "io_out[6]": "count[6]",
        "io_out[7]": ""
      }
    },
    {
      "macro": "udxs_sqrt_top",
      "address": 67,
      "title": "SQRT1 Square Root Engine",
      "author": "Davit Margarian (UDXS)",
      "description": "Computes 4.2 fixed-point square root for any 7-bit integer",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/UDXS/sqrt-tt02",
      "commit": "96c4c3aff07f8ce8097f9f8f35ef86342b7db31c",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "i1",
        "io_in[2]": "i2",
        "io_in[3]": "i3",
        "io_in[4]": "i4",
        "io_in[5]": "i5",
        "io_in[6]": "i6",
        "io_in[7]": "i7",
        "io_out[0]": "frac1",
        "io_out[1]": "frac2",
        "io_out[2]": "whole1",
        "io_out[3]": "whole2",
        "io_out[4]": "whole3",
        "io_out[5]": "whole4",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_339688086163161683",
      "address": 159,
      "title": "M segments",
      "author": "Matt Venn",
      "description": "Setting the correct input will show a 3 on the display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt02-m-segments",
      "commit": "7d9adf5732acde6150c3002e62967a295819e177",
      "pinout": {
        "io_in[0]": "input 1",
        "io_in[1]": "input 2",
        "io_in[2]": "input 3",
        "io_in[3]": "input 4",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_340318610245288530",
      "address": 81,
      "title": "1-bit ALU",
      "author": "Leo Moser",
      "description": "1-bit ALU from the book `Structured Computer Organization: Andrew S. Tanenbaum`",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mole99/tt02-1bit-alu",
      "commit": "5c79438148b0341067c41284153400263cd28863",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "COUT"
      }
    },
    {
      "macro": "user_module_340805072482992722",
      "address": 156,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "counts from 0 to 9, incrementing once per second",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt02-test-7seg",
      "commit": "21b10564240b29cbf04b51b9c2b9958314b2c130",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341164910646919762",
      "address": 69,
      "title": "Fibonacci & Gold Code",
      "author": "Daniel Estevez",
      "description": "This project includes two independent designs: a design that calculates terms of the Fibonacci sequence and displays them in hex one character at a time on a 7-segment display, and a Gold code generator that generates the codes used by CCSDS X-band PN Delta-DOR.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/daniestevez/tt02-gold-fibonacci",
      "commit": "6135fb2bacd6b578f4725550ef0a106bff6a4e9e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "output select (high selects Gold code; low selects Fibonacci LSB marker) & Gold code load value bit 0",
        "io_in[2]": "Fibonacci reset (active-low; asynchronous) & Gold code load value bit 1",
        "io_in[3]": "Gold code load enable (active-low; asynchronous)",
        "io_in[4]": "Gold code load value bit 2",
        "io_in[5]": "Gold code load value bit 3",
        "io_in[6]": "Gold code load value bit 4",
        "io_in[7]": "Gold code load value bit 5",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341178154799333971",
      "address": 86,
      "title": "Pseudo-random number generator",
      "author": "Thomas B\u00f6hm <thomas.bohm@gmail.com>",
      "description": "Pseudo-random number generator using a 16-bit Fibonacci linear-feedback shift register",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tcptomato/tt02-submission-template",
      "commit": "b9ba3a9d5642df9d64ee8d4953f6d0c836821aad",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data_in",
        "io_in[2]": "load_en",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "random bit 0",
        "io_out[1]": "random bit 1",
        "io_out[2]": "random bit 2",
        "io_out[3]": "random bit 3",
        "io_out[4]": "random bit 4",
        "io_out[5]": "random bit 5",
        "io_out[6]": "random bit 6",
        "io_out[7]": "random bit 7"
      }
    },
    {
      "macro": "user_module_341178481588044372",
      "address": 123,
      "title": "LED Chaser",
      "author": "Bradley Boccuzzi",
      "description": "Push the button to fill in segments of the LED display, they will continue to shift and fill in the display until the button is released.`",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DaveyPocket/chaser_tt2",
      "commit": "0a94f9d9781bb8cca54844f05116065eb2f81935",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "shift register input",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341277789473735250",
      "address": 95,
      "title": "Asynchronous Binary to Ternary Converter and Comparator",
      "author": "Steven Bos",
      "description": "This chip offers various kinds of conversions and comparisons between binary encoded ternary and unary encoded ternary in both machine readible output and human readible (7-segment display decimal) output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt02-async-binary-ternary-convert-compare",
      "commit": "91efd2cea4b3d98a2b35d1dfa27d5b87657fd0b1",
      "pinout": {
        "io_in[0]": "output mode (0 = human, 1 = machine)",
        "io_in[1]": "enable (0 = disable, 1 = enable)",
        "io_in[2]": "opcode0 (see table in documentation for all 4 modes)",
        "io_in[3]": "opcode1",
        "io_in[4]": "input channel B pin0 (see table in documentation what is don't care or illegal input for which mode)",
        "io_in[5]": "input channel B pin1",
        "io_in[6]": "input channel A pin0",
        "io_in[7]": "input channel A pin1",
        "io_out[0]": "segment a (the 7 segment is used for human readable output, sometimes using decimals and sometimes using comparison symbols, see documentation for more details)",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot (the dot is an extra indicator that the output is in machine format)"
      }
    },
    {
      "macro": "user_module_341279123277087315",
      "address": 103,
      "title": "Counter",
      "author": "Adam Zeloof",
      "description": "It counts!",
      "clock_hz": 600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/azzeloof/tt02-counter",
      "commit": "04e3130bfb2db7f112960498eb96840564e87562",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "b0",
        "io_in[2]": "b1",
        "io_in[3]": "b2",
        "io_in[4]": "b3",
        "io_in[5]": "",
        "io_in[6]": "clock divider enable",
        "io_in[7]": "count enable",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341353928049295956",
      "address": 154,
      "title": "Clock divider ASIC",
      "author": "Sad Electronics",
      "description": "Uses a series of flip flops to divide the clock",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt02-tinytapeout-clock-divider-asic",
      "commit": "c785a3ba2e03103ebb2fa241c8b6ac48fa047d68",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341423712597181012",
      "address": 94,
      "title": "Scalable synchronous 4-bit tri-directional loadable counter",
      "author": "Steven Bos",
      "description": "This chip offers a scalable n-bit counter design that can be used as a program counter by setting the next address (eg. for a JMP instruction). It can work in 3 directions: counting up, down and pause.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt02-4bit-tristate-loadable-counter",
      "commit": "ba1c279ee27a34da2443630729fee044117a08d0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "count     (0 = disable/countPause, 1 = enable)",
        "io_in[2]": "load      (0 = count mode, 1 = load mode, overwriting any count logic)",
        "io_in[3]": "countDown (0 = countUp, 1 = countUp)",
        "io_in[4]": "addr3     (bits[4:7] are used for loadable count state)",
        "io_in[5]": "addr2",
        "io_in[6]": "addr1",
        "io_in[7]": "addr0",
        "io_out[0]": "output3 (bits [0:3])",
        "io_out[1]": "output2",
        "io_out[2]": "output1",
        "io_out[3]": "output0",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341432030163108435",
      "address": 108,
      "title": "Logic-2G97-2G98",
      "author": "Sirawit Lappisatepun",
      "description": "Replication of TI's Little Logic 1G97 and 1G98 configurable logic gates.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Sirawit7205/tt02-2G97-2G98",
      "commit": "24fb01bc31ce8f64a5a7f68096908e0c2ac7ee29",
      "pinout": {
        "io_in[0]": "dff_clock",
        "io_in[1]": "dff_data",
        "io_in[2]": "gate1_in0",
        "io_in[3]": "gate1_in1",
        "io_in[4]": "gate1_in2",
        "io_in[5]": "gate2_in0",
        "io_in[6]": "gate2_in1",
        "io_in[7]": "gate2_in2",
        "io_out[0]": "dff_out",
        "io_out[1]": "dff_out_bar",
        "io_out[2]": "gate1_out",
        "io_out[3]": "gate1_out_bar",
        "io_out[4]": "gate2_out",
        "io_out[5]": "gate2_out_bar",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341438392303616596",
      "address": 141,
      "title": "Digital padlock",
      "author": "Jean THOMAS",
      "description": "A 4-digit electronic padlock",
      "clock_hz": 100,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jeanthom/tinytapout-lock",
      "commit": "3d310df36e0f7259e33b6b6cb10f00fd5f9cf133",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Button A",
        "io_in[2]": "Button B",
        "io_in[3]": "Button C",
        "io_in[4]": "Button D",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "Button press detected",
        "io_out[7]": "Code valid"
      }
    },
    {
      "macro": "user_module_341490465660469844",
      "address": 65,
      "title": "7-segment LED flasher",
      "author": "Joseph Chiu",
      "description": "Drives 7-segment LED display, alternating between NIC and JAC",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/toybuilder/tt02-learn-tinytapeout",
      "commit": "f7125da3f81398abbca0ec104e45f799a4332195",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "Prescale select bit 0",
        "io_in[6]": "Prescale select bit 1",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "user_module_341516949939814994",
      "address": 48,
      "title": "Shiftregister Challenge 40 Bit",
      "author": "Thorsten Knoll",
      "description": "The design is a 40 bit shiftregister with a hardcoded 40 bit number. The challenge is to find the correct 40 bit to enable the output to high. With all other numbers the output will be low.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tinytapeout02_shiftregister_challenge",
      "commit": "b7b24b37891e51b9efbfdf50cde7bd4bc999ffc9",
      "pinout": {
        "io_in[0]": "data",
        "io_in[1]": "clk",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341535056611770964",
      "address": 0,
      "title": "Test Inverter Project",
      "author": "Matt Venn",
      "description": "inverts every line",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt02-test-invert",
      "commit": "f7591a23627f152ce4bf8be1fe5d7d332155ae7d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341541108650607187",
      "address": 47,
      "title": "4 bit counter on steamdeck",
      "author": "13arn",
      "description": "copy of my tt01 submission, enable first input and press button to use the counter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/13arn/tt02_counter_steamdeck",
      "commit": "ed340a3677971eaf769aad13f58b4573f0c6a686",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341546888233747026",
      "address": 120,
      "title": "Adder with 7-segment decoder",
      "author": "cy384",
      "description": "Four bit adder with binary to 7 segment display decoder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cy384/tt02-submission-template",
      "commit": "194f07b65b9e55cacf3c83927a28e4bca5852955",
      "pinout": {
        "io_in[0]": "first number bit 0 (least significant)",
        "io_in[1]": "first number bit 1",
        "io_in[2]": "first number bit 2",
        "io_in[3]": "first number bit 3",
        "io_in[4]": "second number bit 0 (least significant)",
        "io_in[5]": "second number bit 1",
        "io_in[6]": "second number bit 2",
        "io_in[7]": "second number bit 3",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment DP (carry bit)"
      }
    },
    {
      "macro": "user_module_341557831870186068",
      "address": 140,
      "title": "4x4 RAM",
      "author": "Michael Bartholic",
      "description": "4 word, 4 bit read/write RAM",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/theFestest/tt02-4x4-ram",
      "commit": "4e131d6efac8033fd05f85fe03d6301c14a9f7f0",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data[0]",
        "io_in[2]": "data[1]",
        "io_in[3]": "data[2]",
        "io_in[4]": "data[3]",
        "io_in[5]": "addr[0]",
        "io_in[6]": "addr[1]",
        "io_in[7]": "write_enable",
        "io_out[0]": "rdata[0]",
        "io_out[1]": "rdata[1]",
        "io_out[2]": "rdata[2]",
        "io_out[3]": "rdata[3]",
        "io_out[4]": "addr[0]",
        "io_out[5]": "addr[1]",
        "io_out[6]": "clock",
        "io_out[7]": "write_enable"
      }
    },
    {
      "macro": "user_module_341571228858843732",
      "address": 83,
      "title": "r2rdac",
      "author": "youngpines",
      "description": "small r2r",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/youngpines/tt02-youngpines-submission",
      "commit": "d34c4105b14a2928ceba6a81fc605587e53fa6ff",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341589685194195540",
      "address": 91,
      "title": "chi 2 shares",
      "author": "Maria Chiara Molteni",
      "description": "Chi function of Xoodoo protected by TI with two shares",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chi2shares",
      "commit": "49f960a96b2c891056d14f91900aaa53dad53320",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341608574336631379",
      "address": 92,
      "title": "chi 3 shares",
      "author": "Molteni Maria Chiara",
      "description": "Chi function of Xoodoo protected by TI with three shares",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chi3shares",
      "commit": "9b3786e41e8c0a073f1a272ecf3ac7fc676db7d8",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341609034095264340",
      "address": 70,
      "title": "tinytapeout2-HELLo-3orLd-7seg",
      "author": "Rakesh Peter",
      "description": "HELLo-3orLd Runner on 7 segment Display",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/r4d10n/tt02-HELLo-3orLd-7seg",
      "commit": "e36ec0ec3b35ad188972a895687629c88a8f0733",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "dp toggle",
        "io_in[4]": "BCD bit 3",
        "io_in[5]": "BCD bit 2",
        "io_in[6]": "BCD bit 1",
        "io_in[7]": "BCD bit 0",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    },
    {
      "macro": "user_module_341613097060926036",
      "address": 153,
      "title": "Adi counter",
      "author": "Prabal Dutta",
      "description": "Test FSM",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/prabaldutta/tt02-adi-demo",
      "commit": "9f8fb5f51d227f688d8b09dab3b42680041e5ff1",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341614346808328788",
      "address": 111,
      "title": "Wolf sheep cabbage river crossing puzzle ASIC design",
      "author": "maehw",
      "description": "Play the wolf, goat and cabbage puzzle interactively.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-wokwi-wolf-goat-cabbage",
      "commit": "df1c930121fd2cf92927e402110e88c8e39ac0fb",
      "pinout": {
        "io_in[0]": "not connected because it is typically used for clocked designs and may be used in the future of this design",
        "io_in[1]": "input signal F for the position of the farmer",
        "io_in[2]": "input signal W for the position of the wolf",
        "io_in[3]": "input signal G for the position of the goat",
        "io_in[4]": "input signal C for the position of the cabbage",
        "io_in[5]": "here be dragons or an easter egg",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "output signal ~E, i.e. the top and bottom segments light up, when the game is over due to an unattended situation on any river bank side",
        "io_out[1]": "output signal ~R i.e. the top-right and bottom-right segments light up, to indicate an unattended situation on the right river bank (game over)",
        "io_out[2]": "output signal ~R i.e. the top-right and bottom-right segments light up, to indicate an unattended situation on the right river bank (game over)",
        "io_out[3]": "output signal ~E, i.e. the top and bottom segments light up, when the game is over due to an unattended situation on any river bank side",
        "io_out[4]": "output signal ~L i.e. the top-left and bottom-left segments light up, to indicate an unattended situation on the left river bank (game over)",
        "io_out[5]": "output signal ~L i.e. the top-left and bottom-left segments light up, to indicate an unattended situation on the left river bank (game over)",
        "io_out[6]": "here be dragons or an easter egg",
        "io_out[7]": "output signal A to light up the \"dot LED\" of the 7 segment display as an indicator that all objects have reached the right bank of the river and the game is won! \ud83c\udf89\ud83c\udf89\ud83c\udf89"
      }
    },
    {
      "macro": "user_module_341614374571475540",
      "address": 44,
      "title": "chiDOM",
      "author": "Maria CHiara Molteni",
      "description": "Chi function of Xoodoo protected at the first-order by DOM",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mmolteni-secpat/tinytapeout02_chiDOM",
      "commit": "9de46aabdb283cb4b2bbfbb0e0d6d41d64f5375b",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341620484740219475",
      "address": 41,
      "title": "8x8 Bit Pattern Player",
      "author": "Thorsten Knoll",
      "description": "8x8 bit serial programmable, addressable and playable memory.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ThorKn/tinytapeout02_pattern_player",
      "commit": "6fbd04beccebb80c4701986ce7aa31a823803350",
      "pinout": {
        "io_in[0]": "data",
        "io_in[1]": "clk_sr",
        "io_in[2]": "address_0",
        "io_in[3]": "address_1",
        "io_in[4]": "address_2",
        "io_in[5]": "mode",
        "io_in[6]": "",
        "io_in[7]": "clk_pl",
        "io_out[0]": "bit 0",
        "io_out[1]": "bit 1",
        "io_out[2]": "bit 2",
        "io_out[3]": "bit 3",
        "io_out[4]": "bit 4",
        "io_out[5]": "bit 5",
        "io_out[6]": "bit 6",
        "io_out[7]": "bit 7"
      }
    },
    {
      "macro": "user_module_341628725785264722",
      "address": 132,
      "title": "MicroASIC VI",
      "author": "Mikhail Svarichevsky",
      "description": "Free-running oscillators to verify simulation vs reality + TRNG",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BarsMonster/MicroAsicVI",
      "commit": "3e9abb7c89419ebe8557b60c0f7ad234c2e8f1a3",
      "pinout": {
        "io_in[0]": "clock in (for debugging)",
        "io_in[1]": "reset",
        "io_in[2]": "shift register clk",
        "io_in[3]": "shift register data",
        "io_in[4]": "clock source id_0",
        "io_in[5]": "clock source id_1",
        "io_in[6]": "clock source id_2",
        "io_in[7]": "",
        "io_out[0]": "clock divided by 2^10",
        "io_out[1]": "clock divided by 2^14",
        "io_out[2]": "clock divided by 2^18",
        "io_out[3]": "clock divided by 2^22",
        "io_out[4]": "clock divided by 2^26",
        "io_out[5]": "clock divided by 2^30",
        "io_out[6]": "clock divided by 2^32",
        "io_out[7]": "Bit 11 of shift register (to ensure it's not optimized away)"
      }
    },
    {
      "macro": "user_module_341631511790879314",
      "address": 112,
      "title": "Low-speed UART transmitter with limited character set loading",
      "author": "maehw",
      "description": "Low baudrate UART transmitter (8N1) with limited character set (0x40..0x5F; includes all capital letters in the ASCII table) loading.",
      "clock_hz": 9600,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-wokwi-lowspeed-tiny-uart",
      "commit": "6245eace37c3393bf81b038b8d6e259c22197a4c",
      "pinout": {
        "io_in[0]": "300 Hz input clock signal (or different value supported by the whole",
        "io_in[1]": "bit b0 (the least significant bit) of the loaded and transmitted character",
        "io_in[2]": "bit b1 of the loaded and transmitted character",
        "io_in[3]": "bit b2 of the loaded and transmitted character",
        "io_in[4]": "bit b3 of the loaded and transmitted character",
        "io_in[5]": "bit b4 of the loaded and transmitted character",
        "io_in[6]": "load word into shift register from parallel input (IN1..IN5) (1) or cycle the existing word with start/stop bits around it (0)",
        "io_in[7]": "",
        "io_out[0]": "UART (serial output pin, direct throughput)",
        "io_out[1]": "UART (serial output pin, gated by enable signal)",
        "io_out[2]": "UART (serial output pin, reverse polarity, direct throughput)",
        "io_out[3]": "UART (serial output pin, reverse polarity, gated by enable signal)",
        "io_out[4]": "UART (MSBit, direct throughput); typically set to 1 or can be used to sniffing the word cycling through the shift register)",
        "io_out[5]": "UART (MSBit, reverse polarity, direct throughput); same usage as above",
        "io_out[6]": "UART (MSBit, gated by enable signal); typically set to 1 or can be used to sniffing the word cycling through the shift register)",
        "io_out[7]": "UART (MSBit, reverse polarity, gated by enable signal); same usage as above"
      }
    },
    {
      "macro": "user_module_341631644820570706",
      "address": 136,
      "title": "LAB11",
      "author": "Thomas Zachariah",
      "description": "Cycles through the characters of LAB11",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tzachari/tt02-lab11",
      "commit": "fb981eabd32e00ca440b47ff5e3d88edc7c77dca",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_341678527574180436",
      "address": 158,
      "title": "Laura's L",
      "author": "Laura",
      "description": "Makes an L on the 7 segment when you press buttons 1 & 2",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt02-laura",
      "commit": "ebb56a99139e0697175f1cacb5c638fed2b739ac",
      "pinout": {
        "io_in[0]": "",
        "io_in[1]": "button 1",
        "io_in[2]": "button 2",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_342981109408072274",
      "address": 22,
      "title": "A LED Flasher",
      "author": "Ben Everard",
      "description": "Select different inputs to generate different LED patterns",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/benevpi/tt02-LED-flasher",
      "commit": "84f2d3dc54f9fc1929b2b7e285da29ef33ed4504",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "not_1",
        "io_in[2]": "not_1_2",
        "io_in[3]": "not_1_2_3",
        "io_in[4]": "not_all",
        "io_in[5]": "direction",
        "io_in[6]": "toggle_direction",
        "io_in[7]": "clock_div_enable",
        "io_out[0]": "LED1",
        "io_out[1]": "LED2",
        "io_out[2]": "LED3",
        "io_out[3]": "LED4",
        "io_out[4]": "LED5",
        "io_out[5]": "LED6",
        "io_out[6]": "LED7",
        "io_out[7]": "LED8"
      }
    },
    {
      "macro": "user_module_346553315158393428",
      "address": 16,
      "title": "Stream Integrator",
      "author": "William Moyes",
      "description": "A silicon implementation of a simple optical computation",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/moyesw/tt02-moyesw-StreamIntegrator",
      "commit": "c8f0f684953711c59520669077873682b1bbead7",
      "pinout": {
        "io_in[0]": "Value from Tape A",
        "io_in[1]": "Value from Tape B",
        "io_in[2]": "Value from Tape C",
        "io_in[3]": "Value from Tape D",
        "io_in[4]": "Extra term XORed with generator output",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "Output",
        "io_out[1]": "",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_346916357828248146",
      "address": 18,
      "title": "Configurable SR",
      "author": "Greg Steiert",
      "description": "Configurable gates driving SR and D flip-flops",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/steieio/tt02-submission-universal-sr",
      "commit": "914184cd1a7b67a0df216c6ac27c0b6f309e8432",
      "pinout": {
        "io_in[0]": "A-0",
        "io_in[1]": "A-1",
        "io_in[2]": "A-SEL",
        "io_in[3]": "A-INV",
        "io_in[4]": "B-0",
        "io_in[5]": "B-1",
        "io_in[6]": "B-SEL",
        "io_in[7]": "B-INV",
        "io_out[0]": "MUX-A",
        "io_out[1]": "XOR-A",
        "io_out[2]": "SR-Q",
        "io_out[3]": "D-Q",
        "io_out[4]": "MUX-B",
        "io_out[5]": "XOR-B",
        "io_out[6]": "SR-Q#",
        "io_out[7]": "D-Q#"
      }
    },
    {
      "macro": "user_module_347140425276981843",
      "address": 161,
      "title": "Customizable UART Character",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design implements a single character UART transmitter using registers made from D-flip flops and multiplexers.",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-UARTcharacter",
      "commit": "f7214c5d43c259f393fc492c9be4abb135038493",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Bit 0",
        "io_in[2]": "Bit 1",
        "io_in[3]": "Bit 2",
        "io_in[4]": "Bit 3",
        "io_in[5]": "Bit 4",
        "io_in[6]": "Load/TX",
        "io_in[7]": "Output Enable",
        "io_out[0]": "segment a (Load/TX)",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f (Output Enable)",
        "io_out[6]": "segment g",
        "io_out[7]": "UART Serial Out"
      }
    },
    {
      "macro": "user_module_347144898258928211",
      "address": 162,
      "title": "Customizable UART String",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design Supports sending multiple ASCII characters over UART.",
      "clock_hz": 300,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-UARTstring",
      "commit": "0760c266bf4f79164abbad2b4e9000a16053182a",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "N/A",
        "io_in[2]": "N/A",
        "io_in[3]": "N/A",
        "io_in[4]": "N/A",
        "io_in[5]": "N/A",
        "io_in[6]": "Load/TX",
        "io_in[7]": "Output Enable",
        "io_out[0]": "segment a (Output Enable)",
        "io_out[1]": "segment b (Load/TX)",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "UART Serial Out"
      }
    },
    {
      "macro": "user_module_347417602591556180",
      "address": 163,
      "title": "Customizable Padlock",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This design implements a customizable padlock. Set a code for your digital safe!",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-padlock",
      "commit": "ff3d4a91943cef88aeeb38438eb26172d1253afe",
      "pinout": {
        "io_in[0]": "N/A",
        "io_in[1]": "Reset",
        "io_in[2]": "Code 0",
        "io_in[3]": "Code 1",
        "io_in[4]": "Code 2",
        "io_in[5]": "N/A",
        "io_in[6]": "N/A",
        "io_in[7]": "Set Code",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347497504164545108",
      "address": 160,
      "title": "7-Seg 'Tiny Tapeout' Display",
      "author": "Tiny Tapeout 02 (J. Rosenthal)",
      "description": "This circuit will output a string of characters (\u2019tiny tapeout\u2019) to the 7-segment display.",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-7segstringdisplay",
      "commit": "a320a1575e14d0b05131e786727e80d2202e151d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "Reset Counter",
        "io_in[2]": "N/A",
        "io_in[3]": "Clock Disable (Test Mode)",
        "io_in[4]": "Test Logic A",
        "io_in[5]": "Test Logic B",
        "io_in[6]": "Test Logic C",
        "io_in[7]": "Test Logic D",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "N/A"
      }
    },
    {
      "macro": "user_module_347592305412145748",
      "address": 13,
      "title": "4-spin Ising Chain Simulation",
      "author": "Seppe Van Dyck",
      "description": "A self-contained physics simulation. This circuit simulates 4 spins of an Ising chain in  an external field.",
      "clock_hz": 20,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/svd321/tt02-Ising",
      "commit": "02559fc837877c30e1806a49801ced6479a08695",
      "pinout": {
        "io_in[0]": "clock, clock input.",
        "io_in[1]": "T0, LSB of the 3-bit temperature representation.",
        "io_in[2]": "T1, Middle bit of the 3-bit temperature.",
        "io_in[3]": "T2, MSB of the 3-bit temperature.",
        "io_in[4]": "N1, Value of neighbour 1 (up/1 or down/0).",
        "io_in[5]": "N2, Value of neighbour 2 (up/1 or down/0).",
        "io_in[6]": "J, The sign of the NN coupling constant J.",
        "io_in[7]": "H, Value of the coupling to the external field H.",
        "io_out[0]": "segment a, Spin 0.",
        "io_out[1]": "segment b, Spin 1.",
        "io_out[2]": "segment c, Spin 2.",
        "io_out[3]": "segment d, Spin 3.",
        "io_out[4]": "segment e, Neighbour 2.",
        "io_out[5]": "segment f, Neighbour 1.",
        "io_out[6]": "",
        "io_out[7]": "segment h, MC Step Indicator."
      }
    },
    {
      "macro": "user_module_347594509754827347",
      "address": 19,
      "title": "LUTRAM",
      "author": "Luis Ardila",
      "description": "LUTRAM with 4 bit address and 8 bit output preloaded with a binary to 7 segments decoder, sadly it was too big for 0-F, so now it is 0-9?",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/leardilap/tt02-LUTRAM",
      "commit": "94929b896c1f40d3444518d18031d63bc93df7cd",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data",
        "io_in[2]": "reset",
        "io_in[3]": "nc",
        "io_in[4]": "address bit 3",
        "io_in[5]": "address bit 2",
        "io_in[6]": "address bit 1",
        "io_in[7]": "address bit 0",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment pd"
      }
    },
    {
      "macro": "user_module_347619669052490324",
      "address": 57,
      "title": "UART-CC",
      "author": "Christina Cyr",
      "description": "UART Template",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Christina-Cyr/tt02-submission-UART-CC",
      "commit": "682de254aeb28af21127c66726c1c8def7497481",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347688030570545747",
      "address": 21,
      "title": "BCD to 7-segment encoder",
      "author": "maehw",
      "description": "Encode binary coded decimals (BCD) in the range 0..9 to 7-segment display control signals",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/maehw/tt02-bcd-7segment-encoder",
      "commit": "9081a57c46f3d1960ee9fd83f9998ef7d0d4cc92",
      "pinout": {
        "io_in[0]": "w",
        "io_in[1]": "x",
        "io_in[2]": "y",
        "io_in[3]": "z",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347690870424732244",
      "address": 12,
      "title": "German Traffic Light State Machine",
      "author": "Jens Schleusner",
      "description": "A state machine to control german traffic lights at an intersection.",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/JensIMS/tt02-trafficlight",
      "commit": "89367ad939adf249a15df3d1d562192844f59b65",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "main street red",
        "io_out[1]": "main street yellow",
        "io_out[2]": "main street green",
        "io_out[3]": "main street pedestrian green",
        "io_out[4]": "side street red",
        "io_out[5]": "side street yellow",
        "io_out[6]": "side street green",
        "io_out[7]": "side street pedestrian green"
      }
    },
    {
      "macro": "user_module_347787021138264660",
      "address": 10,
      "title": "TinySensor",
      "author": "Justin Pelan",
      "description": "Using external hardware photodiodes as inputs, display light intensity on the 7-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/justinP-wrk/tt02-TinySensor",
      "commit": "990d95b3d14b6b1bad6e302c5f017ddda4d3538a",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_347894637149553236",
      "address": 17,
      "title": "tiny-fir",
      "author": "Tom Schucker",
      "description": "4bit 2-stage FIR filter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Tschucker/tt02-submission-tiny-fir",
      "commit": "191ee2a99e37d9bdaf41978127ee77f4814457fe",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "data0/tap0",
        "io_in[2]": "data1/tap1",
        "io_in[3]": "data2/tap2",
        "io_in[4]": "data3/tap3",
        "io_in[5]": "select0",
        "io_in[6]": "select1",
        "io_in[7]": "loadpulse",
        "io_out[0]": "fir1/mult0/tap10",
        "io_out[1]": "fir2/mult1/tap11",
        "io_out[2]": "fir3/mult2/tap12",
        "io_out[3]": "fir4/mult3/tap13",
        "io_out[4]": "fir5/mult4/tap20",
        "io_out[5]": "fir6/mult5/tap21",
        "io_out[6]": "fir7/mult6/tap22",
        "io_out[7]": "fir8/mult7/tap23"
      }
    },
    {
      "macro": "user_module_348121131386929746",
      "address": 28,
      "title": "Loading Animation",
      "author": "Andre & Milosch Meriac",
      "description": "Submission for tt02 - Rotating Dash",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/loading-animation",
      "commit": "db331b49720aee63f68e56110e2c9ee66edba433",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "mode",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348195845106041428",
      "address": 27,
      "title": "Tiny Phase/Frequency Detector",
      "author": "argunda",
      "description": "Detect phase shifts between 2 square waves.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/argunda/tt02-TinyPFD",
      "commit": "5884e7438ab900117bbf797bba1d70bb08b6f194",
      "pinout": {
        "io_in[0]": "reference clock",
        "io_in[1]": "feedback clock",
        "io_in[2]": "active-low reset",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "up",
        "io_out[1]": "(inverted) down",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348242239268323922",
      "address": 37,
      "title": "Siren",
      "author": "Alan Green",
      "description": "Pretty patterns and a siren straight from the 1970s",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alanvgreen/tt02-siren",
      "commit": "7fb893976684a1f525e9151a6a0d2c6fe09adff2",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "pattern_select",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348255968419643987",
      "address": 32,
      "title": "Tiny Synth",
      "author": "Nanik Adnani",
      "description": "A tiny synthesizer! Modulates the frequency of the clock based on inputs, plays a C scale (hopefully).",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nanikgeorge/tt02-submission-template",
      "commit": "a24021bf3e9a26b9dd286e0c5650eeb95c1530eb",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "C",
        "io_in[2]": "D",
        "io_in[3]": "E",
        "io_in[4]": "F",
        "io_in[5]": "G",
        "io_in[6]": "A",
        "io_in[7]": "B",
        "io_out[0]": "Pitch + 1 Octave",
        "io_out[1]": "Pitch",
        "io_out[2]": "Pitch - 1 Octave",
        "io_out[3]": "Pitch - 2 Octave",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348260124451668562",
      "address": 34,
      "title": "prbs15",
      "author": "Tom Schucker",
      "description": "generates and checks prbs15 sequences",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/teaandtechtime/tt02-submission-prbs15",
      "commit": "37f5812b8d6beb37b640a5b246e7a23911d9f9c7",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "gnd",
        "io_in[2]": "enable",
        "io_in[3]": "check",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "clk",
        "io_out[1]": "prbs15",
        "io_out[2]": "error",
        "io_out[3]": "checked",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348381622440034899",
      "address": 84,
      "title": "Worm in a Maze",
      "author": "Tim Victor",
      "description": "Animation demo on seven-segment LED",
      "clock_hz": 25,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/timvgso/tinatapeworm",
      "commit": "e390a20aee111850be5c43de175a27646fdac529",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "disable auto-reset",
        "io_in[2]": "manual reset",
        "io_in[3]": "disable /16 clock divider (\"turbo mode\")",
        "io_in[4]": "display 2 or 3 worm segments",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "LED segment a",
        "io_out[1]": "LED segment b",
        "io_out[2]": "LED segment c",
        "io_out[3]": "LED segment d",
        "io_out[4]": "LED segment e",
        "io_out[5]": "LED segment f",
        "io_out[6]": "LED segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_348540666182107731",
      "address": 64,
      "title": "Test2",
      "author": "Shaos",
      "description": "Testing Flip-Flops",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shaos/tt02-submission-shaos",
      "commit": "b6bb72f49c43b3c54f67b68426dda51761e0e250",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "D",
        "io_in[2]": "C",
        "io_in[3]": "S",
        "io_in[4]": "R",
        "io_in[5]": "NAND1",
        "io_in[6]": "NAND2",
        "io_in[7]": "Muller",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_348787952842703444",
      "address": 96,
      "title": "Vector dot product",
      "author": "Robert Riachi",
      "description": "Compute the dot product of two 2x1 vectors each containing 2 bit integers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RobertRiachi/tt02-dot-product",
      "commit": "74dd34d524d13c1c1435bf3153002ca3043402d2",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349011320806310484",
      "address": 72,
      "title": "GOL-Cell",
      "author": "Shaos",
      "description": "Game of Life Cell",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shaos-net/tt02-submission-shaos2",
      "commit": "b16dc654419394816e091066d395caac93070025",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "half",
        "io_in[3]": "input 0 or 5",
        "io_in[4]": "input 1 or 6",
        "io_in[5]": "input 2 or 7",
        "io_in[6]": "input 3 or 8",
        "io_in[7]": "input 4 or 9",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "inverted clock"
      }
    },
    {
      "macro": "user_module_349047610915422802",
      "address": 66,
      "title": "Nano-neuron",
      "author": "Daniel Burke",
      "description": "minimal low vector test",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/drburke3/tt02-nano-neuron",
      "commit": "c84ce2c5c425602ea811a12c23bc539c4f17a20d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349228308755382868",
      "address": 82,
      "title": "SPI Flash State Machine",
      "author": "Greg Steiert",
      "description": "Implements a state machine stored in an external SPI flash",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/steieio/tt02-sfsm-wokwi",
      "commit": "5f6ad7772ef0ce264e52b1e46c4466a414dd6db6",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "din",
        "io_in[3]": "in0",
        "io_in[4]": "in1",
        "io_in[5]": "in2",
        "io_in[6]": "in3",
        "io_in[7]": "in4",
        "io_out[0]": "cs",
        "io_out[1]": "dout",
        "io_out[2]": "out0",
        "io_out[3]": "out1",
        "io_out[4]": "out2",
        "io_out[5]": "out3",
        "io_out[6]": "out4",
        "io_out[7]": "out5"
      }
    },
    {
      "macro": "user_module_349255310782759507",
      "address": 126,
      "title": "Test3",
      "author": "Shaos",
      "description": "Binary Coded Ternary Test",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ternary-info/tt02-submission-shaos3",
      "commit": "c75a40782087a4b2f333d791cb796bf076a30ddc",
      "pinout": {
        "io_in[0]": "C+",
        "io_in[1]": "C-",
        "io_in[2]": "N+",
        "io_in[3]": "N-",
        "io_in[4]": "O+",
        "io_in[5]": "O-",
        "io_in[6]": "P+",
        "io_in[7]": "P-",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_349519263900369490",
      "address": 146,
      "title": "Hex to Seven Semgent Converter",
      "author": "Samuel Sun",
      "description": "Converts from a binary input to hex seven-segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cmu-stuco-98154/f22-tt02-qilins",
      "commit": "5999d66be2ac20184502fbf0cb2b7ac230986165",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349546262775726676",
      "address": 87,
      "title": "BCD to 7-Segment Decoder",
      "author": "JinGen Lim",
      "description": "Converts a BCD input into a 7-segment display output",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jglim/tt02-bcd-7seg",
      "commit": "fe3ababb0671b86ddb38602fac1aea2fb3144b13",
      "pinout": {
        "io_in[0]": "input 1 (BCD 1)",
        "io_in[1]": "input 2 (BCD 2)",
        "io_in[2]": "input 3 (BCD 4)",
        "io_in[3]": "input 4 (BCD 8)",
        "io_in[4]": "decimal dot (passthrough)",
        "io_in[5]": "output invert",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dot"
      }
    },
    {
      "macro": "user_module_349729432862196307",
      "address": 105,
      "title": "A (7, 1/2) Convolutional Encoder",
      "author": "Jos van 't Hof",
      "description": "A (7, 1/2) Convolutional Encoder following the CCSDS 131.0-B-4 standard.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Josvth/tt02-convolutional-encoder",
      "commit": "caf317931a1538d7f8a6a3043ee43319ebe0a2ce",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "write_not_shift",
        "io_in[2]": "shift_input_0",
        "io_in[3]": "shift_input_1",
        "io_in[4]": "shift_input_2",
        "io_in[5]": "shift_input_3",
        "io_in[6]": "shift_input_4",
        "io_in[7]": "shift_input_5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp (used to indicate clock)"
      }
    },
    {
      "macro": "user_module_349790606404354643",
      "address": 102,
      "title": "SRLD",
      "author": "Chris Burton",
      "description": "8-bit Shift Register with latch and hex decode to display alternating nibbles",
      "clock_hz": 16,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/burtyb/tt02-srld",
      "commit": "58669175b6a9dd701ba6bd2a6373fa9bf4f84acd",
      "pinout": {
        "io_in[0]": "displayClock",
        "io_in[1]": "shiftIn",
        "io_in[2]": "shiftClk",
        "io_in[3]": "latch",
        "io_in[4]": "cycle_display",
        "io_in[5]": "lowHighNibble",
        "io_in[6]": "useLatch",
        "io_in[7]": "mslLsb",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "High/low nibble indicator"
      }
    },
    {
      "macro": "user_module_349803790984020562",
      "address": 148,
      "title": "3-bit adder",
      "author": "MG",
      "description": "Add two 3-bit numbers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/cmu-stuco-98154/f22-tt02-mgee3",
      "commit": "6851bf1c45e3152b0a7f6797b39b5f205bb49b58",
      "pinout": {
        "io_in[0]": "A0, lowest order bit of first number",
        "io_in[1]": "A1, second order bit of first number",
        "io_in[2]": "A2, highest order bit of first number",
        "io_in[3]": "B0, lowest order bit of second number",
        "io_in[4]": "B1, second order bit of second number",
        "io_in[5]": "B2, highest order bit of second number",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349813388252021330",
      "address": 129,
      "title": "4:2 Compressor",
      "author": "saicharan0112",
      "description": "A Basic 4:2 compressor which contains 4 inputs and 1 carry_in bit which compresses to 2 outputs and 1 carry_out bit",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/saicharan0112/tt02-submission-template",
      "commit": "2b5ce584f79e761725c5b72753e9829061c8edb3",
      "pinout": {
        "io_in[0]": "a1 is one of the 4 main input bits",
        "io_in[1]": "a2 is one of the 4 main input bits",
        "io_in[2]": "a3 is one of the 4 main input bits",
        "io_in[3]": "a4 is one of the 4 main input bits",
        "io_in[4]": "cin is the carry_in input bit",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "o1 is the one of the 3 compressed output bits",
        "io_out[1]": "o2 is the one of the 3 compressed output bits",
        "io_out[2]": "cout is the carry_out bit",
        "io_out[3]": "",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349833797657690706",
      "address": 134,
      "title": "CRC-16 and Parity calculator",
      "author": "Chris Burton",
      "description": "CRC-16/XModem and Even Parity calculator based on Ben Eater error detection videos.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/8086net/tt02-CRC16",
      "commit": "5f097b24ee4468e18056ff979e5089187028fa0c",
      "pinout": {
        "io_in[0]": "nRst_A",
        "io_in[1]": "shiftData_A",
        "io_in[2]": "shiftClk_A",
        "io_in[3]": "nRead_A",
        "io_in[4]": "nRst_B",
        "io_in[5]": "shiftData_B",
        "io_in[6]": "shiftClk_B",
        "io_in[7]": "nRead_B",
        "io_out[0]": "crcOutput_A",
        "io_out[1]": "parity_A",
        "io_out[2]": "",
        "io_out[3]": "",
        "io_out[4]": "crcOutput_B",
        "io_out[5]": "parity_B",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349886696875098706",
      "address": 117,
      "title": "Marquee",
      "author": "Christopher 'ctag' Bero",
      "description": "Scrolls 'ctag' across the 7seg.",
      "clock_hz": 2,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ctag/tt02-submission-ctag",
      "commit": "80867575307e7302f88052dbb30989f286b717b2",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_349901899339661908",
      "address": 62,
      "title": "CNS TT02 Test 1:Score Board",
      "author": "Bryan Bonilla Garay, Devin Alvarez, Ishaan Singh, Yu Feng Zhou, and N. Sertac Artan",
      "description": "First test run of CNS Lab. Displays an 8-bit score from one of two players as a two-digit hexadecimal value.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NYIT-CNS/cns001-tt02-submission1",
      "commit": "cc4ec3a2d38ed2fe64ec95883248a580e4752666",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "rst",
        "io_in[4]": "display_digit",
        "io_in[5]": "display_user",
        "io_in[6]": "user",
        "io_in[7]": "mode",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "user_module_349934460979905106",
      "address": 130,
      "title": "PS2 keyboard Interface",
      "author": "Tanish Khanchandani",
      "description": "PS2 keyboard interface to enter charecters into a computer. Use the PS2 hex scan codes (https://techdocs.altium.com/display/FPGA/PS2+Keyboard+Scan+Codes) to enter hex codes and it will send the letter to your computer.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tanishnk/Tiny-Tapeout-2-submission-Tanish-k",
      "commit": "e3c5ce489a1fd12857b75371d7e8e7f7df1c391e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "hex Bit 1",
        "io_in[2]": "hex Bit 2",
        "io_in[3]": "hex Bit 3",
        "io_in[4]": "hex Bit 4",
        "io_in[5]": "Set 1st hex",
        "io_in[6]": "set 2nd hex",
        "io_in[7]": "Enable to send",
        "io_out[0]": "NC",
        "io_out[1]": "NC",
        "io_out[2]": "NC",
        "io_out[3]": "NC",
        "io_out[4]": "NC",
        "io_out[5]": "NC",
        "io_out[6]": "Clock",
        "io_out[7]": "Data"
      }
    },
    {
      "macro": "user_module_349952820323025491",
      "address": 142,
      "title": "FFT Butterfly in Wokwi",
      "author": "James R",
      "description": "Single FFT butterfly with 2-bit resolution",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jdrosent/tt02-submission-template",
      "commit": "acc6cc6b56e0bf6c805a8287d6226f8e494f2cf9",
      "pinout": {
        "io_in[0]": "xr0.0",
        "io_in[1]": "xr0.1",
        "io_in[2]": "xj0.0",
        "io_in[3]": "xj0.1",
        "io_in[4]": "xr1.0",
        "io_in[5]": "xr1.1",
        "io_in[6]": "xj1.0",
        "io_in[7]": "xj1.1",
        "io_out[0]": "xr0.0",
        "io_out[1]": "Xr0.1",
        "io_out[2]": "Xj0.0",
        "io_out[3]": "Xj0.1",
        "io_out[4]": "Xr1.0",
        "io_out[5]": "Xr1.1",
        "io_out[6]": "Xj1.0",
        "io_out[7]": "Xj1.1"
      }
    },
    {
      "macro": "user_module_349953952950780498",
      "address": 63,
      "title": "CNS002 (TT02-Test 2)",
      "author": "Bryan Bonilla Garay, Devin Alvarez, Ishaan Singh, Yu Feng Zhou, and N. Sertac Artan",
      "description": "First test run of CNS Lab (second design)",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/NYIT-CNS/cns002-tt02-submission2",
      "commit": "616c1ce8857796cb2ad2445a609a45da5a4e78d2",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "",
        "io_in[3]": "",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "user_module_nickoe",
      "address": 59,
      "title": "LEDChaser from LiteX test",
      "author": "Nick \u00d8stergaard",
      "description": "This is just a small demo of synthezing verilog from LiteX, this does not include any CPU.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nickoe/tinytapeout02-verilog-gds-test",
      "commit": "753e787a30df493fb5db59af5ed1ba9f4646f573",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "pwm_width 0",
        "io_in[3]": "pwm_width 1",
        "io_in[4]": "pwm_width 2",
        "io_in[5]": "pwm_width 3",
        "io_in[6]": "pwm_width 4",
        "io_in[7]": "pwm_width 5",
        "io_out[0]": "led a",
        "io_out[1]": "led b",
        "io_out[2]": "led c",
        "io_out[3]": "led d",
        "io_out[4]": "led e",
        "io_out[5]": "led f",
        "io_out[6]": "led g",
        "io_out[7]": "led h"
      }
    },
    {
      "macro": "user_module_skylersaleh",
      "address": 131,
      "title": "Hello Generator",
      "author": "Skyler Saleh",
      "description": "Flashes 'H-E-L-L-O' on the 7 segment display",
      "clock_hz": 2048,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/skylersaleh/tt02-hello",
      "commit": "5bd2da4e97937935391c6a650f16a8265fbeda91",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "if debug_mode == 0: clock_divider_ratio[0] elif debug_mode == 1: character_rom_index[0]",
        "io_in[2]": "if debug_mode == 0: clock_divider_ratio[1] elif debug_mode == 1: character_rom_index[1]",
        "io_in[3]": "if debug_mode == 0: clock_divider_ratio[2] elif debug_mode == 1: character_rom_index[2]",
        "io_in[4]": "if debug_mode == 0: clock_divider_ratio[3] elif debug_mode == 1: slow_clock_output (used for flash generator)",
        "io_in[5]": "flash enable: 0 = Flash display between each output letter. 1 = Do not flash display.",
        "io_in[6]": "must be zero: 0 = Prints 'H-E-L-L-O' 1 = Implementation defined behavior",
        "io_in[7]": "debug_mode: 0 = normal operation, 1 = debug mode",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment decimal"
      }
    },
    {
      "macro": "vaishnavachath_rotary_toplevel",
      "address": 110,
      "title": "Rotary Encoder Counter",
      "author": "Vaishnav Achath",
      "description": "Count Up/Down on the 7-segment accouring to rotary encoder input",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/vaishnavachath/tt02-submission-rotary-encoder-counter",
      "commit": "6c992e1fa66c735640602408862d91ca6fa31c90",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset_rotary_SW",
        "io_in[2]": "rotary_outa",
        "io_in[3]": "rotary_outb",
        "io_in[4]": "test_mode_enable",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "wren6991_whisk_tt2_io_wrapper",
      "address": 93,
      "title": "Whisk: 16-bit Serial RISC CPU",
      "author": "Luke Wren",
      "description": "Execute a simple 16-bit RISC-style instruction set from up to 64 kilobytes of external SPI SRAM.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Wren6991/tt02-whisk-serial-processor",
      "commit": "a3445b9b4c65c4abaa37502db7fa5a32ac1286bf",
      "pinout": {
        "io_in[0]": "clk",
        "io_in[1]": "rst_n",
        "io_in[2]": "mem_sdi",
        "io_in[3]": "ioport_sdi",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "mem_csn",
        "io_out[1]": "mem_sck",
        "io_out[2]": "mem_sdo",
        "io_out[3]": "ioport_sck",
        "io_out[4]": "ioport_sdo",
        "io_out[5]": "ioport_latch_i",
        "io_out[6]": "ioport_latch_o",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xor_shift32_evango",
      "address": 53,
      "title": "XorShift32",
      "author": "Ethan Mahintorabi",
      "description": "XorShift32 random number generator",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/QuantamHD/evan-submission",
      "commit": "3e58ac772c70ba1eacd1c4e35584fba7b9c4b638",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "seed_bit0",
        "io_in[3]": "seed_bit1",
        "io_in[4]": "seed_bit2",
        "io_in[5]": "seed_bit3",
        "io_in[6]": "seed_bit4",
        "io_in[7]": "seed_bit5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xor_shift32_quantamhd",
      "address": 52,
      "title": "XorShift32",
      "author": "Ethan Mahintorabi",
      "description": "XorShift32 random number generator",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/QuantamHD/ethan-evan-random-numbers",
      "commit": "e70cdd017875d79933f025e826259a3c964a0bd1",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "seed_bit0",
        "io_in[3]": "seed_bit1",
        "io_in[4]": "seed_bit2",
        "io_in[5]": "seed_bit3",
        "io_in[6]": "seed_bit4",
        "io_in[7]": "seed_bit5",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "xyz_peppergray_Potato1_top",
      "address": 30,
      "title": "Potato-1 (Brainfuck CPU)",
      "author": "Pepper Gray (they/them)",
      "description": "Potato-1 is part of a Brainfuck CPU. It is only the control logic, i.e. you have to bring your own registers, memory controller and io logic. It is very simple, hence likely very slow: You could probably run your brainfuck code on a potato and it would be equally fast, hence the name. The project picture was generated using DALL\u00b7E.\n",
      "clock_hz": 12500,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/peppergrayxyz/Potato-1",
      "commit": "41f393d0bd5c1da416064f71a9299f78fda900c8",
      "pinout": {
        "io_in[0]": "Clock",
        "io_in[1]": "Reset_n",
        "io_in[2]": "IO Wait",
        "io_in[3]": "Zero Flag",
        "io_in[4]": "Instruction[0]",
        "io_in[5]": "Instruction[1]",
        "io_in[6]": "Instruction[2]",
        "io_in[7]": "Instruction[3]",
        "io_out[0]": "PC++",
        "io_out[1]": "PC--",
        "io_out[2]": "X++",
        "io_out[3]": "X--",
        "io_out[4]": "A++",
        "io_out[5]": "A--",
        "io_out[6]": "Put",
        "io_out[7]": "Get"
      }
    },
    {
      "macro": "yubex_egg_timer",
      "address": 29,
      "title": "tiny egg timer",
      "author": "yubex",
      "description": "tiny egg timer is a configurable small timer",
      "clock_hz": 10000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yubex/tt02-tiny_egg_timer",
      "commit": "50b125f1fcd724c9196e2a417b473e70bdd4b00e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "start",
        "io_in[3]": "wait time in minutes [0]",
        "io_in[4]": "wait time in minutes [1]",
        "io_in[5]": "wait time in minutes [2]",
        "io_in[6]": "wait time in minutes [3]",
        "io_in[7]": "wait time in minutes [4]",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "dot"
      }
    },
    {
      "macro": "yupferris_bitslam",
      "address": 40,
      "title": "bitslam",
      "author": "Jake \"ferris\" Taylor",
      "description": "bitslam is a programmable sound chip with 2 LFSR voices.",
      "clock_hz": 6000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yupferris/bitslam",
      "commit": "b947526efbae3757ad43cbf8627ba5268f14566e",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "address/data selector",
        "io_in[2]": "address/data 0",
        "io_in[3]": "address/data 1",
        "io_in[4]": "address/data 2",
        "io_in[5]": "address/data 3",
        "io_in[6]": "address/data 4",
        "io_in[7]": "address/data 5",
        "io_out[0]": "digital out 0",
        "io_out[1]": "digital out 1",
        "io_out[2]": "digital out 2",
        "io_out[3]": "digital out 3",
        "io_out[4]": "",
        "io_out[5]": "",
        "io_out[6]": "",
        "io_out[7]": ""
      }
    },
    {
      "macro": "zoechip",
      "address": 31,
      "title": "heart zoe mom dad",
      "author": "zoe nguyen.  taylor",
      "description": "outputs my name and my age (zoe 4)",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/zoent/tt02-zoe-chip",
      "commit": "89e757ca1304cbefc903ed1c39ef0dab2345963c",
      "pinout": {
        "io_in[0]": "Z",
        "io_in[1]": "O",
        "io_in[2]": "E",
        "io_in[3]": "F",
        "io_in[4]": "",
        "io_in[5]": "",
        "io_in[6]": "",
        "io_in[7]": "",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": ""
      }
    },
    {
      "macro": "zymason_tinytop",
      "address": 122,
      "title": "Multiple seven-segment digit buffer",
      "author": "Zach Mason",
      "description": "Storage and variable speed readback segment digits",
      "clock_hz": 6250,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/zymason/tt02-zymason",
      "commit": "05733e1ba01250e0ee10af10cb21eea6eff5922d",
      "pinout": {
        "io_in[0]": "clock",
        "io_in[1]": "reset",
        "io_in[2]": "RW mode",
        "io_in[3]": "sel, read_clk_en",
        "io_in[4]": "pin0, clkspd0",
        "io_in[5]": "pin1, clkspd1",
        "io_in[6]": "pin2, clkspd2",
        "io_in[7]": "pin3, clkspd3",
        "io_out[0]": "segment a",
        "io_out[1]": "segment b",
        "io_out[2]": "segment c",
        "io_out[3]": "segment d",
        "io_out[4]": "segment e",
        "io_out[5]": "segment f",
        "io_out[6]": "segment g",
        "io_out[7]": "segment dp"
      }
    }
  ]
}