{
  "version": 3,
  "id": "tt05",
  "name": "Tiny Tapeout 5",
  "repo": "https://github.com/TinyTapeout/tinytapeout-05",
  "commit": "5afe0dda9bdafd1ccd85ae2cc6310d6a1590aa80",
  "updated": "2024-07-25T06:42:25Z",
  "projects": [
    {
      "macro": "tt_um_4_bit_pipeline_multiplier",
      "address": 296,
      "title": "4 Bit Pipelined Multiplier",
      "author": "Aldo",
      "description": "A Pipelined Booth Multiplier",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/crispy245/tt05-4-CSA-Bit-Pipelined-Multiplier-Crispo",
      "commit": "b8948ed9c40a1cb3d946053694562fc575f0f363",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_7segx4_clock_abhishek_top",
      "address": 43,
      "title": "7 segment clock with 4 digits",
      "author": "Kumar Abhishek",
      "description": "Multi mode clock.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/abhishek-kakkar/tt05-verilog-7seg-clock",
      "commit": "01e64af26eb0dbb951b0f9eb198718e55bef256f",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_BNNNeuron",
      "address": 238,
      "title": "Binary Neural Network (Verilog Demo)",
      "author": "Aravind Ramamoorthy",
      "description": "a single neuron in a Binarized Neural Network (BNN), performing binary multiplication with XNOR, accumulation, and sign activation.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aravindbe/tt05-BNN-demo",
      "commit": "aac69b7eb4596bf832a06b490019e4e6c11f5cad",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_EventFilter",
      "address": 15,
      "title": "Event Denoising Circuit",
      "author": "Emily Lee",
      "description": "Implementing a Denoiser for Event Based Data in Silicon",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nerfectt/tt05-verilog-demo",
      "commit": "a93dd811198e46497b828ba959e80c15ff2f460d",
      "pinout": {
        "ui[0]": "bit 1 of x",
        "ui[1]": "bit 0 of x",
        "ui[2]": "bit 1 of y",
        "ui[3]": "bit 0 of y",
        "ui[4]": "bit 1 of p - no real use",
        "ui[5]": "toggles event to be passed through if high",
        "ui[6]": "bit 1 of t",
        "ui[7]": "bit 0 of t",
        "uo[0]": "bit 1 of x",
        "uo[1]": "bit 0 of x",
        "uo[2]": "bit 1 of y",
        "uo[3]": "bit 0 of y",
        "uo[4]": "bit 1 of p",
        "uo[5]": "bit 0 of p",
        "uo[6]": "bit 1 of t",
        "uo[7]": "bit 0 of t",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_Fiona_CMU",
      "address": 69,
      "title": "Stream Cipher w/ LSR (8 bit key)",
      "author": "Fiona Fisher",
      "description": "Uses a stream cipher and linear shift register to encrypt a message.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Fiona-CMU/streamcipher",
      "commit": "781a477bfcde22dac4a5a2ee4b445fbf56bb25e3",
      "pinout": {
        "ui[0]": "bit0",
        "ui[1]": "bit1",
        "ui[2]": "bit2",
        "ui[3]": "bit3",
        "ui[4]": "bit4",
        "ui[5]": "bit5",
        "ui[6]": "bit6",
        "ui[7]": "bit7",
        "uo[0]": "bit0",
        "uo[1]": "bit1",
        "uo[2]": "bit2",
        "uo[3]": "bit3",
        "uo[4]": "bit4",
        "uo[5]": "bit5",
        "uo[6]": "bit6",
        "uo[7]": "bit7",
        "uio[0]": "inc    (indicate that input to encryption is valid)",
        "uio[1]": "encrypt",
        "uio[2]": "view   (high shows encrypted message, low shows decrpted message)",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_GrayCounter_ariz207",
      "address": 328,
      "title": "4 bit Sync Gray Code Counter",
      "author": "EconomIC Engineers",
      "description": "Using a clock, a counter will rise using gray code binary values",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ariz207/tt05_GrayCounter",
      "commit": "6e36a72f651315d39f9f5484410fcf2526e312f0",
      "pinout": {
        "ui[0]": "CLK",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "LED a",
        "uo[1]": "LED b",
        "uo[2]": "LED c",
        "uo[3]": "LED d",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_LSNN",
      "address": 8,
      "title": "Spiking LSTM Network",
      "author": "Skye Gunasekaran",
      "description": "A leaky integrate and fire neuron with adaptive threshold.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SkyeGunasekaran/TinyTapeout-ECE183",
      "commit": "38274a23769745b0e83642867d23e2f4ec09a668",
      "pinout": {
        "ui[0]": "clk     Clock input",
        "ui[1]": "rst_n   Reset signal",
        "ui[2]": "ui_in   Voltage current",
        "ui[3]": "ena     Unused",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "uo_out  Spike output",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "uio_in  Unused",
        "uio[1]": "uio_out Threshold",
        "uio[2]": "uio_oe  Unused",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_Leaky_Integrate_Fire_nfjesifb",
      "address": 3,
      "title": "Leaky Integrate and Fire Neuron Model",
      "author": "Miles Segal",
      "description": "Models the functionality of a leaky integrate and fire neuron, of the style tipically found in spiking neural networks",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nfjesifb/Leaky_Integrate_Fire_Neuron_Model",
      "commit": "6268fb50310a06c353676c3f0682d926724854df",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_MichaelBell_spi_peri",
      "address": 715,
      "title": "SPI Peripheral",
      "author": "Mike Bell",
      "description": "SPI RAM/ROM/Random source",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MichaelBell/tt05-spi-peripheral",
      "commit": "02fe913d3f8b4f3bb686408dbafe071dad55c2e5",
      "pinout": {
        "ui[0]": "SPI CLK",
        "ui[1]": "SPI CSn",
        "ui[2]": "Debug nibble select",
        "ui[3]": "Debug addr 0",
        "ui[4]": "Debug addr 1",
        "ui[5]": "Debug addr 2",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot (Set to SPI CSn)",
        "uio[0]": "SPI MOSI / D0",
        "uio[1]": "SPI MISO / D1",
        "uio[2]": "D2",
        "uio[3]": "D3",
        "uio[4]": "Debug bit 0",
        "uio[5]": "Debug bit 1",
        "uio[6]": "Debug bit 2",
        "uio[7]": "Debug bit 3"
      }
    },
    {
      "macro": "tt_um_SNN",
      "address": 168,
      "title": "Basic Spiking Neural Network",
      "author": "Abhinandan singh",
      "description": "Study of spike generation in a SNN.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/abhiucsc/SNN293",
      "commit": "6f81c2868e6be082cf107c6af6ff3217731d9c47",
      "pinout": {
        "ui[0]": "spike bit 11",
        "ui[1]": "spike bit 12",
        "ui[2]": "spike bit 13",
        "ui[3]": "unspecified",
        "ui[4]": "unspecified",
        "ui[5]": "unspecified",
        "ui[6]": "unspecified",
        "ui[7]": "unspecified",
        "uo[0]": "spike bit a",
        "uo[1]": "spike bit b",
        "uo[2]": "unspecified",
        "uo[3]": "unspecified",
        "uo[4]": "unspecified",
        "uo[5]": "unspecified",
        "uo[6]": "unspecified",
        "uo[7]": "unspecified",
        "uio[0]": "unspecified",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_adaptive_lif",
      "address": 224,
      "title": "Leaky-Integrated Fire Neuron",
      "author": "Ruhai Lin",
      "description": "Adaptive LIF Neuron",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ruhai-lin/tt05-lif-demo",
      "commit": "0fc32680da1df7c9d91f5848f07834d42d6b30f5",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane a",
        "uo[1]": "membrane b",
        "uo[2]": "membrane c",
        "uo[3]": "membrane d",
        "uo[4]": "membrane e",
        "uo[5]": "membrane f",
        "uo[6]": "membrane g",
        "uo[7]": "membrane h",
        "uio[0]": "adaptive_threshold_enable bit 0",
        "uio[1]": "adaptive_beta_enable bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "spike bit 7"
      }
    },
    {
      "macro": "tt_um_algofoogle_vga_spi_rom",
      "address": 645,
      "title": "vga_spi_rom",
      "author": "algofoogle (Anton Maurovic)",
      "description": "Test reading/buffering/displaying SPI flash ROM data on VGA display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/algofoogle/tt05-vga-spi-rom",
      "commit": "9208ed836d03bb5593d383a55a8ddcab464ed9d2",
      "pinout": {
        "ui[0]": "In: vga_mode",
        "ui[1]": "In: rst_mode",
        "ui[2]": "In: reg_outs",
        "ui[3]": "In: N/C",
        "ui[4]": "In: N/C",
        "ui[5]": "In: Test_in[0]",
        "ui[6]": "In: Test_in[1]",
        "ui[7]": "In: Test_in[2]",
        "uo[0]": "Out: red[1]",
        "uo[1]": "Out: green[1]",
        "uo[2]": "Out: blue[1]",
        "uo[3]": "Out: vsync",
        "uo[4]": "Out: red[0]",
        "uo[5]": "Out: green[0]",
        "uo[6]": "Out: blue[0]",
        "uo[7]": "Out: hsync",
        "uio[0]": "Out: SPI /CS",
        "uio[1]": "Out: SPI io[0] / MOSI",
        "uio[2]": "Out: SPI io[1] / MISO",
        "uio[3]": "Out: SPI SCLK",
        "uio[4]": "Out: Test_out",
        "uio[5]": "Out: SPI /RST",
        "uio[6]": "Out: SPI io[2] (/WP)",
        "uio[7]": "Out: SPI io[3] (/HLD)"
      }
    },
    {
      "macro": "tt_um_alu_chip",
      "address": 71,
      "title": "ALU Chip",
      "author": "Devan Grover & Siddharth Kunisetty",
      "description": "ALU Chip that outputs 7 Segment",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/devgro/TinyTapeoutDemo",
      "commit": "15677d5cca65ba692401ff06c79aca5e24d5eae5",
      "pinout": {
        "ui[0]": "alu_in_1 [7:4] - First input into the ALU",
        "ui[1]": "alu_in_2 [3:0] - Second input into the ALU",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "7 Segment Out [6:0] - Output to the 7 Segment display",
        "uo[1]": "None [7] - NC",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "alu_out [7:4] (OUT) - Output BCD value of operation",
        "uio[1]": "alu_op_in [3:0] (IN) - Input operation for the ALU (ADD, SUBTRACT, AND, OR, EQUALS, NOT, GT, LT)",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_asinghani_tinyscanchain_tt05",
      "address": 232,
      "title": "tinyscanchain Test Design",
      "author": "Anish Singhani",
      "description": "Test design for tinyscanchain, based on seven segment seconds design",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/asinghani/tinyscanchain-tt05",
      "commit": "77b415d0d0663df366bd7ba123b5f154bf2f62fe",
      "pinout": {
        "ui[0]": "enable",
        "ui[1]": "scan chain input",
        "ui[2]": "scan chain enable",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "scan chain output",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_async_proc_paulschulz",
      "address": 136,
      "title": "Asynchronous  Parallel Processor Demonstrator",
      "author": "Paul Schulz",
      "description": "Implementation for an Asynchronous Parallel Processor",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/PaulSchulz/tt05-async-proc",
      "commit": "9516753ca5af67004b727bf08de23b58e48b912d",
      "pinout": {
        "ui[0]": "input bit 0",
        "ui[1]": "input bit 1",
        "ui[2]": "input bit 2",
        "ui[3]": "input bit 3",
        "ui[4]": "load input 1 (right)",
        "ui[5]": "load input 2 (up)",
        "ui[6]": "load input 3 (left)",
        "ui[7]": "load input 4 (down)",
        "uo[0]": "segment a (up)",
        "uo[1]": "segment b (right)",
        "uo[2]": "segment c",
        "uo[3]": "segment d (processing)",
        "uo[4]": "segment e",
        "uo[5]": "segment f (left)",
        "uo[6]": "segment g (down)",
        "uo[7]": "dot       (data ready)",
        "uio[0]": "bit 0 (not used)",
        "uio[1]": "bit 1 (not used)",
        "uio[2]": "bit 2 (not used)",
        "uio[3]": "bit 3 (not used)",
        "uio[4]": "bit 4 (not used)",
        "uio[5]": "bit 5 (not used)",
        "uio[6]": "bit 6 (not used)",
        "uio[7]": "bit 7 (not used)"
      }
    },
    {
      "macro": "tt_um_blink",
      "address": 647,
      "title": "RO and counter",
      "author": "akita11",
      "description": "8 inv and counter.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/akita11/tt05-verilog-demo",
      "commit": "d68562946f5f30478278cdf49efd6be91d16ee8b",
      "pinout": {
        "ui[0]": "inv1",
        "ui[1]": "inv2",
        "ui[2]": "inv3",
        "ui[3]": "inv4",
        "ui[4]": "inv5",
        "ui[5]": "inv6",
        "ui[6]": "inv7",
        "ui[7]": "inv8",
        "uo[0]": "counter[15]",
        "uo[1]": "counter[14]",
        "uo[2]": "counter[13]",
        "uo[3]": "counter[12]",
        "uo[4]": "counter[11]",
        "uo[5]": "counter[10]",
        "uo[6]": "counter[9]",
        "uo[7]": "counter[8]",
        "uio[0]": "output of inv1",
        "uio[1]": "output of inv2",
        "uio[2]": "output of inv3",
        "uio[3]": "output of inv4",
        "uio[4]": "output of inv5",
        "uio[5]": "output of inv6",
        "uio[6]": "output of inv7",
        "uio[7]": "output of inv8"
      }
    },
    {
      "macro": "tt_um_btflv_8bit_fp_adder",
      "address": 169,
      "title": "8 bit floating point adder",
      "author": "Philip Mohr",
      "description": "Adds two 8 Bit floating point numbers",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/BTFLV/tt05-btflv-8bit-fp-adder",
      "commit": "4653c8a44301cb93a76b5b7e21491d1ad43890b0",
      "pinout": {
        "ui[0]": "Float a Mant[0]",
        "ui[1]": "Float a Mant[1]",
        "ui[2]": "Float a Mant[2]",
        "ui[3]": "Float a Exp[0]",
        "ui[4]": "Float a Exp[1]",
        "ui[5]": "Float a Exp[2]",
        "ui[6]": "Float a Exp[3]",
        "ui[7]": "Float a Sign",
        "uo[0]": "Float out Mant[0]",
        "uo[1]": "Float out Mant[1]",
        "uo[2]": "Float out Mant[2]",
        "uo[3]": "Float out Exp[0]",
        "uo[4]": "Float out Exp[1]",
        "uo[5]": "Float out Exp[2]",
        "uo[6]": "Float out Exp[3]",
        "uo[7]": "Float out Sign",
        "uio[0]": "Float b Mant[0]",
        "uio[1]": "Float b Mant[1]",
        "uio[2]": "Float b Mant[2]",
        "uio[3]": "Float b Exp[0]",
        "uio[4]": "Float b Exp[1]",
        "uio[5]": "Float b Exp[2]",
        "uio[6]": "Float b Exp[3]",
        "uio[7]": "Float b Sign"
      }
    },
    {
      "macro": "tt_um_carlosgs99_cro_udg",
      "address": 233,
      "title": "6 digit chronometer.",
      "author": "Carlos Guerra & Marco Gurrola",
      "description": "6 digit chronometer. Displays 2 digits for minutes, 2 digits for seconds and 2 digits for hundredths of a second.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/CarlosGS99/Chronometer_UdG",
      "commit": "612041208c70ddb0600da3f12ed17e25712a11db",
      "pinout": {
        "ui[0]": "bt_ent (start button)",
        "ui[1]": "reset",
        "ui[2]": "clk",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "Display cathode 1",
        "uo[1]": "Display cathode 2",
        "uo[2]": "Display cathode 3",
        "uo[3]": "Display cathode 4",
        "uo[4]": "Display cathode 5",
        "uo[5]": "Display cathode 6",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "Segment a",
        "uio[1]": "Segment b",
        "uio[2]": "Segment c",
        "uio[3]": "Segment d",
        "uio[4]": "Segment e",
        "uio[5]": "Segment f",
        "uio[6]": "Segment g",
        "uio[7]": "dot"
      }
    },
    {
      "macro": "tt_um_cejmu",
      "address": 200,
      "title": "4-Bit ALU",
      "author": "CE JMU Wuerzburg",
      "description": "A simple 4-Bit ALU which contains two types of adders, multipliers, a comparator and a barrel-shifter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/CEJMU/tt05-alu",
      "commit": "50404a5496e2e9d681312b444bf8ceac738c35d4",
      "pinout": {
        "ui[0]": "a[0]",
        "ui[1]": "a[1]",
        "ui[2]": "a[2]",
        "ui[3]": "a[3]",
        "ui[4]": "b[0]",
        "ui[5]": "b[1]",
        "ui[6]": "b[2] (0 = shift right, 1 = shift left)",
        "ui[7]": "b[3]",
        "uo[0]": "s[0] (1, if $a > b$)",
        "uo[1]": "s[1] (1, if $a < b$)",
        "uo[2]": "s[2] (1, if $a == b$)",
        "uo[3]": "s[3]",
        "uo[4]": "s[4]",
        "uo[5]": "s[5]",
        "uo[6]": "s[6]",
        "uo[7]": "s[7]",
        "uio[0]": "opcode[0]",
        "uio[1]": "opcode[1]",
        "uio[2]": "opcode[2]",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chatgpt_snn_mtomlin5",
      "address": 450,
      "title": "ChatGPT designed Spiking Neural Network",
      "author": "Michael Tomlinson, Joe Lie, ChatGPT-4, Andreas Andreou - mtomlin5@jh.edu",
      "description": "SPI Programmable spiking neural network with 6 LIF neurons ( 3 input - 3 output ) with fully programmable weights (8-bit)",
      "clock_hz": 50000000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/AndreouLab/tinytapeout_05_chatgpt_snn",
      "commit": "f73eda61cca4b5c9f67d1e1f83e21a5c3aa6a1cd",
      "pinout": {
        "ui[0]": "ui_in[7] - unused",
        "ui[1]": "ui_in[6] - unused",
        "ui[2]": "ui_in[5] - spikes_in[2]",
        "ui[3]": "ui_in[4] - spikes_in[1]",
        "ui[4]": "ui_in[3] - spikes_in[0]",
        "ui[5]": "ui_in[2] - copi",
        "ui[6]": "ui_in[1] - cs_n",
        "ui[7]": "ui_in[0] - sclk",
        "uo[0]": "uo_out[7] - unused",
        "uo[1]": "uo_out[6] - unused",
        "uo[2]": "uo_out[5] - unused",
        "uo[3]": "uo_out[4] - unused",
        "uo[4]": "uo_out[3] - cipo",
        "uo[5]": "uo_out[2] - spikes_out[2]",
        "uo[6]": "uo_out[1] - spikes_out[1]",
        "uo[7]": "uo_out[0] - spikes_out[0]",
        "uio[0]": "GPIO pins are wired to outputs and driven high (unused by the design).",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chip_inventor_music__6_bit_count",
      "address": 294,
      "title": "6 bit Counter and Piano Music created by Chip Inventor",
      "author": "Matheus",
      "description": "Chip Inventor",
      "clock_hz": 27000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/matheus-VBLabs/tt05_chip_inventor_01",
      "commit": "258a08bf220aaca31a70845809fee9c43a6d5e54",
      "pinout": {
        "ui[0]": "btn1",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "buzzer",
        "uo[1]": "l1",
        "uo[2]": "l2",
        "uo[3]": "l3",
        "uo[4]": "l4",
        "uo[5]": "led0",
        "uo[6]": "led1",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_chip_rom",
      "address": 0,
      "title": "Chip ROM",
      "author": "Uri Shaked",
      "description": "ROM with information about the chip",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt-chip-rom",
      "commit": "dfc689ff36067623d440d764daa6bde27bc80591",
      "pinout": {
        "ui[0]": "addr[0]",
        "ui[1]": "addr[1]",
        "ui[2]": "addr[2]",
        "ui[3]": "addr[3]",
        "ui[4]": "addr[4]",
        "ui[5]": "addr[5]",
        "ui[6]": "addr[6]",
        "ui[7]": "addr[7]",
        "uo[0]": "data[0]",
        "uo[1]": "data[1]",
        "uo[2]": "data[2]",
        "uo[3]": "data[3]",
        "uo[4]": "data[4]",
        "uo[5]": "data[5]",
        "uo[6]": "data[6]",
        "uo[7]": "data[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_clkdiv",
      "address": 330,
      "title": "Clock and Random Number Gen",
      "author": "Austin Lo",
      "description": "Divider up it 16bit input and a simple random number",
      "clock_hz": 200000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/lolo0827/tapeout-v2",
      "commit": "1b1dd948b81e3498f1f4fbca49ddf4057e316dbc",
      "pinout": {
        "ui[0]": "division input bit 0",
        "ui[1]": "division input bit 1",
        "ui[2]": "division input bit 2",
        "ui[3]": "division input bit 3",
        "ui[4]": "division input bit 4",
        "ui[5]": "division input bit 5",
        "ui[6]": "division input bit 6",
        "ui[7]": "division input bit 7",
        "uo[0]": "uo_out[0] clock output",
        "uo[1]": "Random Number Output",
        "uo[2]": "Random Number Output",
        "uo[3]": "Random Number Output",
        "uo[4]": "Random Number Output",
        "uo[5]": "Random Number Output",
        "uo[6]": "Random Number Output",
        "uo[7]": "Random Number Output",
        "uio[0]": "division input bit 8",
        "uio[1]": "division input bit 9",
        "uio[2]": "division input bit 10",
        "uio[3]": "division input bit 11",
        "uio[4]": "division input bit 12",
        "uio[5]": "division input bit 13",
        "uio[6]": "division input bit 14",
        "uio[7]": "division input bit 15"
      }
    },
    {
      "macro": "tt_um_czlucius_alu",
      "address": 237,
      "title": "4 Bit ALU",
      "author": "Lucius Chee",
      "description": "A simple 4-bit, 13 instruction, arithmetic logic unit.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/czlucius/tt05_alu",
      "commit": "5541346574795324e26e6c10d103152cf40a38e9",
      "pinout": {
        "ui[0]": "x3",
        "ui[1]": "x2",
        "ui[2]": "x1",
        "ui[3]": "x0",
        "ui[4]": "y3",
        "ui[5]": "y2",
        "ui[6]": "y1",
        "ui[7]": "y0",
        "uo[0]": "output 7",
        "uo[1]": "output 6",
        "uo[2]": "output 5",
        "uo[3]": "output 4",
        "uo[4]": "output 3",
        "uo[5]": "output 2",
        "uo[6]": "output 1",
        "uo[7]": "output 0",
        "uio[0]": "instruction select bit 0",
        "uio[1]": "instruction select bit 1",
        "uio[2]": "instruction select bit 2",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_devinatkin_stopwatch",
      "address": 643,
      "title": "Stop Watch",
      "author": "Devin Atkin",
      "description": "Stop Watch System",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/devinatkin/tt05-stopwatch",
      "commit": "a123d0c84ade3c0b7a34cfd54ab1722cac27e4a7",
      "pinout": {
        "ui[0]": "start button",
        "ui[1]": "stop button",
        "ui[2]": "soft reset button",
        "ui[3]": "inc minute button",
        "ui[4]": "inc second button",
        "ui[5]": "inc switch",
        "ui[6]": "mode switch",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "",
        "uio[0]": "anode 1",
        "uio[1]": "anode 2",
        "uio[2]": "anode 3",
        "uio[3]": "anode 4",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_diadatp_spigot_e",
      "address": 12,
      "title": "e Spigot",
      "author": "diadatp",
      "description": "Spigot algorithm for calculating the digits of e",
      "clock_hz": 350,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/diadatp/tt05_spigot_e",
      "commit": "7f628debb15e34c2ac32b8b92ed4a473608642d3",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "digit_2[0]",
        "uo[1]": "digit_2[1]",
        "uo[2]": "digit_2[2]",
        "uo[3]": "digit_2[3]",
        "uo[4]": "digit_3[0]",
        "uo[5]": "digit_3[1]",
        "uo[6]": "digit_3[2]",
        "uo[7]": "digit_3[3]",
        "uio[0]": "digit_0[0]",
        "uio[1]": "digit_0[1]",
        "uio[2]": "digit_0[2]",
        "uio[3]": "digit_0[3]",
        "uio[4]": "digit_1[0]",
        "uio[5]": "digit_1[1]",
        "uio[6]": "digit_1[2]",
        "uio[7]": "digit_1[3]"
      }
    },
    {
      "macro": "tt_um_digital_clock_sellicott",
      "address": 322,
      "title": "Digital Desk Clock",
      "author": "Samuel Ellicott",
      "description": "Simple Digital Clock Project.",
      "clock_hz": 5000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/sellicott/sellicott_tt5_digital_clock",
      "commit": "65279706284327df645cfe9cdf98eec6ace2c5f2",
      "pinout": {
        "ui[0]": "refclk",
        "ui[1]": "use_refclk",
        "ui[2]": "fast_set",
        "ui[3]": "hours_set",
        "ui[4]": "minutes_set",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "serial_data",
        "uo[1]": "serial_latch",
        "uo[2]": "serial_clk",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_dinogame",
      "address": 458,
      "title": "VGA Dino Game",
      "author": "Anish Singhani",
      "description": "An endless-runner game implemented on a VGA monitor",
      "clock_hz": 0,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/asinghani/dinogame-tt05",
      "commit": "1260f6cce9c49f074d378ede868ff53714f2e17d",
      "pinout": {
        "ui[0]": "jump btn",
        "ui[1]": "halt btn",
        "ui[2]": "debug btn",
        "ui[3]": "mode btn",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "VGA R0",
        "uo[1]": "VGA G0",
        "uo[2]": "VGA B0",
        "uo[3]": "VGA vsync",
        "uo[4]": "VGA R1",
        "uo[5]": "VGA G1",
        "uo[6]": "VGA B1",
        "uo[7]": "VGA hsync",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_dlmiles_tt05_i2c_bert",
      "address": 130,
      "title": "I2C BERT",
      "author": "Darryl Miles",
      "description": "I2C Bit Error Rate Test",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dlmiles/tt05-i2c-bert",
      "commit": "7982c7664b5477d86e7aa69df5249b91c463f9f4",
      "pinout": {
        "ui[0]": "i2cSampleDivisor bit0",
        "ui[1]": "i2cSampleDivisor bit1",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "I2C SCL (bidi)",
        "uio[3]": "I2C SDA (bidi)",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": "powerOnSense (out)"
      }
    },
    {
      "macro": "tt_um_factory_test",
      "address": 1,
      "title": "TinyTapeout 05 Factory Test",
      "author": "Sylvain Munaut",
      "description": "Factory test module",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-factory-test",
      "commit": "901461a50ef7aeda53262e030f4511c072ff5bf8",
      "pinout": {
        "ui[0]": "sel",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "data_o[0]",
        "uo[1]": "data_o[1]",
        "uo[2]": "data_o[2]",
        "uo[3]": "data_o[3]",
        "uo[4]": "data_o[4]",
        "uo[5]": "data_o[5]",
        "uo[6]": "data_o[6]",
        "uo[7]": "data_o[7]",
        "uio[0]": "data_i[0] / counter_o[0]",
        "uio[1]": "data_i[1] / counter_o[1]",
        "uio[2]": "data_i[2] / counter_o[2]",
        "uio[3]": "data_i[3] / counter_o[3]",
        "uio[4]": "data_i[4] / counter_o[4]",
        "uio[5]": "data_i[5] / counter_o[5]",
        "uio[6]": "data_i[6] / counter_o[6]",
        "uio[7]": "data_i[7] / counter_o[7]"
      }
    },
    {
      "macro": "tt_um_flappy_vga_cutout1",
      "address": 134,
      "title": "Flappy VGA",
      "author": "Daniel Robinson",
      "description": "A simple flappy bird clone with a button input and 640x480 VGA output. 25MHz clock required.",
      "clock_hz": 25000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Cutout1/tt05-flappy-vga",
      "commit": "ba3ea911955f88c4ff137a878be4bf49c4e67658",
      "pinout": {
        "ui[0]": "Button",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "R1",
        "uo[1]": "G1",
        "uo[2]": "B1",
        "uo[3]": "vsync",
        "uo[4]": "R0",
        "uo[5]": "G0",
        "uo[6]": "B0",
        "uo[7]": "hsync",
        "uio[0]": "score[0]",
        "uio[1]": "score[1]",
        "uio[2]": "score[2]",
        "uio[3]": "score[3]",
        "uio[4]": "score[4]",
        "uio[5]": "score[5]",
        "uio[6]": "score[6]",
        "uio[7]": "score[7]"
      }
    },
    {
      "macro": "tt_um_freq_hcohensa",
      "address": 33,
      "title": "Frequency Encoder/Decoder",
      "author": "Hannah Cohen-Sandler",
      "description": "Encodes data into frequency variations and then decodes it back into its original form.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/hcohensa/tt05-freq-enc-dec-chip",
      "commit": "65f90bc5731e83e07de4229053017cb354b6904c",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "segment h",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_frequency_counter",
      "address": 711,
      "title": "Frequency counter",
      "author": "Matt Venn",
      "description": "measured frequency of a signal on pin 0 and displays on the 7 segment display",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt-frequency-counter",
      "commit": "5d49b5e2bcfa159b4f6a87763782081ddbf7cca2",
      "pinout": {
        "ui[0]": "signal",
        "ui[1]": "debug mode (on will put debug signals on bidirectional outputs)",
        "ui[2]": "load new period. toggle this to register the value in the bidirectional inputs",
        "ui[3]": "",
        "ui[4]": "count period bit 11",
        "ui[5]": "count period bit 10",
        "ui[6]": "count period bit 09",
        "ui[7]": "count period bit 08",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "digit select",
        "uio[0]": "count period bit 07 or debug edge  bit 2",
        "uio[1]": "count period bit 06 or debug edge  bit 1",
        "uio[2]": "count period bit 05 or debug edge  bit 0",
        "uio[3]": "count period bit 04 or debug clock bit 2",
        "uio[4]": "count period bit 03 or debug clock bit 1",
        "uio[5]": "count period bit 02 or debug clock bit 0",
        "uio[6]": "count period bit 01 or debug state bit 1",
        "uio[7]": "count period bit 00 or debug state bit 0"
      }
    },
    {
      "macro": "tt_um_gchenfc_seven_segment_gerry",
      "address": 203,
      "title": "7-segment Name Display",
      "author": "Gerry Chen",
      "description": "Displays names on the 7-segment display one at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gchenfc/Gerrys-Custom-ASIC-tt05",
      "commit": "e907c1b552982d72dec24d8b3f45c489726c94a6",
      "pinout": {
        "ui[0]": "name bit 2",
        "ui[1]": "name bit 1",
        "ui[2]": "name bit 0",
        "ui[3]": "clock divider bit 23",
        "ui[4]": "clock divider bit 22",
        "ui[5]": "clock divider bit 21",
        "ui[6]": "clock divider bit 1",
        "ui[7]": "clock divider bit 0",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_gfg_development_tros",
      "address": 398,
      "title": "TROS",
      "author": "Gerrit Grutzeck",
      "description": "Three different ring oscillator, with different temperature dependence",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/gfg-development/tt05-tros",
      "commit": "a3539c8e208e0ee51bc57be128bdec1e672c00d6",
      "pinout": {
        "ui[0]": "latch counter",
        "ui[1]": "counter reset",
        "ui[2]": "transfer counter",
        "ui[3]": "counter select bit 0",
        "ui[4]": "counter select bit 1",
        "ui[5]": "select latch counter (sync/async)",
        "ui[6]": "frequency divider select bit 0",
        "ui[7]": "frequency divider select bit 1",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "serial data stream",
        "uo[5]": "divided clock of oscillator 0",
        "uo[6]": "divided clock of oscillator 1",
        "uo[7]": "divided clock of oscillator 2",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_gharenthi_top",
      "address": 167,
      "title": "STDP Neuron",
      "author": "William Bodeau",
      "description": "A single LIF neuron with post-synaptic STDP learning.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Gharenthi/tt05-verilog-fork-stdp",
      "commit": "35f99389c62c71f4a5edd015169d7eb2669a8ff9",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_hadirkhan10_lif_neuron",
      "address": 175,
      "title": "Leaky Integrate-and-Fire Neuron",
      "author": "Muhammad Hadir Khan",
      "description": "A Leaky Integrate-and-Fire Neuron that mimics the biological neuron and is configurable from the outside world",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/hadirkhan10/tt05-leaky-neuron",
      "commit": "a4184ec4cb3e3522bc2954ac07334cb984edc824",
      "pinout": {
        "ui[0]": "configure beta, threshold and current",
        "ui[1]": "configure beta, threshold and current",
        "ui[2]": "configure beta, threshold and current",
        "ui[3]": "configure beta, threshold and current",
        "ui[4]": "configure beta, threshold and current",
        "ui[5]": "configure beta, threshold and current",
        "ui[6]": "configure beta, threshold and current",
        "ui[7]": "configure beta, threshold and current",
        "uo[0]": "membrane potential",
        "uo[1]": "membrane potential",
        "uo[2]": "membrane potential",
        "uo[3]": "membrane potential",
        "uo[4]": "membrane potential",
        "uo[5]": "membrane potential",
        "uo[6]": "membrane potential",
        "uo[7]": "membrane potential",
        "uio[0]": "spike output",
        "uio[1]": "configure the state",
        "uio[2]": "configure the state",
        "uio[3]": "configure the state",
        "uio[4]": "configure the state",
        "uio[5]": "configure the state",
        "uio[6]": "configure the state",
        "uio[7]": "configure the state"
      }
    },
    {
      "macro": "tt_um_haozhezhu_top",
      "address": 324,
      "title": "4-bit FIFO/LIFO",
      "author": "Haozhe Zhu",
      "description": "A FIFO/LIFO memory",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/HaozheZhu/tt05-HZ",
      "commit": "829012eaf4d29c8188452c9e189f9a27ef0c8727",
      "pinout": {
        "ui[0]": "Data In [0]",
        "ui[1]": "Data In [1]",
        "ui[2]": "Data In [2]",
        "ui[3]": "Data In [3]",
        "ui[4]": "Write Enable",
        "ui[5]": "Read Enable",
        "ui[6]": "Mode (FIFO=0)",
        "ui[7]": "Manual Clock",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "Data Out [0]",
        "uio[1]": "Data Out [1]",
        "uio[2]": "Data Out [2]",
        "uio[3]": "Data Out [3]",
        "uio[4]": "Full Flag Out",
        "uio[5]": "Empty Flag Out",
        "uio[6]": "Output Valid Flag Out",
        "uio[7]": "Display Overflow Flag Out"
      }
    },
    {
      "macro": "tt_um_hh",
      "address": 590,
      "title": "Hodgkin-Huxley Neuron",
      "author": "Jason Eshraghian",
      "description": "Implement a Hodgkin-Huxley neuron in silicon.",
      "clock_hz": 20000000,
      "tiles": "4x2",
      "analog_pins": [],
      "repo": "https://github.com/jeshraghian/tt05-hodgkin-huxley",
      "commit": "dd40b6b0cc9b478a1d50a1410b79e66d490d5b49",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "membrane potential output bit i",
        "uio[1]": "membrane potential fractional output bit j",
        "uio[2]": "membrane potential fractional output bit k",
        "uio[3]": "membrane potential fractional output bit l",
        "uio[4]": "membrane potential fractional output bit m",
        "uio[5]": "membrane potential fractional output bit n",
        "uio[6]": "membrane potential fractional output bit o",
        "uio[7]": "membrane potential fractional output bit p"
      }
    },
    {
      "macro": "tt_um_himanshu5_prog_chipTop",
      "address": 460,
      "title": "Dual Compute Unit",
      "author": "Himanshu Yadav",
      "description": "ComputeUnit implementation",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/himanshu5-prog/tt_um_myChip",
      "commit": "bb0eb2bf0ea005d874a66c419a903861dbd34ccb",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_hls_lfi",
      "address": 11,
      "title": "Simple Leaky Integrate and Fire (LIF) Neuron",
      "author": "Phillip Marlowe",
      "description": "Given input current, spike when threshold is reached (also assume any files with the letters LFI should be LIF)",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/phillipmmarlowe/tt05-verilog-HLS-LFI",
      "commit": "9c94a972acc3068b87983cb6305d8aa983c45dbf",
      "pinout": {
        "ui[0]": "clk_i is the clock",
        "ui[1]": "current_i is the current input to the LFI neuron",
        "ui[2]": "rst_n is for reset",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "nu_o is the next membrane potential",
        "uo[1]": "spike_o is the single bit to show when the neuron is firing",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "msb bit of uio_oe is connected to spike_o",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_hodgkin_huxley",
      "address": 45,
      "title": "Hodgkin-Huxley Chip Design",
      "author": "Ethan Mulle",
      "description": "Implements the Hodgkin-Huxley model ",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/etmulle/ece293-chip-design",
      "commit": "a337028b168a0581a2ff6ad6c0c920b94fb43b78",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_htfab_cell_tester",
      "address": 142,
      "title": "Standard cell generator and tester",
      "author": "htfab",
      "description": "Contains a sky130 compatible standard cell generator, a few example cells generated, and a TinyTapeout design for testing them",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/htfab/cell-tester",
      "commit": "a35fa3690e5f3678c355685496942a1ea812b540",
      "pinout": {
        "ui[0]": "A0/A/D",
        "ui[1]": "A1/B/GATE/CLK",
        "ui[2]": "S/C/RESET_B",
        "ui[3]": "mode bit",
        "ui[4]": "trigger bit",
        "ui[5]": "clock divider bit 0",
        "ui[6]": "clock divider bit 1",
        "ui[7]": "clock divider bit 2",
        "uo[0]": "foundry mux2i direct",
        "uo[1]": "custom mux2i direct",
        "uo[2]": "foundry maj3 direct",
        "uo[3]": "custom maj3 direct",
        "uo[4]": "foundry dlrtp direct",
        "uo[5]": "custom dlrtp direct",
        "uo[6]": "foundry dfrtp direct",
        "uo[7]": "custom dfrtp direct",
        "uio[0]": "foundry mux2i instrumented",
        "uio[1]": "custom mux2i instrumented",
        "uio[2]": "foundry maj3 instrumented",
        "uio[3]": "custom maj3 instrumented",
        "uio[4]": "foundry dlrtp instrumented",
        "uio[5]": "custom dlrtp instrumented",
        "uio[6]": "foundry dfrtp instrumented",
        "uio[7]": "custom dfrtp instrumented"
      }
    },
    {
      "macro": "tt_um_if",
      "address": 9,
      "title": "Integrate-and-Fire Neuron.",
      "author": "Kembay  Assel",
      "description": "Implement an IF neuron in silicon.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mountains-high/tt05-mountains-high-if",
      "commit": "22dc53d420e995cbb4803be2f0b0bedaef9bdf87",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 0",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_ja1tye_sound_generator",
      "address": 256,
      "title": "Wavetable Sound Generator",
      "author": "Ryota Suzuki",
      "description": "Small wavetable/PSG type sound generator with I2S output",
      "clock_hz": 50000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/JA1TYE/tt05-TYE-tone-generator",
      "commit": "cf77ffb47429130d903c3fff620263bfc4022d7b",
      "pinout": {
        "ui[0]": "SPI CS Input",
        "ui[1]": "SPI CLK Input",
        "ui[2]": "SPI MOSI Input",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "I2S Bit Clock",
        "uo[1]": "I2S Word Select",
        "uo[2]": "I2S Data",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_jaylennee_wta_pwm",
      "address": 258,
      "title": "PWM signal generation with Winner-Take-All selection",
      "author": "Ruibin Mao",
      "description": "8-channel 12-bit PWM signal generation. Time-domain Winner-Take-All (WTA) able to find smallest PWM signal and k-smallest signal",
      "clock_hz": 20000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/Jaylenne/tt05-wta-pwm",
      "commit": "fffe6a5de507f2de92762ce76da8c18b38ebea6f",
      "pinout": {
        "ui[0]": "SPI 1 SS",
        "ui[1]": "SPI 2 SS",
        "ui[2]": "SPI 1 MOSI",
        "ui[3]": "SPI 2 MOSI",
        "ui[4]": "PWM Trigger",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "SPI 1 MISO",
        "uo[1]": "SPI 2 MISO",
        "uo[2]": "PWM[0] signal",
        "uo[3]": "PWM[0] after cross-domain synchronization",
        "uo[4]": "PWM[0] falling edge detection",
        "uo[5]": "PWM[7] signal",
        "uo[6]": "PWM[7] after cross-domain synchronization",
        "uo[7]": "PWM[7] falling edge detection",
        "uio[0]": "External PWM signal 0",
        "uio[1]": "External PWM signal 1",
        "uio[2]": "External PWM signal 2",
        "uio[3]": "External PWM signal 3",
        "uio[4]": "External PWM signal 4",
        "uio[5]": "External PWM signal 5",
        "uio[6]": "External PWM signal 6",
        "uio[7]": "External PWM signal 7"
      }
    },
    {
      "macro": "tt_um_jeffdi_seven_segment_seconds",
      "address": 109,
      "title": "7 segment seconds - count down",
      "author": "Jeff DiCorpo",
      "description": "Count down from 9, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jeffdi/tt-test",
      "commit": "a33fd32add90465c932d42686de09f86f1bfe548",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_jkprz",
      "address": 171,
      "title": "Cheap and quick STDP",
      "author": "J. Przepioski",
      "description": "Due to schedule: Implement most basic functional STDP",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jkprz/tt05-verilog-demo",
      "commit": "a60dbdfe63a790992a29401f6162e9fb0fffeef0",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 0",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_jleugeri_ticktocktokens",
      "address": 7,
      "title": "TickTockTokens",
      "author": "Johannes Leugering",
      "description": "Implementation of a processor that uses Tick Tock Tokens for event-based computation.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jleugeri/tnt-ticktocktokens",
      "commit": "54e6e788bd6c1116393e49a73cb9360eefd6247e",
      "pinout": {
        "ui[0]": "instruction bit 0",
        "ui[1]": "instruction bit 1",
        "ui[2]": "instruction bit 2",
        "ui[3]": "instruction bit 3",
        "ui[4]": "(reserved)",
        "ui[5]": "(reserved)",
        "ui[6]": "(reserved)",
        "ui[7]": "(reserved)",
        "uo[0]": "data bit 0 | token start flag",
        "uo[1]": "data bit 1 | token stop flag",
        "uo[2]": "data bit 2",
        "uo[3]": "data bit 3",
        "uo[4]": "data bit 4",
        "uo[5]": "data bit 5",
        "uo[6]": "data bit 6",
        "uo[7]": "data bit 7",
        "uio[0]": "data bit 0",
        "uio[1]": "data bit 1",
        "uio[2]": "data bit 2",
        "uio[3]": "data bit 3",
        "uio[4]": "data bit 4",
        "uio[5]": "data bit 5",
        "uio[6]": "data bit 6",
        "uio[7]": "data bit 7 | good/bad token flag (0 = good, 1 = bad)"
      }
    },
    {
      "macro": "tt_um_jmadden173_delta_modulation",
      "address": 65,
      "title": "Delta Modulation Spike Encoding",
      "author": "John Madden",
      "description": "Delta Modulation for Spiking Neural Networks (SNN) based on snnTorch's implementation.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jmadden173/tt05-delta-modulation",
      "commit": "2d7e512d73ae786d8af4fbfa57ebd03cf27db90d",
      "pinout": {
        "ui[0]": "input threshold bit 0",
        "ui[1]": "input threshold bit 1",
        "ui[2]": "input threshold bit 2",
        "ui[3]": "input threshold bit 3",
        "ui[4]": "input data bit 0",
        "ui[5]": "input data bit 1",
        "ui[6]": "input data bit 2",
        "ui[7]": "input data bit 3",
        "uo[0]": "spike bit 0",
        "uo[1]": "spike bit 1",
        "uo[2]": "nc, constant output low",
        "uo[3]": "nc, constant output low",
        "uo[4]": "reg prev bit 0",
        "uo[5]": "reg prev bit 1",
        "uo[6]": "reg prev bit 2",
        "uo[7]": "reg prev bit 3",
        "uio[0]": "parameter off_spike",
        "uio[1]": "input load_prev bit",
        "uio[2]": "nc, constant output low",
        "uio[3]": "nc, constant output low",
        "uio[4]": "input force_prev bit 0",
        "uio[5]": "input force_prev bit 1",
        "uio[6]": "input force_prev bit 2",
        "uio[7]": "input force_prev bit 3"
      }
    },
    {
      "macro": "tt_um_joerdsonsilva_top",
      "address": 260,
      "title": "Multimode Modem",
      "author": "Joerdson Silva",
      "description": "Performs digital modulation and demodulation in amplitude, frequency and phase schemes.",
      "clock_hz": 50000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/joerdsonsilva/tt05-multimode-modem",
      "commit": "52c0a4d15d5cdab9e2427b46f449a3c5c9cd4fdb",
      "pinout": {
        "ui[0]": "clock",
        "ui[1]": "reset",
        "ui[2]": "sel_0",
        "ui[3]": "sel_1",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "mod_out_0",
        "uo[1]": "mod_out_1",
        "uo[2]": "mod_out_2",
        "uo[3]": "mod_out_3",
        "uo[4]": "mod_out_4",
        "uo[5]": "mod_out_5",
        "uo[6]": "mod_out_6",
        "uo[7]": "demod_out",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_kianV_rv32ima_uLinux_SoC",
      "address": 654,
      "title": "KianV uLinux SoC",
      "author": "Hirosh Dabui",
      "description": "A RISC-V ASIC that can boot \u03bcLinux.",
      "clock_hz": 0,
      "tiles": "8x2",
      "analog_pins": [],
      "repo": "https://github.com/splinedrive/KianV_rv32ia_uLinux_SoC",
      "commit": "78f2bf1d2f72fff22c8710043218966784df4d27",
      "pinout": {
        "ui[0]": "uart_rx",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "uart_tx",
        "uo[1]": "led[0]",
        "uo[2]": "led[1]",
        "uo[3]": "ce0",
        "uo[4]": "sclk_ram",
        "uo[5]": "ce1",
        "uo[6]": "sclk_nor",
        "uo[7]": "dot",
        "uio[0]": "sio0_mosi",
        "uio[1]": "sio1_miso",
        "uio[2]": "sio2",
        "uio[3]": "sio3",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ks_pyamnihc",
      "address": 454,
      "title": "Karplus-Strong String Synthesis",
      "author": "Chinmay Patil",
      "description": "Plucked string sound synthesizer",
      "clock_hz": 256000,
      "tiles": "2x2",
      "analog_pins": [],
      "repo": "https://github.com/pyamnihc/tt05-um-ks-pyamnihc",
      "commit": "c6a218dff76274fcbe2c58a1784d1909d4f0f8e9",
      "pinout": {
        "ui[0]": "~rst_n_prbs_15, ~rst_n_prbs_7",
        "ui[1]": "load_prbs_15, load_prbs_7",
        "ui[2]": "freeze_prbs_15",
        "ui[3]": "freeze_prbs_7",
        "ui[4]": "i2s_noise_sel",
        "ui[5]": "~rst_n_ks_string",
        "ui[6]": "pluck",
        "ui[7]": "NOT CONNECTED",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "sck_i",
        "uio[1]": "sdi_i",
        "uio[2]": "sdo_o",
        "uio[3]": "cs_ni",
        "uio[4]": "i2s_sck_o",
        "uio[5]": "i2s_ws_o",
        "uio[6]": "i2s_sd_o",
        "uio[7]": "prbs_15"
      }
    },
    {
      "macro": "tt_um_kskyou",
      "address": 13,
      "title": "Continued Fraction Calculator",
      "author": "Kevin You",
      "description": "Calculates the continued fraction of the square root of a natural number",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kskyou/tt05",
      "commit": "0d166242eee3f5d185f8d77668378cc9fe697636",
      "pinout": {
        "ui[0]": "button",
        "ui[1]": "button",
        "ui[2]": "switch",
        "ui[3]": "switch",
        "ui[4]": "switch",
        "ui[5]": "switch",
        "ui[6]": "switch",
        "ui[7]": "switch",
        "uo[0]": "status LED",
        "uo[1]": "status LED",
        "uo[2]": "status LED",
        "uo[3]": "status LED",
        "uo[4]": "status LED",
        "uo[5]": "status LED",
        "uo[6]": "status LED",
        "uo[7]": "status LED",
        "uio[0]": "switch",
        "uio[1]": "switch",
        "uio[2]": "switch",
        "uio[3]": "switch",
        "uio[4]": "switch",
        "uio[5]": "switch",
        "uio[6]": "switch",
        "uio[7]": "switch"
      }
    },
    {
      "macro": "tt_um_lif",
      "address": 6,
      "title": "Current Based Leaky Integrate and Fire Model",
      "author": "Shatoparba Banerjee",
      "description": "Implement a current based LIF neuron",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/shatoparbabanerjee/tt05-verilog-demo",
      "commit": "4f664f5fe5061f3b88d80e2764b4f7a2d2ebc94f",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 0",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_lif_n",
      "address": 111,
      "title": "Leaky Integrate-and-Fire Neuron",
      "author": "Mariana_Huerta",
      "description": "Implement a LIF neuron in 130 nm CMOS",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/huertma/tt05-leaky-integrate-fire-neuron",
      "commit": "83b7492f1b0d1dc6867c7b04eb3d6040dfeae345",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 0",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_loopback",
      "address": 2,
      "title": "TinyTapeout 05 Loopback Test Module",
      "author": "Sylvain Munaut",
      "description": "Loopback test module",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-loopback",
      "commit": "6a3bfc761a25ef72510fe3d2bd7bcc1cb326238c",
      "pinout": {
        "ui[0]": "in0",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "in4",
        "ui[5]": "in5",
        "ui[6]": "in6",
        "ui[7]": "in7",
        "uo[0]": "mirrors in0",
        "uo[1]": "mirrors in0",
        "uo[2]": "mirrors in0",
        "uo[3]": "mirrors in0",
        "uo[4]": "mirrors in0",
        "uo[5]": "mirrors in0",
        "uo[6]": "mirrors in0",
        "uo[7]": "the value of in4 & in5 & in6 & in7",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_loopback_ericsmi",
      "address": 132,
      "title": "tt05-loopback tile with input skew measurement",
      "author": "Eric Smith",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ericsmi/tt05-loopback-with-skew",
      "commit": "48de418529d4d1154211a465678721e51b111c10",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_mabhari_seven_segment_seconds",
      "address": 205,
      "title": "Simple_Timer-MBA",
      "author": "Morteza Biglari-Abhari",
      "description": "Count up to the specified value (between 01 to 99), one second at a time. Time_Out will be '1' when reaches the expected value",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mabhari/tt05-my_simple_timer",
      "commit": "d31f0ad9f82bdbe8fe2d970f01cc0a7fa4826748",
      "pinout": {
        "ui[0]": "Timeout (in Seconds) bits 7 to 0",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "Load bit 0 (uio_in[0])",
        "uio[1]": "Start bit 1 (uio_in[1])",
        "uio[2]": "Tens or Ones select bit 3 (uio_in[3])",
        "uio[3]": "Time_Out uio_out[7]",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_manjushettar",
      "address": 105,
      "title": "ECE 183 - Integrate and Fire Network Chip Design",
      "author": "Manju Shettar",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/manjushettar/tt-183",
      "commit": "cdf9db135bf7e132cbf41d5805e6c4dc529855bb",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_matrix_multiplier",
      "address": 39,
      "title": "Matrix Multiplier",
      "author": "Erik Mercado",
      "description": "Multiple Matrices.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mercadoerik1031/tt05-matrix-multiplier-demo",
      "commit": "bd01021d0f0494b26a809f8b839d70833c8cedd6",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_matt_divider_test",
      "address": 332,
      "title": "TT05 Analog Test",
      "author": "Matt Venn",
      "description": "Test voltage divider",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt05-analog-test",
      "commit": "9514023204ccd2e9be0c3bc4e89cd778690d9693",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_mattngaw_fp8",
      "address": 292,
      "title": "8-bit Floating-Point Adder",
      "author": "Matt Ngaw",
      "description": "A floating-point adder following the FP8 E5M2 standard.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattngaw/98154-tt05-fp8adder",
      "commit": "3eb481af62fc698d7c33fa9479917bbb699490a7",
      "pinout": {
        "ui[0]": "input 1 bit 0",
        "ui[1]": "input 1 bit 1",
        "ui[2]": "input 1 bit 2",
        "ui[3]": "input 1 bit 3",
        "ui[4]": "input 1 bit 4",
        "ui[5]": "input 1 bit 5",
        "ui[6]": "input 1 bit 6",
        "ui[7]": "input 1 bit 7",
        "uo[0]": "output bit 0",
        "uo[1]": "output bit 1",
        "uo[2]": "output bit 2",
        "uo[3]": "output bit 3",
        "uo[4]": "output bit 4",
        "uo[5]": "output bit 5",
        "uo[6]": "output bit 6",
        "uo[7]": "output bit 7",
        "uio[0]": "input 2 bit 0",
        "uio[1]": "input 2 bit 1",
        "uio[2]": "input 2 bit 2",
        "uio[3]": "input 2 bit 3",
        "uio[4]": "input 2 bit 4",
        "uio[5]": "input 2 bit 5",
        "uio[6]": "input 2 bit 6",
        "uio[7]": "input 2 bit 7"
      }
    },
    {
      "macro": "tt_um_meriac_play_tune",
      "address": 197,
      "title": "Super Mario Tune on A Piezo Speaker",
      "author": "Milosch Meriac",
      "description": "Plays Super Mario Tune over a Piezo Speaker connected across uio_out[1:0]",
      "clock_hz": 100000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/meriac/tt05-play-tune",
      "commit": "554f6a5be2c5362097ce867ed9c3aa783d56e0fc",
      "pinout": {
        "ui[0]": "ui_in[0]",
        "ui[1]": "ui_in[1]",
        "ui[2]": "ui_in[2]",
        "ui[3]": "ui_in[3]",
        "ui[4]": "ui_in[4]",
        "ui[5]": "ui_in[5]",
        "ui[6]": "ui_in[6]",
        "ui[7]": "ui_in[7]",
        "uo[0]": "ui_in[0]",
        "uo[1]": "ui_in[1]",
        "uo[2]": "ui_in[2]",
        "uo[3]": "ui_in[3]",
        "uo[4]": "ui_in[4]",
        "uo[5]": "ui_in[5]",
        "uo[6]": "ui_in[6]",
        "uo[7]": "ui_in[7]",
        "uio[0]": "piezo_speaker_p (uio_out[0])",
        "uio[1]": "piezo_speaker_n (uio_out[1])",
        "uio[2]": "GND",
        "uio[3]": "GND",
        "uio[4]": "GND",
        "uio[5]": "GND",
        "uio[6]": "GND",
        "uio[7]": "GND"
      }
    },
    {
      "macro": "tt_um_mihailocode_neural_network",
      "address": 10,
      "title": "Neural network on chip",
      "author": "Faculty of Technical Sciences Cacak, University of Kragujevac",
      "description": "Neural network built out of perceptrons",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/vladamladenovic/neural_network_FTS_Cacak_Serbia",
      "commit": "9ab104f70e079c38f7312e09f238b6e17cf705db",
      "pinout": {
        "ui[0]": "ui_in[0]",
        "ui[1]": "ui_in[1]",
        "ui[2]": "ui_in[2]",
        "ui[3]": "ui_in[3]",
        "ui[4]": "ui_in[4]",
        "ui[5]": "ui_in[5]",
        "ui[6]": "ui_in[6]",
        "ui[7]": "ui_in[7]",
        "uo[0]": "uo_out[0]",
        "uo[1]": "uo_out[1]",
        "uo[2]": "uo_out[2]",
        "uo[3]": "uo_out[3]",
        "uo[4]": "uo_out[4]",
        "uo[5]": "uo_out[5]",
        "uo[6]": "uo_out[6]",
        "uo[7]": "uo_out[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_mingkaic1_stack_machine",
      "address": 266,
      "title": "Stack Machine",
      "author": "Mingkai Chen",
      "description": "8-bit stack machine",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/mingkaic1/tt05-stack-machine",
      "commit": "b33b4c7b73b06333f37c8d042388c54852c265e7",
      "pinout": {
        "ui[0]": "Data",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "Data",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "Data",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_minipit_stevej",
      "address": 202,
      "title": "Miniature Programmable Interrupt Timer",
      "author": "Steve Jenson",
      "description": "When the given 16-bit counter reaches 0 an interrupt pin is asserted for one clock cycle.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/stevej/tt05-minipit-stevej",
      "commit": "d9ae1648504e9487b565298cd2b5f8d09de76881",
      "pinout": {
        "ui[0]": "config[0] - use a clock divider",
        "ui[1]": "config[1] - repeat the interrupt?",
        "ui[2]": "config[2]",
        "ui[3]": "config[3]",
        "ui[4]": "config[4]",
        "ui[5]": "config[5]",
        "ui[6]": "config[6]",
        "ui[7]": "config[7]",
        "uo[0]": "divider on?",
        "uo[1]": "counter set?",
        "uo[2]": "pit active?",
        "uo[3]": "pit in reset?",
        "uo[4]": "pit currently interrupting?",
        "uo[5]": "f",
        "uo[6]": "g",
        "uo[7]": "h",
        "uio[0]": "/we write enable for config",
        "uio[1]": "set config address 0",
        "uio[2]": "set config address 1",
        "uio[3]": "start the timer",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_morningjava_top",
      "address": 268,
      "title": "ChipTune",
      "author": "Wallace Everest",
      "description": "Vintage 8-bit sound generator",
      "clock_hz": 1789773,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/WallieEverest/tt05",
      "commit": "65b588b52691b3a75e9ff8ed16a53132690d2a6a",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "RX",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "Blink",
        "uo[1]": "Link",
        "uo[2]": "TX",
        "uo[3]": "PWM",
        "uo[4]": "Square1",
        "uo[5]": "Square2",
        "uo[6]": "Triangle",
        "uo[7]": "Noise",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_multiplexed_clock",
      "address": 717,
      "title": "Multiplexed clock",
      "author": "Gustavo Gomez",
      "description": "Multiplexed clock with buttons",
      "clock_hz": 32728,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Noteolvides/Noteolvides_clock_TinyTapeout",
      "commit": "4f1ab75dc44ef730a8b6ded2b5f694be20e169f1",
      "pinout": {
        "ui[0]": "pull up button that increases minutes",
        "ui[1]": "pull up button that increases hours",
        "ui[2]": "pin used to negate 7 segment ouputs if necesary / for catode or anode configurations",
        "ui[3]": "pin used to negate 4 pins to multiplex if necesary / for catode or anode configurations",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "output multiplex first digit",
        "uio[1]": "output multiplex second digit",
        "uio[2]": "output multiplex third digit",
        "uio[3]": "output multiplex forth digit",
        "uio[4]": "output clock of seconds / testing purposes",
        "uio[5]": "output clock of minutes / testing purposes",
        "uio[6]": "output not used",
        "uio[7]": "output not used"
      }
    },
    {
      "macro": "tt_um_muncherkin_lioncage",
      "address": 161,
      "title": "Lion cage",
      "author": "Axel Andersson & Per Andersson",
      "description": "Count up to 15 lions, moving through a tunnel between a cage and an enclosure.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Muncherkin/tt_um_muncherkin_lioncage",
      "commit": "555ec1c5ab4585dcf30223703112811daab1450d",
      "pinout": {
        "ui[0]": "G1, first sensor in tunnel",
        "ui[1]": "G2, second sensor in tunnnel",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "",
        "uio[0]": "They do nothing.",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_mv_mult_alrdelcr",
      "address": 97,
      "title": "Matrix Vector Multiplication (Verilog Demo)",
      "author": "Aled dela Cruz",
      "description": "Multiplies inputted vector by ",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alrdelcr/tt05-verilog-alrdelcr",
      "commit": "09136e8f4285399d04d8622b51a2b0e22d29275a",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_mvm",
      "address": 79,
      "title": "Sparsity Aware Matrix Vector Multiplication",
      "author": "Test",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aidanzinn/tt05-verilog-demo-ECE183",
      "commit": "9507110d01df2fd6010d35d5c5856e15b223cae1",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_mvm_",
      "address": 235,
      "title": "Matrix Vector Multiplication Accelerator",
      "author": "Mathias Eriksen",
      "description": "This project takes in a 3x3 weight matrix in Compressed Sparse Row format, value is quantized and 8 bits long. It also takes in the corresponding 3 bit spike train. It then computes the matrix vector multiplication product and outputs the resulting vector on the output line",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/MathiasTEriksen/tt05-SparcityAware",
      "commit": "06cb9b036e5633e85c5ead570f3592234ed2f93e",
      "pinout": {
        "ui[0]": "Input Value bit 0",
        "ui[1]": "Input Value bit 1",
        "ui[2]": "Input Value bit 2",
        "ui[3]": "Input Value bit 3",
        "ui[4]": "Input Value bit 4",
        "ui[5]": "Input Value bit 5",
        "ui[6]": "Input Value bit 6",
        "ui[7]": "Input Value bit 7",
        "uo[0]": "Output Value bit 0",
        "uo[1]": "Output Value bit 1",
        "uo[2]": "Output Value bit 2",
        "uo[3]": "Output Value bit 3",
        "uo[4]": "Output Value bit 4",
        "uo[5]": "Output Value bit 5",
        "uo[6]": "Output Value bit 6",
        "uo[7]": "Output Value bit 7",
        "uio[0]": "FETCH Ready flag (out)",
        "uio[1]": "Sending out flag  (out)",
        "uio[2]": "Done sending flag (in)",
        "uio[3]": "Sending CPU flag (in)",
        "uio[4]": "Column Value bit 0",
        "uio[5]": "Column Value bit 1",
        "uio[6]": "Row Value bit 0",
        "uio[7]": "Row Value bit 1"
      }
    },
    {
      "macro": "tt_um_myuart",
      "address": 225,
      "title": "MyUART",
      "author": "LogicComputing",
      "description": "A small UART that outputs my name",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/LogicComputing/tt05-myUART",
      "commit": "58408ccbc2f63e53f6fd8a01be26c25e7a47dfd3",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_nickjhay_processor",
      "address": 140,
      "title": "Matrix multiply coprocessor (8x8 1bit)",
      "author": "Nick Hay",
      "description": "Implements a 1bit 8x8 matrix multiple using a systolic array.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/nickjhay/tt05-submission-template",
      "commit": "f4e0d2db7a1876bb6e601dba1b7b3c7966c6432f",
      "pinout": {
        "ui[0]": "data 0",
        "ui[1]": "data 1",
        "ui[2]": "data 2",
        "ui[3]": "data 3",
        "ui[4]": "data 4",
        "ui[5]": "data 5",
        "ui[6]": "data 6",
        "ui[7]": "data 7",
        "uo[0]": "output 0",
        "uo[1]": "output 1",
        "uo[2]": "output 2",
        "uo[3]": "output 3",
        "uo[4]": "output 4",
        "uo[5]": "output 5",
        "uo[6]": "output 6",
        "uo[7]": "output 7",
        "uio[0]": "sayhi: outputs greeting",
        "uio[1]": "read out multiplied matrix",
        "uio[2]": "use xor rather than or",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_njzhu_uart",
      "address": 206,
      "title": "UART Transceiver",
      "author": "Nathan Zhu",
      "description": "UART Transceiver with tx and rx functions at 9600 baud rate",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/njzhu/tt05_uart_transceiver",
      "commit": "bdb062cf917ea8b69169331955139053c3a7899f",
      "pinout": {
        "ui[0]": "rx bit to signal the bits we receive, dataReady highlighting data is ready for tx",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "bit to test if we want tx or rx",
        "uo[0]": "segment a / dataOut[0] / tx for uart packet bits",
        "uo[1]": "segment b / dataOut[1]",
        "uo[2]": "segment c / dataOut[2]",
        "uo[3]": "segment d / dataOut[3]",
        "uo[4]": "segment e / dataOut[4]",
        "uo[5]": "segment f / dataOut[5]",
        "uo[6]": "segment g / dataOut[6]",
        "uo[7]": "segment h / dataOut[7]",
        "uio[0]": "finished_read - finished reception / dataIn[0]",
        "uio[1]": "dataIn[1]",
        "uio[2]": "dataIn[2]",
        "uio[3]": "dataIn[3]",
        "uio[4]": "dataIn[4]",
        "uio[5]": "dataIn[5]",
        "uio[6]": "dataIn[6]",
        "uio[7]": "dataIn[7]"
      }
    },
    {
      "macro": "tt_um_no_time_for_squares_tommythorn",
      "address": 390,
      "title": "No Time for Squares",
      "author": "Tommy Thorn",
      "description": "It's a 12-hour clock, drawn with triangles rendered by a race-the-beam triangle render",
      "clock_hz": 31500000,
      "tiles": "3x2",
      "analog_pins": [],
      "repo": "https://github.com/tommythorn/no-time-for-squares",
      "commit": "e790eadb9ef3e7cea80ea629d8d2abceb4f720fe",
      "pinout": {
        "ui[0]": "clock",
        "ui[1]": "reset",
        "ui[2]": "hour, advance hour",
        "ui[3]": "minute, advance minute",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "debugsel\\[1]",
        "ui[7]": "debugsel\\[0]",
        "uo[0]": "R1",
        "uo[1]": "G1",
        "uo[2]": "B1",
        "uo[3]": "vsync",
        "uo[4]": "R0",
        "uo[5]": "G0",
        "uo[6]": "B0",
        "uo[7]": "hsync",
        "uio[0]": "debug\\[7]",
        "uio[1]": "debug\\[6]",
        "uio[2]": "debug\\[5]",
        "uio[3]": "debug\\[4]",
        "uio[4]": "debug\\[3]",
        "uio[5]": "debug\\[2]",
        "uio[6]": "debug\\[1]",
        "uio[7]": "debug\\[0]"
      }
    },
    {
      "macro": "tt_um_perceptron",
      "address": 170,
      "title": "Perceptron Hardcoded",
      "author": "Sathyaprakash Narayanan",
      "description": "Hardcoded Perceptron",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/satabios/ttf-perceptron",
      "commit": "d320021b451e4bea9304f7b6f454992516ffc6a9",
      "pinout": {
        "ui[0]": "unspecified",
        "ui[1]": "unspecified",
        "ui[2]": "unspecified",
        "ui[3]": "unspecified",
        "ui[4]": "unspecified",
        "ui[5]": "unspecified",
        "ui[6]": "unspecified",
        "ui[7]": "unspecified",
        "uo[0]": "perceptron_output a",
        "uo[1]": "perceptron_output b",
        "uo[2]": "perceptron_output c",
        "uo[3]": "perceptron_output d",
        "uo[4]": "perceptron_output e",
        "uo[5]": "perceptron_output f",
        "uo[6]": "perceptron_output g",
        "uo[7]": "perceptron_output h",
        "uio[0]": "unspecified",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_perceptron_connorguzi",
      "address": 174,
      "title": "Perceptron and basic binary neural network",
      "author": "Connor Guzikowski",
      "description": "Taking in the number of curves and edges of a number, the output is the expected number.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/connorguzi/tt05-perceptron",
      "commit": "c35dbd14eb76181bbf29ea97428b887249c86dbb",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_perceptron_neuromeme",
      "address": 236,
      "title": "Perceptron (Neuromeme)",
      "author": "Dylan Louie",
      "description": "A perceptron or a 9 + 10 adder",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Sinfinite01/tt05-verilog-Sinfinite",
      "commit": "8caf310bf742029ac8c36fbbcad6961a424b9d83",
      "pinout": {
        "ui[0]": "input 0 asssociated with weight 0",
        "ui[1]": "input 1 asssociated with weight 1",
        "ui[2]": "input 2 asssociated with weight 2",
        "ui[3]": "input 3 asssociated with weight 3",
        "ui[4]": "input 4 asssociated with weight 4",
        "ui[5]": "input 5 asssociated with weight 5",
        "ui[6]": "input 6 asssociated with weight 6",
        "ui[7]": "input 7 asssociated with weight 7",
        "uo[0]": "Read as an 8 bit output along with other outputs",
        "uo[1]": "Read as an 8 bit output along with other outputs",
        "uo[2]": "Read as an 8 bit output along with other outputs",
        "uo[3]": "Read as an 8 bit output along with other outputs",
        "uo[4]": "Read as an 8 bit output along with other outputs",
        "uo[5]": "Read as an 8 bit output along with other outputs",
        "uo[6]": "Read as an 8 bit output along with other outputs",
        "uo[7]": "",
        "uio[0]": "input 9 asssociated with weight 9",
        "uio[1]": "input 10 asssociated with weight 10",
        "uio[2]": "input 11 asssociated with weight 11",
        "uio[3]": "input 12 asssociated with weight 12",
        "uio[4]": "input 13 asssociated with weight 13",
        "uio[5]": "input 14 asssociated with weight 14",
        "uio[6]": "input 15 asssociated with weight 15",
        "uio[7]": "input 16 asssociated with weight 16"
      }
    },
    {
      "macro": "tt_um_prg",
      "address": 320,
      "title": "A Boolean function based pseudo random number generator (PRNG)",
      "author": "SEAL, CSE Department, IIT Kharagpur",
      "description": "Boolean function based pseudo random number generator implemented using finite field",
      "clock_hz": 10000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/fleathlushby/tt05_boolean_pseudo_random_generator",
      "commit": "14d900acb3f4df216e7ec80fd274d1e96a5c484b",
      "pinout": {
        "ui[0]": "input bit",
        "ui[1]": "input bit",
        "ui[2]": "input bit",
        "ui[3]": "input bit",
        "ui[4]": "input bit",
        "ui[5]": "input bit",
        "ui[6]": "input bit",
        "ui[7]": "input bit",
        "uo[0]": "output bit",
        "uo[1]": "output bit",
        "uo[2]": "output bit",
        "uo[3]": "output bit",
        "uo[4]": "output bit",
        "uo[5]": "output bit",
        "uo[6]": "output bit",
        "uo[7]": "output bit",
        "uio[0]": "output ready",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_proppy_bytebeat",
      "address": 196,
      "title": "bytebeat",
      "author": "proppy",
      "description": "Attempt implement the formula from one of the original [bytebeat](http://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html) [video](https://www.youtube.com/watch?v=tCRPUv8V22o) in hardware.\n",
      "clock_hz": 8000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/proppy/tt05-bytebeat",
      "commit": "85465d36a6c7f3edf90abbf69a3c08c596fad319",
      "pinout": {
        "ui[0]": "param `a` bit 0/3",
        "ui[1]": "param `a` bit 1/3",
        "ui[2]": "param `a` bit 2/3",
        "ui[3]": "param `a` bit 3/3",
        "ui[4]": "param `b` bit 0/3",
        "ui[5]": "param `b` bit 1/3",
        "ui[6]": "param `b` bit 2/3",
        "ui[7]": "param `b` bit 3/3",
        "uo[0]": "pcm sample bit 0/7",
        "uo[1]": "pcm sample bit 1/7",
        "uo[2]": "pcm sample bit 2/7",
        "uo[3]": "pcm sample bit 3/7",
        "uo[4]": "pcm sample bit 4/7",
        "uo[5]": "pcm sample bit 5/7",
        "uo[6]": "pcm sample bit 6/7",
        "uo[7]": "pcm sample bit 7/7",
        "uio[0]": "param `c` bit 0/3",
        "uio[1]": "param `c` bit 1/3",
        "uio[2]": "param `c` bit 2/3",
        "uio[3]": "param `c` bit 3/3",
        "uio[4]": "param `d` bit 0/3",
        "uio[5]": "param `d` bit 1/3",
        "uio[6]": "param `d` bit 2/3",
        "uio[7]": "param `d` bit 3/3"
      }
    },
    {
      "macro": "tt_um_psychogenic_neptuneproportional",
      "address": 651,
      "title": "Neptune guitar tuner (proportional window, version b, debug output on bidir pins, larger set of frequencies)",
      "author": "Pat Deegan",
      "description": "It's a guitar tuner!  and so much more... ",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt04-neptune",
      "commit": "3854c9280281eac0806a5b2f9983e316c6406a09",
      "pinout": {
        "ui[0]": "n/a",
        "ui[1]": "n/a",
        "ui[2]": "clk config 0",
        "ui[3]": "clk config 1",
        "ui[4]": "clk config 2",
        "ui[5]": "input pulse",
        "ui[6]": "output display single enable (LOW == dual)",
        "ui[7]": "output display select",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot or select (for dual)",
        "uio[0]": "raw input pulse count bit 0",
        "uio[1]": "raw input pulse count bit 1",
        "uio[2]": "raw input pulse count bit 2",
        "uio[3]": "raw input pulse count bit 3",
        "uio[4]": "raw input pulse count bit 4",
        "uio[5]": "raw input pulse count bit 5",
        "uio[6]": "raw input pulse count bit 6",
        "uio[7]": "raw input pulse count bit 7"
      }
    },
    {
      "macro": "tt_um_psychogenic_shaman",
      "address": 718,
      "title": "Shaman: SHA-256 hasher",
      "author": "Pat Deegan, psychogenic.com",
      "description": "Generate a SHA256 digest for data of arbitrary length",
      "clock_hz": 10000000,
      "tiles": "8x2",
      "analog_pins": [],
      "repo": "https://github.com/psychogenic/tt05-shaman",
      "commit": "05ea9e32a095a70ae8e52b05a7799e1dbca29ad3",
      "pinout": {
        "ui[0]": "data_input bit 0",
        "ui[1]": "data_input bit 1",
        "ui[2]": "data_input bit 2",
        "ui[3]": "data_input bit 3",
        "ui[4]": "data_input bit 4",
        "ui[5]": "data_input bit 5",
        "ui[6]": "data_input bit 6",
        "ui[7]": "data_input bit 7",
        "uo[0]": "result_byte bit 0",
        "uo[1]": "result_byte bit 1",
        "uo[2]": "result_byte bit 2",
        "uo[3]": "result_byte bit 3",
        "uo[4]": "result_byte bit 4",
        "uo[5]": "result_byte bit 5",
        "uo[6]": "result_byte bit 6",
        "uo[7]": "result_byte bit 7",
        "uio[0]": "OUTPUT, result_ready",
        "uio[1]": "OUTPUT, begin processing data debug",
        "uio[2]": "INPUT,  parallel loading enable",
        "uio[3]": "INPUT,  result_next",
        "uio[4]": "OUTPUT, busy",
        "uio[5]": "OUTPUT, processing data block debug",
        "uio[6]": "INPUT,  start new digest",
        "uio[7]": "INPUT,  clockin_data"
      }
    },
    {
      "macro": "tt_um_rebel2_balanced_ternary_ALU",
      "address": 107,
      "title": "REBEL-2 Balanced Ternary ALU",
      "author": "Ole Christian Moholth and Steven Bos",
      "description": "This 2-trit balanced ternary ALU is part of the REBEL-2 balanced ternary logic CPU",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/aiunderstand/tt05-REBEL2-balanced-ternary-ALU",
      "commit": "57bdea2111a99881280195703d4d16f51b2b4be8",
      "pinout": {
        "ui[0]": "ui_in[7]  func2H",
        "ui[1]": "ui_in[6]  func2L",
        "ui[2]": "ui_in[5]  func1H",
        "ui[3]": "ui_in[4]  func1L",
        "ui[4]": "ui_in[3]  func0H",
        "ui[5]": "ui_in[2]  func0L",
        "ui[6]": "ui_in[1]  b1H",
        "ui[7]": "ui_in[0]  b1L",
        "uo[0]": "uo_out[7] carryH",
        "uo[1]": "uo_out[6] carryL",
        "uo[2]": "uo_out[5] out1H",
        "uo[3]": "uo_out[4] out1L",
        "uo[4]": "uo_out[3] out0H",
        "uo[5]": "uo_out[2] out0L",
        "uo[6]": "uo_out[1] unused",
        "uo[7]": "uo_out[0] unused",
        "uio[0]": "uio_in[7] b0H",
        "uio[1]": "uio_in[6] b0L",
        "uio[2]": "uio_in[5] a1H",
        "uio[3]": "uio_in[4] a1L",
        "uio[4]": "uio_in[3] a0H",
        "uio[5]": "uio_in[2] a0L",
        "uio[6]": "uio_in[1] unused",
        "uio[7]": "uio_in[0] unused"
      }
    },
    {
      "macro": "tt_um_reflex_game",
      "address": 67,
      "title": "Reflex Game",
      "author": "Alan",
      "description": "Reflex Game where",
      "clock_hz": 10,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/amabraha/my_tiny_tapeout_reflex_game",
      "commit": "3797c57a25ae3016c16618079097f1cd7abf72ea",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rejunity_ay8913",
      "address": 165,
      "title": "Classic 8-bit era Programmable Sound Generator AY-3-8913",
      "author": "ReJ aka Renaldas Zioma",
      "description": "The AY-3-8913 is a 3-voice programmable sound generator (PSG) chip from General Instruments. The AY-3-8913 is a smaller variant of AY-3-8910 or its analog YM2149.",
      "clock_hz": 2000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt05-psg-ay8913",
      "commit": "a93ee1da79593aca863c5d507e2177e233f67ffe",
      "pinout": {
        "ui[0]": "DA0 - multiplexed data/address bus",
        "ui[1]": "DA1 - multiplexed data/address bus",
        "ui[2]": "DA2 - multiplexed data/address bus",
        "ui[3]": "DA3 - multiplexed data/address bus",
        "ui[4]": "DA4 - multiplexed data/address bus",
        "ui[5]": "DA5 - multiplexed data/address bus",
        "ui[6]": "DA6 - multiplexed data/address bus",
        "ui[7]": "DA7 - multiplexed data/address bus",
        "uo[0]": "audio out (pwm)",
        "uo[1]": "digita audio least significant bit",
        "uo[2]": "digita audio",
        "uo[3]": "digita audio",
        "uo[4]": "digita audio",
        "uo[5]": "digita audio",
        "uo[6]": "digita audio",
        "uo[7]": "digita audio most significant bit",
        "uio[0]": "(in) **BC1** bus control",
        "uio[1]": "(in) **BDIR** bus direction",
        "uio[2]": "(in) **SEL0** clock divider",
        "uio[3]": "(in) **SEL1** clock divider",
        "uio[4]": "(out) channel A (PWM)",
        "uio[5]": "(out) channel B (PWM)",
        "uio[6]": "(out) channel C (PWM)",
        "uio[7]": "(out) AUDIO OUT master (PWM)"
      }
    },
    {
      "macro": "tt_um_rejunity_rule110",
      "address": 384,
      "title": "Rule110 cell automata",
      "author": "ReJ aka Renaldas Zioma",
      "description": "Cellular automaton based on the Rule 110",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt05-rule110",
      "commit": "1dda847b8bd38fa8b7366eca85c2e8dc88de6e27",
      "pinout": {
        "ui[0]": "write cell 0 state",
        "ui[1]": "write cell 1 state",
        "ui[2]": "write cell 2 state",
        "ui[3]": "write cell 3 state",
        "ui[4]": "write cell 4 state",
        "ui[5]": "write cell 5 state",
        "ui[6]": "write cell 6 state",
        "ui[7]": "write cell 7 state",
        "uo[0]": "read cell 0 state",
        "uo[1]": "read cell 1 state",
        "uo[2]": "read cell 2 state",
        "uo[3]": "read cell 3 state",
        "uo[4]": "read cell 4 state",
        "uo[5]": "read cell 5 state",
        "uo[6]": "read cell 6 state",
        "uo[7]": "read cell 7 state",
        "uio[0]": "/WE, inverted write enable",
        "uio[1]": "/HALT, inverted halt automata",
        "uio[2]": "ADDR#, cell block address bit 0",
        "uio[3]": "ADDR#, cell block address bit 1",
        "uio[4]": "ADDR#, cell block address bit 2",
        "uio[5]": "ADDR#, cell block address bit 3",
        "uio[6]": "ADDR#, cell block address bit 4",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rejunity_sn76489",
      "address": 201,
      "title": "Classic 8-bit era Programmable Sound Generator SN76489",
      "author": "ReJ aka Renaldas Zioma",
      "description": "The SN76489 Digital Complex Sound Generator (DCSG) is a programmable sound generator chip from Texas Instruments.",
      "clock_hz": 4000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt05-psg-sn76489",
      "commit": "5fc7f1186ae25ed8de399b36a7ab149162ab61d1",
      "pinout": {
        "ui[0]": "D0 data bus",
        "ui[1]": "D1 data bus",
        "ui[2]": "D2 data bus",
        "ui[3]": "D3 data bus",
        "ui[4]": "D4 data bus",
        "ui[5]": "D5 data bus",
        "ui[6]": "D6 data bus",
        "ui[7]": "D7 data bus",
        "uo[0]": "digital audio LSB",
        "uo[1]": "digital audio",
        "uo[2]": "digital audio",
        "uo[3]": "digital audio",
        "uo[4]": "digital audio",
        "uo[5]": "digital audio",
        "uo[6]": "digital audio",
        "uo[7]": "digital audio MSB",
        "uio[0]": "(in)  **/WE** write enable",
        "uio[1]": "(in)  **SEL0** clock divider",
        "uio[2]": "(in)  **SEL1** clock divider",
        "uio[3]": "(out) channel 0 (PWM)",
        "uio[4]": "(out) channel 1 (PWM)",
        "uio[5]": "(out) channel 2 (PWM)",
        "uio[6]": "(out) channel 3 (PWM)",
        "uio[7]": "(out) AUDIO OUT master (PWM)"
      }
    },
    {
      "macro": "tt_um_rejunity_snn",
      "address": 582,
      "title": "Chonky Spiking Neural Net",
      "author": "ReJ aka Renaldas Zioma, Paola Vitolo, Andrew Wabnitz. Big thanks to Jason Eshraghian!",
      "description": "3 layer Spiking Neural Net with on-chip weights",
      "clock_hz": 10000000,
      "tiles": "4x2",
      "analog_pins": [],
      "repo": "https://github.com/rejunity/tt05-spiking-neural-net",
      "commit": "5ab8f3a2f012f19143963cf99125b2aded99e566",
      "pinout": {
        "ui[0]": "input bus LSB",
        "ui[1]": "input bus",
        "ui[2]": "input bus",
        "ui[3]": "input bus",
        "ui[4]": "input bus",
        "ui[5]": "input bus",
        "ui[6]": "input bus",
        "ui[7]": "input bus MSB",
        "uo[0]": "last layer neuron 0",
        "uo[1]": "last layer neuron 1",
        "uo[2]": "last layer neuron 2",
        "uo[3]": "last layer neuron 3",
        "uo[4]": "last layer neuron 4",
        "uo[5]": "last layer neuron 5",
        "uo[6]": "last layer neuron 6",
        "uo[7]": "last layer neuron 7",
        "uio[0]": "(in) EXEC",
        "uio[1]": "(in) SYNC",
        "uio[2]": "(in) SETUP_CONTROL 0 bit",
        "uio[3]": "(in) SETUP_CONTROL 1 bit",
        "uio[4]": "(in) SETUP_CONTROL 2 bit",
        "uio[5]": "(out) debug neuron layer 1",
        "uio[6]": "(out) debug neuron layer 2",
        "uio[7]": "(out) debug neuron layer 2"
      }
    },
    {
      "macro": "tt_um_retospect_neurochip",
      "address": 518,
      "title": "Field Programmable Neural Array",
      "author": "Reto Stamm",
      "description": "A collection of 50 interconnected simulated leaky neurons that can be programmed to do cognitive tasks.",
      "clock_hz": 10000000,
      "tiles": "4x2",
      "analog_pins": [],
      "repo": "https://github.com/retospect/tt05-fpna-rs",
      "commit": "e69d8b03c8895373d86ad08ab9fc64255ebffa17",
      "pinout": {
        "ui[0]": "dendritic input 0",
        "ui[1]": "dendritic input 1",
        "ui[2]": "dendritic input 2",
        "ui[3]": "dendritic input 3",
        "ui[4]": "dendritic input 4",
        "ui[5]": "dendritic input 5",
        "ui[6]": "dendritic input 6",
        "ui[7]": "dendritic input 7",
        "uo[0]": "output axon 0",
        "uo[1]": "output axon 1",
        "uo[2]": "output axon 2",
        "uo[3]": "output axon 3",
        "uo[4]": "output axon 4",
        "uo[5]": "output axon 5",
        "uo[6]": "output axon 6",
        "uo[7]": "output axon 7",
        "uio[0]": "reset_nn reset neural network (active high)",
        "uio[1]": "bs_in bitstream readout",
        "uio[2]": "bs_out bitstream input",
        "uio[3]": "config_en - shift bitstream",
        "uio[4]": "output axon 8",
        "uio[5]": "output axon 9",
        "uio[6]": "dendritic input 9",
        "uio[7]": "dendritic input 8"
      }
    },
    {
      "macro": "tt_um_rgb_mixer",
      "address": 713,
      "title": "RGB Mixer",
      "author": "Matt Venn",
      "description": "Use 3 rotary encoder to control 3 PWM generators",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt04-rgb-mixer",
      "commit": "df475179f10d403aa64c3d8c37d06bd3b2b2f928",
      "pinout": {
        "ui[0]": "encoder 0 pin a",
        "ui[1]": "encoder 0 pin b",
        "ui[2]": "encoder 1 pin a",
        "ui[3]": "encoder 1 pin b",
        "ui[4]": "encoder 2 pin a",
        "ui[5]": "encoder 2 pin b",
        "ui[6]": "debug encoder select bit 0",
        "ui[7]": "debug encoder select bit 1",
        "uo[0]": "pwm 0",
        "uo[1]": "pwm 1",
        "uo[2]": "pwm 2",
        "uo[3]": "debug debounce a",
        "uo[4]": "debug debounce b",
        "uo[5]": "n/a",
        "uo[6]": "n/a",
        "uo[7]": "n/a",
        "uio[0]": "debug encoder bit 0",
        "uio[1]": "debug encoder bit 1",
        "uio[2]": "debug encoder bit 2",
        "uio[3]": "debug encoder bit 3",
        "uio[4]": "debug encoder bit 4",
        "uio[5]": "debug encoder bit 5",
        "uio[6]": "debug encoder bit 6",
        "uio[7]": "debug encoder bit 7"
      }
    },
    {
      "macro": "tt_um_rjmorgan11_calculator_chip",
      "address": 73,
      "title": "Calculator chip",
      "author": "Rylan Morgan",
      "description": "calculator",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rjmorgan11/tt05-rjmorgan11",
      "commit": "f5c5c3a482a7982bd84b49cfab906ac819f6ea7c",
      "pinout": {
        "ui[0]": "NumIn [7:0] number in",
        "ui[1]": "Reset",
        "ui[2]": "Clock",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "NumOut [7:0] output",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "OpIn [3:0] what op to run",
        "uio[1]": "Enter      enter command",
        "uio[2]": "Flags [2:0] overflow, negative, and zero flags",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_rnn",
      "address": 166,
      "title": "RNN (Demo)",
      "author": "Ridger Zhu",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ridgerchu/first-chip",
      "commit": "44f7e3181120b7a5980f29774f8b637a1166a001",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "out bit a",
        "uo[1]": "out bit b",
        "uo[2]": "out bit c",
        "uo[3]": "out bit d",
        "uo[4]": "out bit e",
        "uo[5]": "out bit f",
        "uo[6]": "out bit g",
        "uo[7]": "out bit h",
        "uio[0]": "unspecified",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_rtfb_collatz",
      "address": 462,
      "title": "Collatz conjecture brute-forcer",
      "author": "Vytautas \u0160altenis",
      "description": "Runs a Collatz sequence calculation for a given number, outputs the number\nof steps it took to reach 1 (a.k.a. orbit length) and the upper 16 bits of\nthe highest number of the sequence.\n",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/rtfb/tt05-collatz",
      "commit": "814900a8df0b715a2cbf4d0fb5eea28658c599a1",
      "pinout": {
        "ui[0]": "input0",
        "ui[1]": "input1",
        "ui[2]": "input2",
        "ui[3]": "input3",
        "ui[4]": "input4",
        "ui[5]": "input5",
        "ui[6]": "input6",
        "ui[7]": "input7",
        "uo[0]": "output0",
        "uo[1]": "output1",
        "uo[2]": "output2",
        "uo[3]": "output3",
        "uo[4]": "output4",
        "uo[5]": "output5",
        "uo[6]": "output6",
        "uo[7]": "output7",
        "uio[0]": "address0",
        "uio[1]": "address1",
        "uio[2]": "address2",
        "uio[3]": "address3",
        "uio[4]": "address4",
        "uio[5]": "orbit/max select",
        "uio[6]": "start compute",
        "uio[7]": "write enable or compute busy indicator"
      }
    },
    {
      "macro": "tt_um_sap_1",
      "address": 5,
      "title": "SAP-1 Computer",
      "author": "Brandon Cruz",
      "description": "Simple as Possible  computer into ASIC",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/brandcrz88/SAP-1_Computer",
      "commit": "ccf5a7d99625a32149f2964ae943f80e002cc70b",
      "pinout": {
        "ui[0]": "n/a",
        "ui[1]": "n/a",
        "ui[2]": "n/a",
        "ui[3]": "n/a",
        "ui[4]": "n/a",
        "ui[5]": "n/a",
        "ui[6]": "n/a",
        "ui[7]": "n/a",
        "uo[0]": "bus[0]",
        "uo[1]": "bus[1]",
        "uo[2]": "bus[2]",
        "uo[3]": "bus[3]",
        "uo[4]": "bus[4]",
        "uo[5]": "bus[5]",
        "uo[6]": "bus[6]",
        "uo[7]": "bus[7]",
        "uio[0]": "n/a",
        "uio[1]": "n/a",
        "uio[2]": "n/a",
        "uio[3]": "n/a",
        "uio[4]": "n/a",
        "uio[5]": "n/a",
        "uio[6]": "n/a",
        "uio[7]": "n/a"
      }
    },
    {
      "macro": "tt_um_seanvenadas",
      "address": 163,
      "title": "Event-Based Denoising Circuit",
      "author": "Sean Venadas",
      "description": "Takes an 8-bit signal with 4 parameters: x, y, p, t. When p is high, signal is outputted and filtered to reduce noise. Otherwise, output signal is zero.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/seanvenadas/tt05-verilog-ece183chip",
      "commit": "02c720dcbf03d1f4c7f4140c6bdb3053ba840379",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_seven_segment_seconds",
      "address": 709,
      "title": "7 segment seconds (Verilog Demo)",
      "author": "Matt Venn",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-verilog-demo",
      "commit": "a7e71a2f1b954fff59597838ef1453dba01f8861",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_seven_segment_seconds_ksandov4",
      "address": 162,
      "title": "Brain Inspired Random Dropout Circuit",
      "author": "Kevin Sandoval",
      "description": "This random dropout circuit simulates a dropout mechanism that is commonly used in neural networks for the ourpose of preventing overfitting.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Ksandov4/CHIPDESIGN",
      "commit": "053f797f65714a09eea426e8cdf769bfe0b313c7",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_stdp",
      "address": 228,
      "title": "Spike-timing dependent plasticity (Verilog Demo)",
      "author": "Binh Nguyen",
      "description": "Update neuron weight using spike-timing dependent plasticity",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/howyoubinh/tt05-stdp-demo",
      "commit": "830b93d7aaad7ef66cd869ddca5644c02e58dd61",
      "pinout": {
        "ui[0]": "drive current",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "LIF spike",
        "uo[1]": "LIF state",
        "uo[2]": "synaptic weight",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_suhrojo",
      "address": 234,
      "title": "Convolutional Network Circuit Chip Design",
      "author": "Rogelio Franco",
      "description": "Silicon Chip design of a CNN",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/suhrojo/ConvolutionalNC-Design",
      "commit": "dc556426bdb3c3478077bc875ce8cacb73ced1ff",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_sunaofurukawa_cpu_8bit",
      "address": 705,
      "title": "cpu_8bit",
      "author": "Sunao Furukawa",
      "description": "This Verilog code is geenrated by Bing AI",
      "clock_hz": 50000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Sunao-Furukawa/tt_um_sunaofurukawa_cpu_8bit",
      "commit": "89919eb3c23dc9b41f34aaf2f0191e5fe00f23a7",
      "pinout": {
        "ui[0]": "instruction register [0]",
        "ui[1]": "instruction register [1]",
        "ui[2]": "instruction register [2]",
        "ui[3]": "instruction register [3]",
        "ui[4]": "formula right side [4]",
        "ui[5]": "formula right side [5]",
        "ui[6]": "formula right side [6]",
        "ui[7]": "formula right side [7]",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_supertails_tetris",
      "address": 204,
      "title": "Tetris",
      "author": "Carson Swoveland",
      "description": "Implements the second-most-popular game of all time in hardware",
      "clock_hz": 6250000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/SuperTails/tt-tetris",
      "commit": "93cc4475977aacd828e5380edec686343d39a7b4",
      "pinout": {
        "ui[0]": "Move Left",
        "ui[1]": "Move Down",
        "ui[2]": "Move Left",
        "ui[3]": "Spin Counterclockwise",
        "ui[4]": "Spin Clockwise",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "VGA HSync",
        "uo[1]": "VGA VSync",
        "uo[2]": "VGA Red",
        "uo[3]": "VGA Green",
        "uo[4]": "VGA Blue",
        "uo[5]": "Memory Start",
        "uo[6]": "Memory Continue",
        "uo[7]": "Memory Write Enable",
        "uio[0]": "A0/D0",
        "uio[1]": "A1/D1",
        "uio[2]": "A2/D2",
        "uio[3]": "A3",
        "uio[4]": "A4",
        "uio[5]": "A5",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_synth_GyanepsaaS",
      "address": 75,
      "title": "Synth",
      "author": "Gyanepsaa Singh",
      "description": "Sound synthesizer",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/GyanepsaaS/TT_synth_GyanepsaaS",
      "commit": "5d30b1f774db6ecc4cc51d079d192e82eac48f25",
      "pinout": {
        "ui[0]": "select triangle or sawtooth waveform",
        "ui[1]": "",
        "ui[2]": "sampling frequency clock",
        "ui[3]": "hold a note",
        "ui[4]": "4 frequency selection bits",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "sound output",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "2-bit attack",
        "uio[1]": "2-bit decay",
        "uio[2]": "2-bit sustain",
        "uio[3]": "2-bit release",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_thermocouple",
      "address": 230,
      "title": "Thermocouple-to-temperature converter (digital backend)",
      "author": "Aidan Medcalf",
      "description": "Converts digitized thermocouple voltage into temperature.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AidanMedcalf/tt05-thermocouple",
      "commit": "2f2f4ce3a9db1936e46730120e1fd6b0a4c4419c",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "SCE",
        "uio[1]": "SIN",
        "uio[2]": "SOUT",
        "uio[3]": "SCK",
        "uio[4]": "ADC_SCE",
        "uio[5]": "ADC_SOUT",
        "uio[6]": "ADC_SIN",
        "uio[7]": "ADC_SCK"
      }
    },
    {
      "macro": "tt_um_tiny_game_of_life",
      "address": 264,
      "title": "Tiny Game of Life",
      "author": "Petros Emmanouilidis",
      "description": "Simulates cellular automaton Conway's Game of Life on an 8x8 grid using shift registers.",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/Petros-Emmanouilidis/tt05-Petros-Emmanouilidis-tiny-game-of-life",
      "commit": "cfc660357bef7649975ee69f36dae2b9bded8609",
      "pinout": {
        "ui[0]": "Data Input Line",
        "ui[1]": "Start Game",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "Data Output Line",
        "uo[1]": "0th bit of cell location",
        "uo[2]": "1st bit of cell location",
        "uo[3]": "2nd bit of cell location",
        "uo[4]": "3rd bit of cell location",
        "uo[5]": "4th bit of cell location",
        "uo[6]": "5th bit of cell location",
        "uo[7]": "6th bit of cell location",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_tkmheart",
      "address": 227,
      "title": "Heart Rhythm Analyzer",
      "author": "Nissan Kunju",
      "description": "The design integrates a threshold-based filtering mechanism followed by peak detection on the filtered data.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tkmceberl/tt05-tkm-heart",
      "commit": "2adfd3419bf11f26468797f9438c4e75f11972ce",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_toivoh_synth",
      "address": 262,
      "title": "Analog emulation monosynth",
      "author": "Toivo Henningsson",
      "description": "One synth voice with two oscillators and a 2nd order filter",
      "clock_hz": 50000000,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/toivoh/tt05-synth",
      "commit": "166eb2e9d0b3a1e6c0ec31fc7e841200e3819ac9",
      "pinout": {
        "ui[0]": "write data bit 0",
        "ui[1]": "write data bit 1",
        "ui[2]": "write data bit 2",
        "ui[3]": "write data bit 3",
        "ui[4]": "write data bit 4",
        "ui[5]": "write data bit 5",
        "ui[6]": "write data bit 6",
        "ui[7]": "write data bit 7",
        "uo[0]": "sample bit 0",
        "uo[1]": "sample bit 1",
        "uo[2]": "sample bit 2",
        "uo[3]": "sample bit 3",
        "uo[4]": "sample bit 4",
        "uo[5]": "sample bit 5",
        "uo[6]": "sample bit 6",
        "uo[7]": "sample bit 7",
        "uio[0]": "write address bit 0",
        "uio[1]": "write address bit 1",
        "uio[2]": "write address bit 2",
        "uio[3]": "write address bit 3",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "PWM output",
        "uio[7]": "write strobe"
      }
    },
    {
      "macro": "tt_um_tomkeddie_a",
      "address": 334,
      "title": "VGA Experiments",
      "author": "Tom Keddie",
      "description": "Simple Game",
      "clock_hz": 25175000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TomKeddie/tinytapeout-2023-tt05a",
      "commit": "621f0f1604bb5d5ea33630bae4f026edd93948cb",
      "pinout": {
        "ui[0]": "left paddle up",
        "ui[1]": "left paddle down",
        "ui[2]": "right paddle up",
        "ui[3]": "right paddle down",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "pmod sel (high=mole99, low=digilent)",
        "uo[0]": "r1/r0 (mole99/digilent)",
        "uo[1]": "g1/r1 (mole99/digilent)",
        "uo[2]": "b1/r2 (mole99/digilent)",
        "uo[3]": "vsync/r3 (mole99/digilent)",
        "uo[4]": "r0/b0 (mole99/digilent)",
        "uo[5]": "g0/b1 (mole99/digilent)",
        "uo[6]": "b0/b2 (mole99/digilent)",
        "uo[7]": "hsync/b3 (mole99/digilent)",
        "uio[0]": "g0",
        "uio[1]": "g1",
        "uio[2]": "g2",
        "uio[3]": "g3",
        "uio[4]": "hsync",
        "uio[5]": "vsync",
        "uio[6]": "tied low",
        "uio[7]": "tied low"
      }
    },
    {
      "macro": "tt_um_topLevel_derekabarca",
      "address": 172,
      "title": "Brain-Inspired Oscillatory Network",
      "author": "Derek Abarca",
      "description": "Two neuron modules interact with a synapse module to produce rhythmic oscillations.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/derekabarca/tt05-OscilatorNetworks",
      "commit": "bfba8c0a24f786d329d6245a69ae6e49be051a94",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_topModuleKA",
      "address": 4,
      "title": "Time Multiplexed Neuron Ckt",
      "author": "Karina Aguilar",
      "description": " Utilize leaky-integrate-and-fire neurons to make multiple neurons",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/KarinaAguilar/tt05-time-multiplexed-neuron-circuit",
      "commit": "653038df1b41afac9bfe633ed0d671542006d20f",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 1",
        "uio[1]": "spike bit 2",
        "uio[2]": "spike bit 3",
        "uio[3]": "spike bit 4",
        "uio[4]": "spike bit 5",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_top_mole99",
      "address": 326,
      "title": "One Sprite Pony",
      "author": "Leo Moser",
      "description": "This SVGA design has exactly one trick up its sleeve: it displays a sprite!",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mole99/tt05-one-sprite-pony",
      "commit": "763590f5892dad22081c96777b660326b326c83c",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "R1",
        "uo[1]": "G1",
        "uo[2]": "B1",
        "uo[3]": "VS",
        "uo[4]": "R0",
        "uo[5]": "G0",
        "uo[6]": "B0",
        "uo[7]": "HS",
        "uio[0]": "CS",
        "uio[1]": "MOSI",
        "uio[2]": "MISO",
        "uio[3]": "SCK",
        "uio[4]": "Vertical Pulse",
        "uio[5]": "Horizontal Pulse",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_tt05_analog_test",
      "address": 271,
      "title": "TT05 Analog Testmacro (Ringo, DAC)",
      "author": "Harald Pretl and Jakob Ratschenberger",
      "description": "For future analog enablement of TinyTapeout we designed a few simple analog blocks for testing the flow. The first block is a ca. 500kHz ring oscillator outputting a square-wave signal. The second block is a 3bit R-2R DAC outputting a programmable dc voltage. Both analog output signals can be gated or shorted using integrated transmission gates. To add a further level of madness, we have placed and routed this analog macro using an experimental automatic analog PnR tool, currently under development by the authors.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/iic-jku/tt05-analog-test",
      "commit": "1cc3a7141dd1b1f1077a3ccae67912267226489f",
      "pinout": {
        "ui[0]": "dac_in[0]",
        "ui[1]": "dac_in[1]",
        "ui[2]": "dac_in[2]",
        "ui[3]": "Enable TG for DAC output to UA[1]",
        "ui[4]": "",
        "ui[5]": "Enable TG for ringo output to UA[0]",
        "ui[6]": "Enable ringo",
        "ui[7]": "Short UA[0] and UA[1] for testing",
        "uo[0]": "UA[0]: Ringo output (when TG enabled)",
        "uo[1]": "UA[1]: DAC output (when TG enabled)",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_ttl74hc595_v2",
      "address": 649,
      "title": "8-Bit Shift Register with Output Latches 74HC595",
      "author": "Hirosh Dabui",
      "description": "The 74HC595 shift register",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/splinedrive/74hc595",
      "commit": "91bd977268e35377d33b5a8d037e56740b1c2f09",
      "pinout": {
        "ui[0]": "sclrn",
        "ui[1]": "ser",
        "ui[2]": "rck",
        "ui[3]": "srck",
        "ui[4]": "G",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "q[0]",
        "uio[1]": "q[1]",
        "uio[2]": "q[2]",
        "uio[3]": "q[3]",
        "uio[4]": "q[4]",
        "uio[5]": "q[5]",
        "uio[6]": "q[6]",
        "uio[7]": "q[7]"
      }
    },
    {
      "macro": "tt_um_uabc_electronica_2023",
      "address": 194,
      "title": "UABC-ELECTRONICA",
      "author": "UABC",
      "description": "Displays the word UABC-ELECTRONICA on a 7-segment display. Each letter is displayed in a time, one by one.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/rogeermv/UABC_ELECTRONICA_2023",
      "commit": "978eae48f650b5e94821d2f56085591f4d08e857",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_urish_dffram",
      "address": 526,
      "title": "DFFRAM Example (128 bytes)",
      "author": "Uri Shaked",
      "description": "128 bytes DFFRAM module",
      "clock_hz": 0,
      "tiles": "4x2",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-dffram-example",
      "commit": "3429462743b7eb1e2ec0a7989de01f0a8c3423ae",
      "pinout": {
        "ui[0]": "addr[0]",
        "ui[1]": "addr[1]",
        "ui[2]": "addr[2]",
        "ui[3]": "addr[3]",
        "ui[4]": "addr[4]",
        "ui[5]": "addr[5]",
        "ui[6]": "addr[6]",
        "ui[7]": "wen",
        "uo[0]": "out[0]",
        "uo[1]": "out[1]",
        "uo[2]": "out[2]",
        "uo[3]": "out[3]",
        "uo[4]": "out[4]",
        "uo[5]": "out[5]",
        "uo[6]": "out[6]",
        "uo[7]": "out[7]",
        "uio[0]": "in[0]",
        "uio[1]": "in[1]",
        "uio[2]": "in[2]",
        "uio[3]": "in[3]",
        "uio[4]": "in[4]",
        "uio[5]": "in[5]",
        "uio[6]": "in[6]",
        "uio[7]": "in[7]"
      }
    },
    {
      "macro": "tt_um_urish_ringosc_cnt",
      "address": 655,
      "title": "Ring oscillator with counter",
      "author": "Uri Shaked",
      "description": "Test module for the TT05 power switching FET",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-ringosc-counter",
      "commit": "3717208f1e457b03587a497a6453cd541a4916a2",
      "pinout": {
        "ui[0]": "cnt_shift[0]",
        "ui[1]": "cnt_shift[1]",
        "ui[2]": "cnt_shift[2]",
        "ui[3]": "cnt_shift[3]",
        "ui[4]": "cnt_shift[4]",
        "ui[5]": "cnt_shift[5]",
        "ui[6]": "cnt_stop",
        "ui[7]": "cnt_reset",
        "uo[0]": "cnt[0]",
        "uo[1]": "cnt[1]",
        "uo[2]": "cnt[2]",
        "uo[3]": "cnt[3]",
        "uo[4]": "cnt[4]",
        "uo[5]": "cnt[5]",
        "uo[6]": "cnt[6]",
        "uo[7]": "cnt[7]",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_urish_silife",
      "address": 270,
      "title": "Game of Life 8x8 (siLife)",
      "author": "Uri Shaked",
      "description": "Silicon implementation of Conway's Game of Life",
      "clock_hz": 0,
      "tiles": "1x2",
      "analog_pins": [],
      "repo": "https://github.com/urish/tt05-silife-8x8",
      "commit": "4dcd977a84860ebe7f7ea7e2d5e9f9d95ed3c4f2",
      "pinout": {
        "ui[0]": "row_sel[0]",
        "ui[1]": "row_sel[1]",
        "ui[2]": "rol_sel[2]",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "en",
        "ui[7]": "wr_en",
        "uo[0]": "cell_out[0]",
        "uo[1]": "cell_out[1]",
        "uo[2]": "cell_out[2]",
        "uo[3]": "cell_out[3]",
        "uo[4]": "cell_out[4]",
        "uo[5]": "cell_out[5]",
        "uo[6]": "cell_out[6]",
        "uo[7]": "cell_out[7]",
        "uio[0]": "cell_in[0]",
        "uio[1]": "cell_in[1]",
        "uio[2]": "cell_in[2]",
        "uio[3]": "cell_in[3]",
        "uio[4]": "cell_in[4]",
        "uio[5]": "cell_in[5]",
        "uio[6]": "cell_in[6]",
        "uio[7]": "cell_in[7]"
      }
    },
    {
      "macro": "tt_um_urish_silife_max",
      "address": 396,
      "title": "Game of Life 8x32 (siLife)",
      "author": "Uri Shaked",
      "description": "Silicon implementation of Conway's Game of Life with LED Dot Matrix Output",
      "clock_hz": 10000000,
      "tiles": "3x2",
      "analog_pins": [],
      "repo": "https://github.com/urish/tt05-silife-max",
      "commit": "a8d870bce7228f51e0d287e195969e7e086d4000",
      "pinout": {
        "ui[0]": "row_sel[0] / pattern_sel",
        "ui[1]": "row_sel[1]",
        "ui[2]": "rol_sel[2]",
        "ui[3]": "rol_sel[3]",
        "ui[4]": "rol_sel[4]",
        "ui[5]": "max7129_en",
        "ui[6]": "en",
        "ui[7]": "wr_en",
        "uo[0]": "cell_out[0] / max7129_cs",
        "uo[1]": "cell_out[1] / max7129_clk",
        "uo[2]": "cell_out[2] / max7129_din",
        "uo[3]": "cell_out[3]",
        "uo[4]": "cell_out[4]",
        "uo[5]": "cell_out[5]",
        "uo[6]": "cell_out[6]",
        "uo[7]": "cell_out[7]",
        "uio[0]": "cell_in[0]",
        "uio[1]": "cell_in[1]",
        "uio[2]": "cell_in[2]",
        "uio[3]": "cell_in[3]",
        "uio[4]": "cell_in[4]",
        "uio[5]": "cell_in[5]",
        "uio[6]": "cell_in[6]",
        "uio[7]": "cell_in[7]"
      }
    },
    {
      "macro": "tt_um_urish_simon",
      "address": 653,
      "title": "Simon Says game",
      "author": "Uri Shaked",
      "description": "A simple memory game",
      "clock_hz": 50000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/urish/tt05-simon-game-openlane2",
      "commit": "75d174a3ad9d7affc594297f0e9e9196f3a822d5",
      "pinout": {
        "ui[0]": "btn1",
        "ui[1]": "btn2",
        "ui[2]": "btn3",
        "ui[3]": "btn4",
        "ui[4]": "seginv",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "led1",
        "uo[1]": "led2",
        "uo[2]": "led3",
        "uo[3]": "led4",
        "uo[4]": "speaker",
        "uo[5]": "dig1",
        "uo[6]": "dig2",
        "uo[7]": "",
        "uio[0]": "seg_a",
        "uio[1]": "seg_b",
        "uio[2]": "seg_c",
        "uio[3]": "seg_d",
        "uio[4]": "seg_e",
        "uio[5]": "seg_f",
        "uio[6]": "seg_g",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_urish_skullfet",
      "address": 239,
      "title": "SkullFET",
      "author": "Uri Shaked",
      "description": "Bare-bone transistors",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/urish/tt05-skullfet",
      "commit": "e26ee17a532a0203753041678e030d9db537cef8",
      "pinout": {
        "ui[0]": "A",
        "ui[1]": "B",
        "ui[2]": "~S",
        "ui[3]": "~R",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "~A",
        "uo[1]": "~(A&B)",
        "uo[2]": "~Q",
        "uo[3]": "Q",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_uwuifier",
      "address": 173,
      "title": "UART uwuifier",
      "author": "Anish Singhani",
      "description": "Operates on a UART signal and uwuifies it",
      "clock_hz": 6000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/asinghani/uwuifier-tt05",
      "commit": "bf8bcdb06a3b21943d9a78886e99f0ac4f9155b6",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "uart rx",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "uart tx",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_vga_clock",
      "address": 707,
      "title": "VGA clock",
      "author": "Matt Venn",
      "description": "Shows the time on a VGA screen",
      "clock_hz": 31500000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt04-vga-clock",
      "commit": "b5068cc8c04e3a657c603e24e42483218885d5b7",
      "pinout": {
        "ui[0]": "clock",
        "ui[1]": "reset",
        "ui[2]": "adjust hours",
        "ui[3]": "adjust minutes",
        "ui[4]": "adjust seconds",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "hsync",
        "uo[1]": "vsync",
        "uo[2]": "r0",
        "uo[3]": "r1",
        "uo[4]": "g0",
        "uo[5]": "g1",
        "uo[6]": "b0",
        "uo[7]": "b1",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_vhdl_seven_segment_seconds",
      "address": 199,
      "title": "7 segment seconds (VHDL Demo)",
      "author": "Matt Venn",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/TinyTapeout/tt05-vhdl-demo",
      "commit": "349650fcb9b91b47c558b57bbd89b9cec5113258",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_wokwi_376553022662786049",
      "address": 207,
      "title": "AGL CorticoNeuro-1",
      "author": "Arfan Ghani",
      "description": " Information is encoded as a sequence of events or spikes in neuro-inspired computing. Investigating how information is represented and processed as spike trains is of particular interest. This chip implements several test clusters featuring various spike trains. ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/arfanghani/tt05-submission-AGhani",
      "commit": "f2734d3cdecd57f90ff8d62fbc210c0073e909fc",
      "pinout": {
        "ui[0]": "CLOCK Attached to the on-board clock",
        "ui[1]": "INO Connected with a 1-bit FF",
        "ui[2]": "IN1 external input to the MUX",
        "ui[3]": "IN2 Enable signal to the MUX",
        "ui[4]": "IN3 Connected as a SELECT pin for the MUX (connected with (1x3x2x1) and (6x6x6) cluster.",
        "ui[5]": "IN4 Input to the (6x6x6) cluster",
        "ui[6]": "IN5 Input to the (6x6x6) cluster",
        "ui[7]": "IN6 Input to the (6x6x6) cluster",
        "uo[0]": "OUT0 on-board CLOCK",
        "uo[1]": "OUT1 Output from the LFSR",
        "uo[2]": "OUT2 Output from 2-bit FF",
        "uo[3]": "OUT3 Output from 3-bit FF",
        "uo[4]": "OUT4 Output from 4-bit FF",
        "uo[5]": "OUT5 Output from 5-bit FF",
        "uo[6]": "OUT6 Output from 6-bit FF",
        "uo[7]": "OUT7 MUX output)",
        "uio[0]": "D0  OUTPUT from a 1-bit FF",
        "uio[1]": "D7 OUTPUT from (1x3x3) cluster",
        "uio[2]": "D1 OUTPUT from the (5X5) cluster",
        "uio[3]": "D2 OUTPUT from (6x6x6) cluster",
        "uio[4]": "D3 OUTPUT from (6x6x6) cluster",
        "uio[5]": "D4 connected as an OUTPUT pin from either the (6x6x6) cluster or the (1x3x2x1) cluster (where IN3 is the input select pin)",
        "uio[6]": "D5 INPUT to the (6x6x6) cluster",
        "uio[7]": "D6 INPUT to the (6x6x6) cluster"
      }
    },
    {
      "macro": "tt_um_wokwi_377426511818305537",
      "address": 641,
      "title": "PRBS Generator",
      "author": "Ivan M Bow",
      "description": "Generates a PRBS that is configureable up to 8-bits.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/wulfhednar02/tt05_prbs_generator",
      "commit": "9e3cb62057112641f71319986143897287ad75d4",
      "pinout": {
        "ui[0]": "spi_cs",
        "ui[1]": "spi_clk",
        "ui[2]": "spi_mosi",
        "ui[3]": "output_en",
        "ui[4]": "data_in",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "debug_setup",
        "uo[0]": "prbs_out_1",
        "uo[1]": "prbs_out",
        "uo[2]": "prbs_out_n",
        "uo[3]": "prbs_out_n_1",
        "uo[4]": "data_clk",
        "uo[5]": "busy",
        "uo[6]": "debug_out_system_clk",
        "uo[7]": "debug_out_prbs_clk",
        "uio[0]": "debug_out_reg_sel_0",
        "uio[1]": "debug_out_reg_sel_1",
        "uio[2]": "debug_out_reg_sel_2",
        "uio[3]": "debug_out_prbs_clk_bypass",
        "uio[4]": "debug_out_data_count_clk",
        "uio[5]": "debug_out_data_count_comb_out",
        "uio[6]": "debug_out_seq_count_comb_out",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_378231665807713281",
      "address": 164,
      "title": "RAM cell test",
      "author": "Rodolfo Sanchez",
      "description": "Simple test with of a memory cell",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RodSchz/tt05-RodSchz-RAMtest",
      "commit": "9c3e633d86f7eee3e7c823a22123037657eea9f9",
      "pinout": {
        "ui[0]": "IN0 to IN3  - input data",
        "ui[1]": "IN4, IN5    - address selection",
        "ui[2]": "IN6         - write | read",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "OUT0 - OUT3 - output data",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_379319062779062273",
      "address": 99,
      "title": "7-segment display logic system ",
      "author": "Abrez Hussain, Dean Xavier Batres, Nathan Chau",
      "description": "7 segment display counter ",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/abrez2004/7segment",
      "commit": "05f41ed4a54687887196445654ed64528a3f2d30",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_379764885531576321",
      "address": 128,
      "title": "Count via LFSR",
      "author": "Eric Smith",
      "description": "Count via LFSR and display on 7 segment",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ericsmi/tt05-wokwi-lfsr-counter",
      "commit": "19a836407aea15876c536ebd6afa3a2748f789e1",
      "pinout": {
        "ui[0]": "reset_n",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_379824923824476161",
      "address": 101,
      "title": "Analog Clock",
      "author": "Justin Hui",
      "description": "LED controller for an Analog Clock taking a 1Hz internal clk input",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/jhui323444/tt05-submission-template-Justin-Hui-Analog-Clock",
      "commit": "f953d3cb5d215b2c83c4067ca9a47e8ad147021a",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "stop the clock",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "increment min counter by 1",
        "ui[7]": "increment hour counter by 1",
        "uo[0]": "hour 12 led",
        "uo[1]": "hour 1 led",
        "uo[2]": "hour 2 led",
        "uo[3]": "hour 3 led",
        "uo[4]": "hour 4 led",
        "uo[5]": "hour 5 led",
        "uo[6]": "hour 6 led",
        "uo[7]": "hour 7 led",
        "uio[0]": "hour 8 led",
        "uio[1]": "hour 9 led",
        "uio[2]": "hour 10 led",
        "uio[3]": "hour 11 led",
        "uio[4]": "0 min",
        "uio[5]": "15 min",
        "uio[6]": "30 min",
        "uio[7]": "45 min"
      }
    },
    {
      "macro": "tt_um_wokwi_379889284755158017",
      "address": 103,
      "title": "W_Li_10/28",
      "author": "Wendi Li",
      "description": "The circuit controls the seven segment display to diplay the authors initial and the date the circuit is designed",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/wendiiiiii/vlsi",
      "commit": "7fb51ce81797470ab78f2169331b81ffccce8450",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380005495431181313",
      "address": 14,
      "title": "Water Pump Controller",
      "author": "Hendrik",
      "description": "Controller for a camping van water pump with multiple tap switches and timer",
      "clock_hz": 32768,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/fahek/water-pump-controller-tto5",
      "commit": "7a5e8e8daffb04a4f0c5f9e1fae6e7eb3fe0e966",
      "pinout": {
        "ui[0]": "TapA",
        "ui[1]": "TapB",
        "ui[2]": "TapC",
        "ui[3]": "TapD",
        "ui[4]": "TapE",
        "ui[5]": "TapF",
        "ui[6]": "EnableTimeout",
        "ui[7]": "PressureHigh",
        "uo[0]": "Pump",
        "uo[1]": "PumpEnabled",
        "uo[2]": "ActiveNormal",
        "uo[3]": "ActiveWarning",
        "uo[4]": "ActiveHalted",
        "uo[5]": "RunLong",
        "uo[6]": "Buzzer",
        "uo[7]": "BuzzerHaltedOnly",
        "uio[0]": "CFG0",
        "uio[1]": "CFG1",
        "uio[2]": "CFG2",
        "uio[3]": "CFG3",
        "uio[4]": "CFG4",
        "uio[5]": "TimerScaleConfig",
        "uio[6]": "WarningTimeConfig",
        "uio[7]": "TimeoutConfig"
      }
    },
    {
      "macro": "tt_um_wokwi_380055891603379201",
      "address": 138,
      "title": "Hex Countdown",
      "author": "Jorge G\u00f3mez y Felipe G\u00f3mez",
      "description": "Hexadecimal countdown from F to 0",
      "clock_hz": 1,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/fegomezmir96/Contador",
      "commit": "5066838f74de11c0dd006d2c0313ef8cd29357b2",
      "pinout": {
        "ui[0]": "Activation signal",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380119282165535745",
      "address": 192,
      "title": "7 segment seconds",
      "author": "Matt Venn",
      "description": "counts up to 9 and wraps to 0. One step per clock cycle",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/mattvenn/tt05-seven-segment-seconds-wokwi",
      "commit": "3e9722ac3b04cab8a7562f4ceb79e49d54dbcb8d",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380120751165092865",
      "address": 35,
      "title": "WS2812B LED strip driver",
      "author": "Ciro Cattuto",
      "description": "Drives a WS2812B LED strip with random colors for each refresh",
      "clock_hz": 20000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ccattuto/tt05-rng-ws2812b-strip",
      "commit": "cac2417c8501649f06674596e1740e53f377f39b",
      "pinout": {
        "ui[0]": "clock source selection",
        "ui[1]": "external clock source",
        "ui[2]": "refresh freq sel (low)",
        "ui[3]": "refresh freq sel (high)",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "WS2812B LED strip output",
        "ui[7]": "shift register input",
        "uo[0]": "shift register output",
        "uo[1]": "shift register clock",
        "uo[2]": "WS2812B LED strip input",
        "uo[3]": "LED strip overflow",
        "uo[4]": "LED strip refresh",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380145600224164865",
      "address": 102,
      "title": "7 segment display",
      "author": "Shravyasai Koushik",
      "description": "Converts binary input up until 9 and some alphabets into 7 segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Shrav21/tapeouttest",
      "commit": "523960c48644475dfe02a6ebbedd5b84a74a1be0",
      "pinout": {
        "ui[0]": "red switch board",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "7 segment display",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380197591775930369",
      "address": 77,
      "title": "Blinking A",
      "author": "Ariella Eliassaf",
      "description": "Blink an A on the 7segment display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AriellaE/blinking-a",
      "commit": "930b5867a30dc527565638d151f9b75a7d8d5000",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380229599886002177",
      "address": 108,
      "title": "Stochastic Multiplier",
      "author": "David Parent",
      "description": "Creates a PRBS stream whre the probability of a 1 is the multiplication of two, two bit vectors.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/davidparent/Stochastic-Multiplier",
      "commit": "beb361b77d49efbd01d14f53dbf9ed8625801765",
      "pinout": {
        "ui[0]": "CLK",
        "ui[1]": "RESET",
        "ui[2]": "A",
        "ui[3]": "B",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "PRBS of A*B",
        "uo[1]": "PRBS of A",
        "uo[2]": "PRBS of B",
        "uo[3]": "PRBS",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380361576213660673",
      "address": 302,
      "title": "ping pong asic",
      "author": "Timonas Juonys",
      "description": "Hardware implemented ping pong for two players on a 16x24 led matrix as a display",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Timonas04/pong_game",
      "commit": "820246af3012ade1efb0491fb7f8a852a065fb4a",
      "pinout": {
        "ui[0]": "player1_up button",
        "ui[1]": "player1_down button",
        "ui[2]": "player1_left button",
        "ui[3]": "player1_right button",
        "ui[4]": "player2_up button",
        "ui[5]": "player2_down button",
        "ui[6]": "player2_left button",
        "ui[7]": "player2_right button",
        "uo[0]": "horz0 (lsd)",
        "uo[1]": "horz1 binary encoded position in the x direction",
        "uo[2]": "horz2",
        "uo[3]": "horz3",
        "uo[4]": "horz4",
        "uo[5]": "points player1 pulses when player 1 gets a point",
        "uo[6]": "points player2",
        "uo[7]": "vertical pixels shift register out",
        "uio[0]": "shift_reg_en (when D0 low, shift register ff mirror vertical pixels,when D0 high, then the shifting can start)",
        "uio[1]": "shift_reg_clk for vertical pixels",
        "uio[2]": "not used, pulled low internally",
        "uio[3]": "not used, pulled low internally",
        "uio[4]": "mux_clk - multiplexes between padle1, padle2, and ball, as the led matrix can only display one at a time",
        "uio[5]": "padles_en enable padle counters",
        "uio[6]": "ball_en enable ball counters",
        "uio[7]": "inp_reg_en enables input register. this should happen when clk=1, ball_en=0, padles_en=0"
      }
    },
    {
      "macro": "tt_um_wokwi_380408396356749313",
      "address": 42,
      "title": "ring osc test",
      "author": "Bob Poekert",
      "description": "simple ring oscillator",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bobpoekert/tinytapeout",
      "commit": "9cd09d07ebd2e162ac27856b8417691519aab910",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408409844584449",
      "address": 104,
      "title": "Supecon Gate Play",
      "author": "Adam Chasen",
      "description": "One of each with some flippy floppies",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/chaseadam/tt5",
      "commit": "6ceeeb70a2fd89444e17a2e486a070bcc56f49f1",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408455148316673",
      "address": 96,
      "title": "Ring Oscillator and Clock Source Switch",
      "author": "Dave Cox",
      "description": "A series of NOT gates with whip outs to measure self oscillation, and a clock switch",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/davecoxhome/tinytapeout",
      "commit": "41202a6b290532d15551fbeaf3b45c0d3cee4cb3",
      "pinout": {
        "ui[0]": "0 Osc In",
        "ui[1]": "1 ClkSel",
        "ui[2]": "2 CLK0 in",
        "ui[3]": "3 Clk1 in",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "0 OSC OutSlow/segment a",
        "uo[1]": "1 OSC OutMid/segment b",
        "uo[2]": "2 OSC OutFast/segment c",
        "uo[3]": "3 ClkOut/segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408486941145089",
      "address": 36,
      "title": "Tiny Tapeout 5 Workshop",
      "author": "Rob Campbell KG6HUM",
      "description": "Tiny Tapeout 5 Workshop",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/kg6hum/tinytapeout5_test1",
      "commit": "f51757c9fbf6e9bbe370defa21adcd35bae57d9a",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408594272345089",
      "address": 40,
      "title": "Clock Divider",
      "author": "Joey Castillo",
      "description": "Divides the clock input eight times, with CLK/2 on OUT7, CLK/4 on OUT6, etc.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/joeycastillo/joey-tiny-tapeout-5",
      "commit": "0d926c34cbed6f9bed141dd4744d5a4dba4f11b2",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "CLK/256",
        "uo[1]": "CLK/128",
        "uo[2]": "CLK/64",
        "uo[3]": "CLK/32",
        "uo[4]": "CLK/16",
        "uo[5]": "CLK/8",
        "uo[6]": "CLK/4",
        "uo[7]": "CLK/2",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408774591779841",
      "address": 76,
      "title": "Sawtooth Generator",
      "author": "Mooneer Salem",
      "description": "Generates sawtooth waves for use as audio.",
      "clock_hz": 50000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/tmiw/supercon2023-ttl",
      "commit": "6bb8a0126601dc5b561867a29d01f4f1b09757b7",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "Frequency left shift amount (in bits) -- bit 0",
        "ui[5]": "Frequency left shift amount (in bits) -- bit 1",
        "ui[6]": "Frequency left shift amount (in bits) -- bit 2",
        "ui[7]": "Frequency left shift amount (in bits) -- bit 3",
        "uo[0]": "PCM sawtooth wave output (bit 9)",
        "uo[1]": "PCM sawtooth wave output (bit 10)",
        "uo[2]": "PCM sawtooth wave output (bit 11)",
        "uo[3]": "PCM sawtooth wave output (bit 12)",
        "uo[4]": "PCM sawtooth wave output (bit 13)",
        "uo[5]": "PCM sawtooth wave output (bit 14)",
        "uo[6]": "PCM sawtooth wave output (bit 15)",
        "uo[7]": "PDM sawtooth wave output (needs LPF)",
        "uio[0]": "PCM sawtooth wave output (bit 9)",
        "uio[1]": "PCM sawtooth wave output (bit 10)",
        "uio[2]": "PCM sawtooth wave output (bit 11)",
        "uio[3]": "PCM sawtooth wave output (bit 12)",
        "uio[4]": "PCM sawtooth wave output (bit 13)",
        "uio[5]": "PCM sawtooth wave output (bit 14)",
        "uio[6]": "PCM sawtooth wave output (bit 15)",
        "uio[7]": "PDM sawtooth wave output (needs LPF)"
      }
    },
    {
      "macro": "tt_um_wokwi_380408784463076353",
      "address": 41,
      "title": "Binary Counter",
      "author": "Chinchilla",
      "description": "The Just Kidding flip flop has been changed to a binary counter",
      "clock_hz": 10,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/eatb33ts/tinytapeout_jkff",
      "commit": "ca2125bb7fb7c4e19fc501b8262ca1b18e57276c",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408823952452609",
      "address": 46,
      "title": "Character Selector",
      "author": "Dakota W Winslow",
      "description": "A circuit to output latin characters on a 7-segment display",
      "clock_hz": 1000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dakotawinslow/TinyTapeout5",
      "commit": "ba59a42f6cde2818a6a8b80be1c42e3492eb4408",
      "pinout": {
        "ui[0]": "dip0",
        "ui[1]": "dip1",
        "ui[2]": "dip2",
        "ui[3]": "dip3",
        "ui[4]": "dip4",
        "ui[5]": "dip5",
        "ui[6]": "not connected",
        "ui[7]": "not connected",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380408936929183745",
      "address": 72,
      "title": "Tapeout Test",
      "author": "bignug13",
      "description": "For Supercon 2023: Some logic gates that add things",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/bignug13/Tapeout",
      "commit": "aa82f6d5f2c8d1253b05320e2c1a0ac94993bacb",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409019830656001",
      "address": 68,
      "title": "Logic Gates Tapeout",
      "author": "Alexandre Ney Guimaraes",
      "description": "TesteX",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/AlexandreNeyGuimaraes/TinyTapeoutTest",
      "commit": "4417d8392d15dda92d0f0ab248a3b17085402551",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409081067502593",
      "address": 64,
      "title": "tto5 Supercon Project",
      "author": "Ryan Young",
      "description": "quick full adder design",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ryanayoung/tto5_superconsubmission001",
      "commit": "0a03a938ff1180039f265d8a2dee55d7f524ac04",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409086743445505",
      "address": 66,
      "title": "GameOfLife",
      "author": "Eric Moderbacher",
      "description": "a single cell's logic for conways game of life",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/ericmoderbacher/TapeOut",
      "commit": "f82af049700b3f2537361468eff006be0a27d643",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409169798008833",
      "address": 37,
      "title": "Tiny Tapeout 1",
      "author": "James Bryant",
      "description": "A description",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/james-bryant/tiny-tapeout",
      "commit": "06aa8edeab552bff17b0615ea4d770562bdb9664",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409236812508161",
      "address": 106,
      "title": "tto5",
      "author": "kl",
      "description": "tto5",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/klei22/tto5",
      "commit": "68f6f78661b72a01511eef0ad3659a520ca96f7e",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409369220404225",
      "address": 74,
      "title": "Shifty Snakey",
      "author": "poynting",
      "description": "Shift register snake demo",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/poynting/tt5-shiftsnake",
      "commit": "da8e3595ec8acf785c0d2fcdfb1c08e71c78b76e",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409393770716161",
      "address": 78,
      "title": "Supercon 2023",
      "author": "Alec Probst",
      "description": "Supercon 2023 Tiny Tapeout Submission. Displays a white pixel and blue background through VGA. Makes use of Cutout1's VGA Flappy bird code.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alecjprobst/supercon2023",
      "commit": "27f5f95934b11d2dd85df6647b68b7582a6fbd16",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "R1",
        "uo[1]": "G1",
        "uo[2]": "B1",
        "uo[3]": "vsync",
        "uo[4]": "R0",
        "uo[5]": "G0",
        "uo[6]": "B0",
        "uo[7]": "hsync",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409481852161025",
      "address": 44,
      "title": "test001",
      "author": "dmitry",
      "description": "Just a Test Tiny TapeOut",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/DmitryPustovit/tiny-tapeour-demo",
      "commit": "761081a77c492d6c980f038200b88cd9208219b1",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409488188706817",
      "address": 38,
      "title": "Supercon Workshop",
      "author": "Caleb Hensley",
      "description": "Example of logic gates: AND, NAND, OR, XOR",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/calliday/tiny-tapeout",
      "commit": "7604ccf7eae04d5126bf9e0adaf66a5c8d2257fb",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409528895479809",
      "address": 290,
      "title": "RBUART",
      "author": "Brian 'redbeard' Harrington",
      "description": "A simple UART device",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/brianredbeard/tt05-submission-template",
      "commit": "c98100a2b8923c7eb03c74b70a8d9465ac9338d2",
      "pinout": {
        "ui[0]": "N/A",
        "ui[1]": "Bit 0",
        "ui[2]": "Bit 1",
        "ui[3]": "Bit 2",
        "ui[4]": "Bit 3",
        "ui[5]": "Bit 4",
        "ui[6]": "Bit 5",
        "ui[7]": "Bit 6",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409532780455937",
      "address": 70,
      "title": "tt5modifyd",
      "author": "HMaxMax",
      "description": "triple or gate",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/HMaxMax/tt5modifyd",
      "commit": "d983c4e7ad08f52fb4a7b7f59255e03ab20bd0af",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409568391147521",
      "address": 100,
      "title": "Hardware Trojan Example",
      "author": "Jeremy Hong",
      "description": "Simple hardware trojan circuit described by Ryan Cornateanu in a medium article",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/hongselectronics/HW_Trojan_hongseleco",
      "commit": "7cb1186e66e2854a1ab4a82ff5ea6689895d6a37",
      "pinout": {
        "ui[0]": "r0_normal",
        "ui[1]": "r1_normal",
        "ui[2]": "r2_normal",
        "ui[3]": "r3_normal",
        "ui[4]": "r0_trojan",
        "ui[5]": "r1_trojan",
        "ui[6]": "r2_trojan",
        "ui[7]": "r3_trojan",
        "uo[0]": "Output from r0_normal - r3_normal circuit",
        "uo[1]": "segment b not used",
        "uo[2]": "segment c not used",
        "uo[3]": "segment d not used",
        "uo[4]": "segment e not used",
        "uo[5]": "segment f not used",
        "uo[6]": "Output from r0_trojan - r3_trojan circuit",
        "uo[7]": "dot not used",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380409904919056385",
      "address": 47,
      "title": "Intructouction to PRBS",
      "author": "Chih-Kuan Ho and David Parent ",
      "description": "This is a simple design used to verify the design flow, so that we can teach lower division college studdnts IC desgin.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/davidparent/PRBS-ASIC",
      "commit": "47a4aca211d8ac85e47144f7a7f4430e338ae629",
      "pinout": {
        "ui[0]": "Clock",
        "ui[1]": "Reset",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "segment PRBS",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380410498092232705",
      "address": 34,
      "title": "UART Greeter with RNN Module",
      "author": "Jonathan Zentgraf",
      "description": "Sends 'Hello' over UART and fills die space with metastability",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/zx96/tiny-tapeout-5",
      "commit": "8116abe2a110055abdd5f2ae7cabf7febda2ed4b",
      "pinout": {
        "ui[0]": "RNN input 0",
        "ui[1]": "RNN input 1",
        "ui[2]": "RNN input 2",
        "ui[3]": "RNN input 3",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "Shift register load (low) / enable (high)",
        "ui[7]": "UART output enable",
        "uo[0]": "RNN output 0",
        "uo[1]": "RNN output 1",
        "uo[2]": "RNN output 2",
        "uo[3]": "RNN output 3",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "UART output enabled",
        "uo[7]": "UART output",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380412382001715201",
      "address": 231,
      "title": "Naive 8-bit Binary Counter",
      "author": "Sean Bruton",
      "description": "A simple 8-bit binary counter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/sbruton/asic-poc",
      "commit": "950c11fd90c10f66361b69c02c66ebc357a2e214",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380416099936681985",
      "address": 32,
      "title": "7 segment seconds (Verilog Demo)",
      "author": "Matt Venn, cloned by Cedric Honnet",
      "description": "Count up to 10, one second at a time.",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/honnet/TinyTapeout_tt05-submission-template",
      "commit": "16d9c0f7ce26c4b637606b988ec1d25415c3ca51",
      "pinout": {
        "ui[0]": "compare bit 11",
        "ui[1]": "compare bit 12",
        "ui[2]": "compare bit 13",
        "ui[3]": "compare bit 14",
        "ui[4]": "compare bit 15",
        "ui[5]": "compare bit 16",
        "ui[6]": "compare bit 17",
        "ui[7]": "compare bit 18",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "second counter bit 0",
        "uio[1]": "second counter bit 1",
        "uio[2]": "second counter bit 2",
        "uio[3]": "second counter bit 3",
        "uio[4]": "second counter bit 4",
        "uio[5]": "second counter bit 5",
        "uio[6]": "second counter bit 6",
        "uio[7]": "second counter bit 7"
      }
    },
    {
      "macro": "tt_um_wokwi_380416361853146113",
      "address": 98,
      "title": "IDK WHAT TO DO",
      "author": "Benjamin Meyer",
      "description": "Help me",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/CrypticXVZ/LOL",
      "commit": "89744d0c37009262cc739802f23d2e2bf2bbb611",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380416616536542209",
      "address": 110,
      "title": "TT05 Submission",
      "author": "Alexander Whittemore",
      "description": "I don't know what this project does yet but hopefully it's cool.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/alexwhittemore/TT05-AlexW",
      "commit": "9fd6e6da5f8b426dd53b9469de77e7e5f0fc200a",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380438365946734593",
      "address": 226,
      "title": "UART test",
      "author": "Rodolfo Sanchez Fraga",
      "description": "UART test",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/RodSchz/tt05-RodSchz-uart_test",
      "commit": "757d3dd2684215b55836ade6d20a123287b4539f",
      "pinout": {
        "ui[0]": "IN6 - Load | TX",
        "ui[1]": "IN7 - Output enable",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "OUT0 - Output enable indicator",
        "uo[1]": "OUT1 - Load | TX indicator",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380465686251921409",
      "address": 229,
      "title": "Tiny Tapeout 5 TM project1",
      "author": "Miho Yamada",
      "description": "counter",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/keropiyo/tt05-submission-template",
      "commit": "a1502d1cc0ba624f3ef15fe6f86d21e2a2abc2e2",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380477805171811329",
      "address": 298,
      "title": "2-Bit ALU + Dice",
      "author": "Andrew Nam",
      "description": "This is an extremely professional design that Steve Jobs approves. It consists of a 2-bit ALU and an impressive dice. Can translate binary code into single digit display.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/andrewjh09nam/tinytapeout05_andy_ALU_dice",
      "commit": "cde1aff4149771336eb7d20cf7a6b5d0f9972f83",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "",
        "uo[1]": "",
        "uo[2]": "",
        "uo[3]": "",
        "uo[4]": "",
        "uo[5]": "",
        "uo[6]": "",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wokwi_380490286828784641",
      "address": 300,
      "title": "TT02 Wokwi 7seg remake",
      "author": "Darryl Miles",
      "description": "TT02 Wokwi 7seg remake (MUX transposed)",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/dlmiles/tt05-7seg-mux-transpose",
      "commit": "78eca02d5e5645f9f90a94fc7b3eebd25123a690",
      "pinout": {
        "ui[0]": "",
        "ui[1]": "",
        "ui[2]": "",
        "ui[3]": "",
        "ui[4]": "",
        "ui[5]": "",
        "ui[6]": "",
        "ui[7]": "",
        "uo[0]": "segment a",
        "uo[1]": "segment b",
        "uo[2]": "segment c",
        "uo[3]": "segment d",
        "uo[4]": "segment e",
        "uo[5]": "segment f",
        "uo[6]": "segment g",
        "uo[7]": "dot",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    },
    {
      "macro": "tt_um_wrapper_inputblackboxoutput",
      "address": 198,
      "title": "Byte Computer",
      "author": "Rutuparn Pawar",
      "description": "An 8 bit turing complete computer",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/InputBlackBoxOutput/Byte-Computer",
      "commit": "ed769069cc0cb8a9d2af290ebf9cb78fe7784696",
      "pinout": {
        "ui[0]": "data[7]",
        "ui[1]": "data[6]",
        "ui[2]": "data[5]",
        "ui[3]": "data[4]",
        "ui[4]": "data[3]",
        "ui[5]": "data[2]",
        "ui[6]": "data[1]",
        "ui[7]": "data[0]",
        "uo[0]": "data[7]",
        "uo[1]": "data[6]",
        "uo[2]": "data[5]",
        "uo[3]": "data[4]",
        "uo[4]": "data[3]",
        "uo[5]": "data[2]",
        "uo[6]": "data[1]",
        "uo[7]": "data[0]",
        "uio[0]": "we",
        "uio[1]": "halt",
        "uio[2]": "",
        "uio[3]": "addr[4]",
        "uio[4]": "addr[3]",
        "uio[5]": "addr[2]",
        "uio[6]": "addr[1]",
        "uio[7]": "addr[0]"
      }
    },
    {
      "macro": "tt_um_wta",
      "address": 160,
      "title": "Winner-Take-All Network (Verilog Demo)",
      "author": "Nicholas Kuipers",
      "description": "Implement a WTA network",
      "clock_hz": 10000000,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/Kuipman/tt05-wta-demo",
      "commit": "013cfcbc0eb9e0127579edd2bf2467fd855f5124",
      "pinout": {
        "ui[0]": "current bit 11",
        "ui[1]": "current bit 12",
        "ui[2]": "current bit 13",
        "ui[3]": "current bit 14",
        "ui[4]": "current bit 15",
        "ui[5]": "current bit 16",
        "ui[6]": "current bit 17",
        "ui[7]": "current bit 18",
        "uo[0]": "membrane potential bit a",
        "uo[1]": "membrane potential bit b",
        "uo[2]": "membrane potential bit c",
        "uo[3]": "membrane potential bit d",
        "uo[4]": "membrane potential bit e",
        "uo[5]": "membrane potential bit f",
        "uo[6]": "membrane potential bit g",
        "uo[7]": "membrane potential bit h",
        "uio[0]": "spike bit 0",
        "uio[1]": "unspecified",
        "uio[2]": "unspecified",
        "uio[3]": "unspecified",
        "uio[4]": "unspecified",
        "uio[5]": "unspecified",
        "uio[6]": "unspecified",
        "uio[7]": "unspecified"
      }
    },
    {
      "macro": "tt_um_yubex_metastability_experiment",
      "address": 719,
      "title": "metastability experiment",
      "author": "yubex",
      "description": "The design purpose is to evaluate, if metastability can be used as a true random number generator source in an ASIC design.",
      "clock_hz": 0,
      "tiles": "1x1",
      "analog_pins": [],
      "repo": "https://github.com/yubex/tt04-metastability-experiment",
      "commit": "b49abb675335b8502f162b47d85370a6d2fc8737",
      "pinout": {
        "ui[0]": "trigger",
        "ui[1]": "mode",
        "ui[2]": "delay_ctrl[0]",
        "ui[3]": "delay_ctrl[1]",
        "ui[4]": "delay_ctrl[2]",
        "ui[5]": "delay_ctrl[3]",
        "ui[6]": "delay_ctrl[4]",
        "ui[7]": "delay_ctrl[5]",
        "uo[0]": "segment a, mode",
        "uo[1]": "segment b, toggle_dff_en",
        "uo[2]": "segment c, toggle_dff",
        "uo[3]": "segment d, delayed_toggle_dff",
        "uo[4]": "segment e, meta_dff_0",
        "uo[5]": "segment f, meta_dff_1",
        "uo[6]": "segment g, toggle_dff_en_3t",
        "uo[7]": "dot, meta_err_detected",
        "uio[0]": "",
        "uio[1]": "",
        "uio[2]": "",
        "uio[3]": "",
        "uio[4]": "",
        "uio[5]": "",
        "uio[6]": "",
        "uio[7]": ""
      }
    }
  ]
}